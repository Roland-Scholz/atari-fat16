ca65 V2.17 - Git 59ab140
Main file   : ..\src\dup.a65
Current file: ..\src\dup.a65

000000r 1               	.IF PLATFORM  <= 1
000000r 1               		.A8
000000r 1               		.I8
000000r 1               	.ENDIF
000000r 1               
000000r 1               	.IF PLATFORM = 2 || PLATFORM = 4
000000r 1               		.include "fat16.inc"
000000r 2               ;
000000r 2               ; PLATFORM = 0 : Homebrew FPGA
000000r 2               ; PLATFORM = 1 : Homebrew Hardware
000000r 2               ; PLATFORM = 2 : Atari XL/XE
000000r 2               ; PLATFORM = 3 : my65816 FPGA
000000r 2               ; PLATFORM = 4 : Atari XL/XE Fat12
000000r 2               ;
000000r 2               ;
000000r 2               ; FAT-16 defines
000000r 2               ;
000000r 2               DRVCHAR		= 'D'
000000r 2               
000000r 2               	.IF PLATFORM <= 1
000000r 2               FATPTRS		= $0006
000000r 2               FATPTRD		= $0008
000000r 2               	.ELSE
000000r 2               FATPTRS		= $0000
000000r 2               FATPTRD		= $0002
000000r 2               SECTOR		= FMSZPG
000000r 2               	.ENDIF
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Memory Setup
000000r 2               ;--------------------------------------------------------------
000000r 2               	.IF PLATFORM <= 1
000000r 2               VBASE		= $400
000000r 2               	.ENDIF
000000r 2               
000000r 2               ;	.IF PLATFORM = 3
000000r 2               ;VBASE		= $400
000000r 2               ;	.ENDIF
000000r 2               
000000r 2               	.IF PLATFORM = 2 || PLATFORM = 4
000000r 2               VBASE		= $700
000000r 2               FATCODE		= VBASE+$600
000000r 2               DUPCODE		= $1a40
000000r 2               
000000r 2               JSTARTUP	= FATCODE
000000r 2               JPRINT		= FATCODE+3
000000r 2               JPUTHEX		= FATCODE+6
000000r 2               JPRINTSTR	= FATCODE+9
000000r 2               JINITFAT	= FATCODE+12
000000r 2               	.ENDIF
000000r 2               
000000r 2               V		= VBASE
000000r 2               BUFFER		= VBASE+$200
000000r 2               FATBUF		= VBASE+$400
000000r 2               
000000r 2               CRENAME		= 32
000000r 2               CDELETE		= 33
000000r 2               CCREDIR		= 34
000000r 2               CFSTAT		= 40
000000r 2               CCHADIR		= 41
000000r 2               
000000r 2               DEL		= $E5
000000r 2               EOF		= $88
000000r 2               
000000r 2               SECCLUS		= V+0		;1
000000r 2               RESSEC		= V+1		;2
000000r 2               NUMFATS		= V+3		;1
000000r 2               NUMDIR		= V+4		;2
000000r 2               NUMSECS		= V+6		;2
000000r 2               MEDIA		= V+8		;1
000000r 2               SECSFAT		= V+9		;2
000000r 2               FCBCODE		= V+11 		;1
000000r 2               
000000r 2               dummy		= V+12		;4
000000r 2               FATBASE		= V+16		;4
000000r 2               DIRBASE		= V+20		;4
000000r 2               DATBASE		= V+24		;4
000000r 2               LASTSEC		= V+28		;4
000000r 2               LASTFAT		= V+32		;4
000000r 2               BYTCLUS		= V+36 		;4
000000r 2               
000000r 2               BIN		= V+40 		;4
000000r 2               BCD		= V+44 		;5
000000r 2               DECIMAL		= V+49 		;10
000000r 2               
000000r 2               NEWCLUS		= V+59		;2
000000r 2               DDIRTY		= V+61 		;1
000000r 2               FDIRTY		= V+62 		;1
000000r 2               BUFADRL		= V+63 		;1
000000r 2               BUFADRH		= V+64 		;1
000000r 2               
000000r 2               DIRCLUS		= V+65		;2
000000r 2               DIRRENA		= V+67 		;11
000000r 2               
000000r 2               NODISPL		= V+78 		;1
000000r 2               WILD		= V+79 		;1
000000r 2               DIRLINE		= V+80 		;13
000000r 2               DIRLENG		= V+93 		;10
000000r 2               DIREOF		= V+103 	;1
000000r 2               SAVEY		= V+104		;1
000000r 2               VALIDS		= V+105		;1-byte number of specials chars to check for
000000r 2               HILF		= V+106		;1-byte aux usage
000000r 2               ASTART		= V+107		;2-byte file load start vector
000000r 2               AEND		= V+109		;2-byte file load end vector
000000r 2               CNT		= V+111		;1-byte adress enter counter DUP
000000r 2               FHEADER		= V+112		;2-byte save file header ($FF)
000000r 2               FSTART		= V+114		;2-byte file load start vector save
000000r 2               FEND		= V+116		;2-byte file load end vector save
000000r 2               FSTARTS		= V+118		;2-byte file load start vector save
000000r 2               FENDS		= V+120		;2-byte file load end vector save
000000r 2               FDIFF		= V+122		;2-byte "into" difference save
000000r 2               JMPIND		= V+124		;1-byte holding $4C for JMP
000000r 2               JMPPTR		= V+125		;2-byte jmp address
000000r 2               
000000r 2               F		= V+127
000000r 2               
000000r 2               FIOCBNR		= F		;1-byte FCB is assigned to this IOCB
000000r 2               FFCBOFF		= F+1		;1-byte Offset of this FCB from FCB0
000000r 2               FSTRTCL		= F+2		;2-byte Start cluster of file
000000r 2               FILELEN		= F+4		;4-byte length of file
000000r 2               FWBURST		= F+8		;1-byte write burst 0=OFF, other=ON
000000r 2               FBURST		= F+9		;1-byte flag indicating burst read ($FF = slow)
000000r 2               FRPOS		= F+10		;4-byte bytes already read
000000r 2               FVAR32		= F+14		;4-byte 32-bit general var
000000r 2               FCURCLUS	= F+18		;4-byte current cluster
000000r 2               FCURSEC		= F+22		;1-byte current sector
000000r 2               FCURPTR		= F+23 		;2-byte current pointer into sector buffer
000000r 2               FSECTOR		= F+25 		;4-byte last sector read
000000r 2               
000000r 2               DIRTEXT		= F+29		;11-byte directory text 8 + 3
000000r 2               DIRPTR		= F+40		;2-byte pointer into directory sector
000000r 2               DIRSEC		= F+42		;4-byte directory sector
000000r 2               DIRFILE		= F+46		;1-byte dir or file to search for
000000r 2               FBLKEND		= F+46
000000r 2               
000000r 2               FCB0		= V+256
000000r 2               FCB1		= FCB0+64
000000r 2               FCB2		= FCB1+64
000000r 2               FCB3		= FCB2+64
000000r 2               
000000r 2               DNAME		= 0
000000r 2               DEXT		= 8
000000r 2               DATTRIB		= 11
000000r 2               DCLUS		= $1A
000000r 2               DLEN		= $1C
000000r 2               PART1		= $1C6
000000r 2               
000000r 1               		.include "atarixl.inc"
000000r 2               ;	SPACE	4,10
000000r 2               ;***	Copyright 1984 ATARI.  Unauthorized reproduction, adaptation,
000000r 2               ;*	distribution, performance or display of this computer program
000000r 2               ;*	or the associated audiovisual work is strictly prohibited.
000000r 2               ;	SPACE	4,10
000000r 2               ;***	OS - Operating System
000000r 2               ;*
000000r 2               ;*	NOTES
000000r 2               ;*		This represents an attempt to bring the OS :
000000r 2               ;*		into conformance with the Atari Internal So:
000000r 2               ;*		Standards as defined in the Software Develo:
000000r 2               ;*		Committee Report on Procedures And Standard:
000000r 2               ;*		(10/27/81).  Due to time constraints, the e:
000000r 2               ;*		source could not be brought up to the stand:
000000r 2               ;*		particularly in the area of subroutine head:
000000r 2               ;*		documentation (ENTRY, EXIT, CHANGES and CAL:
000000r 2               ;*		More complete and consistent conformance to:
000000r 2               ;*		standard is planned for the next revision o:
000000r 2               ;*		Operating System (Revision 3).
000000r 2               ;*
000000r 2               ;*	MODS
000000r 2               ;*		Revision A (400/800)
000000r 2               ;*		D. Crane/A. Miller/L. Kaplan/R. Whitehead
000000r 2               ;*
000000r 2               ;*		Revision B (400/800)
000000r 2               ;*		Fix several problems.
000000r 2               ;*		M. Mahar/R. S. Scheiman
000000r 2               ;*
000000r 2               ;*		Revision 10 (1200XL)
000000r 2               ;*		Support 1200XL, add new features.
000000r 2               ;*		H. Stewart/L. Winner/R. S. Scheiman/
000000r 2               ;*		Y. M. Chen/M. W. Colburn	10/26/82
000000r 2               ;*
000000r 2               ;*		Revision 11 (1200XL)
000000r 2               ;*		Fix several problems.
000000r 2               ;*		R. S. Scheiman	12/23/82
000000r 2               ;*
000000r 2               ;*		Revision 1 (600XL/800XL)
000000r 2               ;*		Support PBI and on-board BASIC.
000000r 2               ;*		R. S. Scheiman/R. K. Nordin/Y. M. Chen	03/11/83
000000r 2               ;*
000000r 2               ;*		Revision 2 (600XL/800XL)
000000r 2               ;*		Fix several problems.
000000r 2               ;*		R. S. Scheiman	05/10/83
000000r 2               ;*		Bring closer to Coding Standard (object unchanged).
000000r 2               ;*		R. K. Nordin	11/01/83
000000r 2               
000000r 2               
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Program Structure
000000r 2               ;*
000000r 2               ;*	The sections of the OS appear in the following order with
000000r 2               ;*	corresponding subtitles:
000000r 2               ;*
000000r 2               ;*	Equates and Definitions
000000r 2               ;*
000000r 2               ;*		System Symbol Equates
000000r 2               ;*		System Address Equates
000000r 2               ;*		Miscellaneous Address Equates
000000r 2               ;*		Macro Definitions
000000r 2               ;*
000000r 2               ;*	Code and Data
000000r 2               ;*
000000r 2               ;*		First 8K ROM Identification and Checksum
000000r 2               ;*
000000r 2               ;*		Interrupt Handler
000000r 2               ;*		Initialization
000000r 2               ;*		Disk Input/Ouput
000000r 2               ;*		Relocating Loader
000000r 2               ;*		Self-test, Part 1
000000r 2               ;*		Parallel Input/Output
000000r 2               ;*		Peripheral Handler Loading Facility, Part 1
000000r 2               ;*		Self-test, Part 2
000000r 2               ;*		Peripheral Handler Loading Facility, Part 2
000000r 2               ;*
000000r 2               ;*		International Character Set
000000r 2               ;*
000000r 2               ;*		Self-test, Part 3
000000r 2               ;*		Floating Point Package
000000r 2               ;*
000000r 2               ;*		Domestic Character Set
000000r 2               ;*
000000r 2               ;*		Device Handler Vector Tables
000000r 2               ;*		Jump Vectors
000000r 2               ;*		Generic Parallel Device Handler Vector Table
000000r 2               ;*
000000r 2               ;*		$E4C0 Patch
000000r 2               ;*		Central Input/Output
000000r 2               ;*		Peripheral Handler Loading Facility, Part 3
000000r 2               ;*		$E912 Patch
000000r 2               ;*		Peripheral Handler Loading Facility, Part 4
000000r 2               ;*		$E959 Patch
000000r 2               ;*		Serial Input/Output
000000r 2               ;*		Keyboard, Editor and Screen Handler, Part 1
000000r 2               ;*		Peripheral Handler Loading Facility, Part 5
000000r 2               ;*		$EF6B Patch
000000r 2               ;*		Keyboard, Editor and Screen Handler, Part 2
000000r 2               ;*		$F223 Patch
000000r 2               ;*		Keyboard, Editor and Screen Handler, Part 3
000000r 2               ;*		$FCD8 Patch
000000r 2               ;*		Cassette Handler
000000r 2               ;*		Printer Handler
000000r 2               ;*		Self-test, Part 4
000000r 2               ;*
000000r 2               ;*		Second 8K ROM Identification and Checksum
000000r 2               ;*		6502 Machine Vectors
000000r 2               ;	SUBTTL	'System Symbol Equates'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Assembly Option Equates
000000r 2               
000000r 2               
000000r 2               FALSE	=	0
000000r 2               TRUE	=	1
000000r 2               
000000r 2               .define	VGC	TRUE	;virtual game controllers
000000r 2               .define	RAMSYS	FALSE	;not RAM based system
000000r 2               .define	LNBUG	FALSE	;no LNBUG interface
000000r 2               .define	ACMI	FALSE	;no asynchronous communications mod:
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Identification Equates
000000r 2               
000000r 2               
000000r 2               IDREV	=	$02	;identification revision number
000000r 2               IDDAY	=	$10	;identification day
000000r 2               IDMON	=	$05	;identification month
000000r 2               IDYEAR	=	$83	;identification year
000000r 2               IDCPU	=	$02	;identification CPU series
000000r 2               IDPN1	=	'B'	;identification part number field 1
000000r 2               IDPN2	=	'B'	;identification part number field 2
000000r 2               IDPN3	=	$00	;identification part number field 3
000000r 2               IDPN4	=	$00	;identification part number field 4
000000r 2               IDPN5	=	$01	;identification part number field 5
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Configuration Equates
000000r 2               ;*
000000r 2               ;*	NOTES
000000r 2               ;*		Problem: last byte of HATABS (as defined by:
000000r 2               ;*		overlaps first power-up validation byte.
000000r 2               
000000r 2               
000000r 2               MAXDEV	=	33	;offset to last possible entry of HATABS
000000r 2               IOCBSZ	=	16	;length of IOCB
000000r 2               
000000r 2               SEIOCB	=	0*IOCBSZ	;screen editor IOCB index
000000r 2               MAXIOC	=	8*IOCBSZ	;first invalid IOCB index
000000r 2               
000000r 2               DSCTSZ	=	128	;disk sector size
000000r 2               
000000r 2               LEDGE	=	2	;left edge
000000r 2               REDGE	=	39	;right edge
000000r 2               
000000r 2               INIML	=	$0700	;initial MEMLO
000000r 2               
000000r 2               ICSORG	=	$CC00	;international character set origin
000000r 2               DCSORG	=	$E000	;domestic character set origin
000000r 2               ;	SPACE	4,10
000000r 2               ;**	IOCB Command Code Equates
000000r 2               
000000r 2               
000000r 2               OPEN	=	$03	;open
000000r 2               GETREC	=	$05	;get record
000000r 2               GETCHR	=	$07	;get character(s)
000000r 2               PUTREC	=	$09	;put record
000000r 2               PUTCHR	=	$0B	;put character(s)
000000r 2               CLOSE	=	$0C	;close
000000r 2               STATIS	=	$0D	;status
000000r 2               SPECIL	=	$0E	;special
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Special Entry Command Equates
000000r 2               
000000r 2               
000000r 2               ;	Screen Commands
000000r 2               
000000r 2               DRAWLN	=	$11	;draw line
000000r 2               FILLIN	=	$12	;draw line with right fill
000000r 2               ;	SPACE	4,10
000000r 2               ;**	ICAX1 Auxiliary Byte 1 Equates
000000r 2               
000000r 2               
000000r 2               APPEND	=	$01	;open write append (D:) or screen read (E:)
000000r 2               DIRECT	=	$02	;open for directory access (D:)
000000r 2               OPNIN	=	$04	;open for input (all devices)
000000r 2               OPNOT	=	$08	;open for output (all devices)
000000r 2               MXDMOD	=	$10	;open for mixed mode (E:, S:)
000000r 2               INSCLR	=	$20	;open for input without clearing screen (E:, S:)
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Device Code Equates
000000r 2               
000000r 2               
000000r 2               CASSET	=	'C'	;cassette
000000r 2               DISK	=	'D'	;disk
000000r 2               SCREDT	=	'E'	;screen editor
000000r 2               KBD	=	'K'	;keyboard
000000r 2               PRINTR	=	'P'	;printer
000000r 2               DISPLY	=	'S'	;screen display
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Character and Key Code Equates
000000r 2               
000000r 2               
000000r 2               CLS	=	$7D	;clear screen
000000r 2               EOL	=	$9B	;end of line (RETURN)
000000r 2               
000000r 2               HELP	=	$11	;key code for HELP
000000r 2               CNTLF1	=	$83	;key code for CTRL-F1
000000r 2               CNTLF2	=	$84	;key code for CTRL-F2
000000r 2               CNTLF3	=	$93	;key code for CTRL-F3
000000r 2               CNTLF4	=	$94	;key code for CTRL-F4
000000r 2               CNTL1	=	$9F	;key code for CTRL-1
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Status Code Equates
000000r 2               
000000r 2               
000000r 2               SUCCES	=	1	;successful operation
000000r 2               
000000r 2               BRKABT	=	128	;BREAK key abort
000000r 2               PRVOPN	=	129	;IOCB already open error
000000r 2               NONDEV	=	130	;nonexistent device error
000000r 2               WRONLY	=	131	;IOCB opened for write only error
000000r 2               NVALID	=	132	;invalid command error
000000r 2               NOTOPN	=	133	;device/file not open error
000000r 2               BADIOC	=	134	;invalid IOCB index error
000000r 2               RDONLY	=	135	;IOCB opened for read only error
000000r 2               EOFERR	=	136	;end of file error
000000r 2               TRNRCD	=	137	;truncated record error
000000r 2               TIMOUT	=	138	;peripheral device timeout error
000000r 2               DNACK	=	139	;device does not acknowledge command error
000000r 2               FRMERR	=	140	;serial bus framing error
000000r 2               CRSROR	=	141	;cursor overrange error
000000r 2               OVRRUN	=	142	;serial bus data overrun error
000000r 2               CHKERR	=	143	;serial bus checksum error
000000r 2               DERROR	=	144	;device done (operation incomplete) error
000000r 2               BADMOD	=	145	;bad screen mode number error
000000r 2               FNCNOT	=	146	;function not implemented in handler error
000000r 2               SCRMEM	=	147	;insufficient memory for screen mode error
000000r 2               
000000r 2               ;**	DCB Device Bus ID Equates
000000r 2               
000000r 2               
000000r 2               DISKID	=	$31	;disk bus ID
000000r 2               PDEVN	=	$40	;printer bus ID
000000r 2               CASET	=	$60	;cassette bus ID
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Bus Command Equates
000000r 2               
000000r 2               
000000r 2               FOMAT	=	'!'	;format command
000000r 2               PUTSEC	=	'P'	;put sector command
000000r 2               READ	=	'R'	;read command
000000r 2               STATC	=	'S'	;status command
000000r 2               WRITE	=	'W'	;write command
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Command Auxiliary Byte Equates
000000r 2               
000000r 2               
000000r 2               DOUBLE	=	'D'	;print 20 characters double width
000000r 2               NORMAL	=	'N'	;print 40 characters normally
000000r 2               PLOT	=	'P'	;plot
000000r 2               SIDWAY	=	'S'	;print 16 characters sideways
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Bus Response Equates
000000r 2               
000000r 2               
000000r 2               ACK	=	'A'	;device acknowledged
000000r 2               COMPLT	=	'C'	;device successfully completed operation
000000r 2               ERROR	=	'E'	;device incurred error in attempted operation
000000r 2               NACK	=	'N'	;device did not understand
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Miscellaneous Equates
000000r 2               
000000r 2               
000000r 2               FPREC	=	6	;precision
000000r 2               
000000r 2               FMPREC	=	FPREC-1	;length of mantissa
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Cassette Record Type Equates
000000r 2               
000000r 2               
000000r 2               HDR	=	$FB	;header
000000r 2               DTA	=	$FC	;data record
000000r 2               DT1	=	$FA	;last data record
000000r 2               EOT	=	$FE	;end of tape (file)
000000r 2               
000000r 2               TONE1	=	2	;record
000000r 2               TONE2	=	1	;playback
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Cassette Timing Equates
000000r 2               
000000r 2               
000000r 2               WLEADN	=	1152	;NTSC 19.2 second WRITE file leader
000000r 2               RLEADN	=	576	;NTSC 9.6 second READ file leader
000000r 2               WIRGLN	=	180	;NTSC 3.0 second WRITE IRG
000000r 2               RIRGLN	=	120	;NTSC 2.0 second READ IRG
000000r 2               WSIRGN	=	15	;NTSC 0.25 second WRITE short IRG
000000r 2               RSIRGN	=	10	;NTSC 0.16 second READ short IRG
000000r 2               BEEPNN	=	30	;NTSC 0.5 second beep duration
000000r 2               BEEPFN	=	10	;NTSC 0.16 second beep separation
000000r 2               
000000r 2               WLEADP	=	960	;PAL 19.2 second WRITE file leader
000000r 2               RLEADP	=	480	;PAL 9.6 second READ file leader
000000r 2               WIRGLP	=	150	;PAL 3.0 second WRITE IRG
000000r 2               RIRGLP	=	100	;PAL 2.0 second READ IRG
000000r 2               WSIRGP	=	13	;PAL 0.25 second WRITE short IRG
000000r 2               RSIRGP	=	8	;PAL 0.16 second READ short IRG
000000r 2               BEEPNP	=	25	;PAL 0.5 second beep duration
000000r 2               BEEPFP	=	8	;PAL 0.16 second beep separation
000000r 2               
000000r 2               WIRGHI	=	0	;high WRITE IRG
000000r 2               RIRGHI	=	0	;high READ IRG
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Power-up Validation Byte Value Equates
000000r 2               
000000r 2               
000000r 2               PUPVL1	=	$5C	;power-up validation value 1
000000r 2               PUPVL2	=	$93	;power-up validation value 2
000000r 2               PUPVL3	=	$25	;power-up validation value 3
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Relocating Loader Miscellaneous Equates
000000r 2               
000000r 2               
000000r 2               DATAER	=	156	;end of record appears before END r:
000000r 2               MEMERR	=	157	;memory insufficient for load error
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Miscellaneous Equates
000000r 2               
000000r 2               
000000r 2               IOCFRE	=	$FF	;IOCB free indicator
000000r 2               
000000r 2               B19200	=	$0028	;19200 baud POKEY counter value
000000r 2               B00600	=	$05CC	;600 baud POKEY counter value
000000r 2               
000000r 2               HITONE	=	$05	;FSK high freq. POKEY counter value (5326 Hz)
000000r 2               LOTONE	=	$07	;FSK low freq. POKEY counter value (3995 Hz)
000000r 2               
000000r 2               NCOMLO	=	$34	;PIA lower NOT COMMAND line command
000000r 2               NCOMHI	=	$3C	;PIA raise NOT COMMAND line command
000000r 2               
000000r 2               MOTRGO	=	$34	;PIA cassette motor ON command
000000r 2               MOTRST	=	$3C	;PIA cassette motor OFF command
000000r 2               
000000r 2               NODAT	=	$00	;SIO immediate operation
000000r 2               GETDAT	=	$40	;SIO read data frame
000000r 2               PUTDAT	=	$80	;SIO write data frame
000000r 2               
000000r 2               CRETRI	=	13	;number of command frame retries
000000r 2               DRETRI	=	1	;number of device retries
000000r 2               CTIM	=	2	;command frame ACK timeout
000000r 2               
000000r 2               NBUFSZ	=	40	;print normal buffer size
000000r 2               DBUFSZ	=	20	;print double buffer size
000000r 2               SBUFSZ	=	29	;print sideways buffer size
000000r 2               ;	SUBTTL	'System Address Equates'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Zero Address Equates
000000r 2               
000000r 2               
000000r 2               LNFLG	=	$0000	;1-byte LNBUG flag (0 = not LNBUG)
000000r 2               NGFLAG	=	$0001	;1-byte memory status (0 = failure)
000000r 2               
000000r 2               ;	Not Cleared
000000r 2               
000000r 2               ;CASINI	=	$0002	;2-byte cassette program initialization address
000000r 2               ;RAMLO	=	$0004	;2-byte RAM address for memory test
000000r 2               ;TRAMSZ	=	$0006	;1-byte RAM size temporary
000000r 2               ;CMCMD	=	$0007	;1-byte command communications
000000r 2               
000000r 2               ;	Cleared upon Coldstart Only
000000r 2               
000000r 2               ;WARMST	=	$0008	;1-byte warmstart flag (0 = coldstart)
000000r 2               ;BOOT	=	$0009	;1-byte successful boot flags
000000r 2               DOSVEC	=	$000A	;2-byte disk program start vector
000000r 2               DOSINI	=	$000C	;2-byte disk program initialization address
000000r 2               ;APPMHI	=	$000E	;2-byte applications memory high limit
000000r 2               
000000r 2               ;	Cleared upon Coldstart or Warmstart
000000r 2               
000000r 2               ;INTZBS	=	$0010	;first page zero location to clear
000000r 2               
000000r 2               ;POKMSK	=	$0010	;1-byte IRQEN shadow
000000r 2               ;BRKKEY	=	$0011	;1-byte BREAK key flag (0 = no BREAK)
000000r 2               ;RTCLOK	=	$0012	;3-byte real time clock (16 millisecond units)
000000r 2               ;BUFADR	=	$0015	;2-byte disk interface buffer address
000000r 2               ICCOMT	=	$0017	;1-byte CIO command table index
000000r 2               ;DSKFMS	=	$0018	;2-byte DOS File Management System pointer
000000r 2               ;DSKUTL	=	$001A	;2-byte DOS utility pointer
000000r 2               ;ABUFPT	=	$001C	;4-byte ACMI buffer pointer area
000000r 2               
000000r 2               ZIOCB	=	$0020	;address of page zero IOCB
000000r 2               IOCBAS	=	$0020	;16-byte page zero IOCB
000000r 2               ICHIDZ	=	$0020	;1-byte handler ID ($FF = IOCB free)
000000r 2               ICDNOZ	=	$0021	;1-byte device number
000000r 2               ICCOMZ	=	$0022	;1-byte command code
000000r 2               ICSTAZ	=	$0023	;1-byte status of last action
000000r 2               ICBALZ	=	$0024	;1-byte low buffer address
000000r 2               ICBAHZ	=	$0025	;1-byte high buffer address
000000r 2               ICPTLZ	=	$0026	;1-byte low PUT-BYTE routine address-1
000000r 2               ICPTHZ	=	$0027	;1-byte high PUT-BYTE routine address-1
000000r 2               ICBLLZ	=	$0028	;1-byte low buffer length
000000r 2               ICBLHZ	=	$0029	;1-byte high buffer length
000000r 2               ICAX1Z	=	$002A	;1-byte first auxiliary information
000000r 2               ICAX2Z	=	$002B	;1-byte second auxiliary information
000000r 2               ICSPRZ	=	$002C	;4-byte spares
000000r 2               
000000r 2               ENTVEC	=	$002C	;2-byte (not used)
000000r 2               ICIDNO	=	$002E	;1-byte IOCB index (IOCB number times IOCBSZ)
000000r 2               CIOCHR	=	$002F	;1-byte character for current CIO operation
000000r 2               
000000r 2               STATUS	=	$0030	;1-byte SIO operation status
000000r 2               CHKSUM	=	$0031	;1-byte checksum (single byte sum with carry)
000000r 2               BUFRLO	=	$0032	;1-byte low data buffer address
000000r 2               BUFRHI	=	$0033	;1-byte high data buffer address
000000r 2               BFENLO	=	$0034	;1-byte low data buffer end address
000000r 2               BFENHI	=	$0035	;1-byte high data buffer end address
000000r 2               LTEMP	=	$0036	;2-byte relocating loader temporary
000000r 2               BUFRFL	=	$0038	;1-byte data buffer full flag (0 = not full)
000000r 2               RECVDN	=	$0039	;1-byte receive-frame done flag (0 = not done)
000000r 2               XMTDON	=	$003A	;1-byte transmit-frame done flag (0 = not done)
000000r 2               CHKSNT	=	$003B	;1-byte checksum sent flag (0 = not sent)
000000r 2               NOCKSM	=	$003C	;1-byte no checksum follows data flag (0 = does)
000000r 2               BPTR	=	$003D	;1-byte cassette buffer pointer
000000r 2               FTYPE	=	$003E	;1-byte cassette IRG type (neg. = continuous)
000000r 2               FEOF	=	$003F	;1-byte cassette EOF flag (0 = no EOF)
000000r 2               FREQ	=	$0040	;1-byte cassette beep counter
000000r 2               SOUNDR	=	$0041	;1-byte noisy I/O flag (0 = quiet)
000000r 2               
000000r 2               CRITIC	=	$0042	;1-byte critical section flag (0 = not critical)
000000r 2               
000000r 2               FMSZPG	=	$0043	;7-byte reserved for DOS File Management System
000000r 2               
000000r 2               ZCHAIN	=	$004A	;2-byte handler linkage chain point:
000000r 2               DSTAT	=	$004C	;1-byte display status
000000r 2               ATRACT	=	$004D	;1-byte attract-mode timer and flag
000000r 2               DRKMSK	=	$004E	;1-byte attract-mode dark (luminance) mask
000000r 2               COLRSH	=	$004F	;1-byte attract-mode color shift
000000r 2               TMPCHR	=	$0050	;1-byte	temporary character
000000r 2               HOLD1	=	$0051	;1-byte	temporary
000000r 2               LMARGN	=	$0052	;1-byte text column left margin
000000r 2               RMARGN	=	$0053	;1-byte text column right margin
000000r 2               ROWCRS	=	$0054	;1-byte cursor row
000000r 2               COLCRS	=	$0055	;2-byte cursor column
000000r 2               DINDEX	=	$0057	;1-byte display mode
000000r 2               SAVMSC	=	$0058	;2-byte saved memory scan counter
000000r 2               OLDROW	=	$005A	;1-byte prior row
000000r 2               OLDCOL	=	$005B	;2-byte prior column
000000r 2               OLDCHR	=	$005D	;1-byte saved character under cursor
000000r 2               OLDADR	=	$005E	;2-byte saved cursor memory address
000000r 2               FKDEF	=	$0060	;2-byte function key definition tab:
000000r 2               PALNTS	=	$0062	;1-byte PAL/NTSC indicator (0 = NTS:
000000r 2               LOGCOL	=	$0063	;1-byte logical line cursor column
000000r 2               ADRESS	=	$0064	;2-byte temporary address
000000r 2               
000000r 2               MLTTMP	=	$0066	;1-byte temporary
000000r 2               OPNTMP	=	$0066	;1-byte open temporary
000000r 2               TOADR	=	$0066	;2-byte destination address
000000r 2               
000000r 2               SAVADR	=	$0068	;2-byte saved address
000000r 2               FRMADR	=	$0068	;2-byte source address
000000r 2               
000000r 2               RAMTOP	=	$006A	;1-byte RAM size
000000r 2               BUFCNT	=	$006B	;1-byte buffer count (logical line size)
000000r 2               BUFSTR	=	$006C	;2-byte buffer start pointer
000000r 2               BITMSK	=	$006E	;1-byte bit mask for bit map operation
000000r 2               SHFAMT	=	$006F	;1-byte shift amount for pixel justification
000000r 2               ROWAC	=	$0070	;2-byte draw working row
000000r 2               COLAC	=	$0072	;2-byte draw working column
000000r 2               ENDPT	=	$0074	;2-byte end point
000000r 2               DELTAR	=	$0076	;1-byte row difference
000000r 2               DELTAC	=	$0077	;2-byte column difference
000000r 2               KEYDEF	=	$0079	;2-byte key definition table addres:
000000r 2               SWPFLG	=	$007B	;1-byte split screen swap flag (0 = not swapped)
000000r 2               HOLDCH	=	$007C	;1-byte temporary character
000000r 2               INSDAT	=	$007D	;1-byte temporary
000000r 2               COUNTR	=	$007E	;2-byte draw iteration count
000000r 2               
000000r 2               ;	Reserved for Application and Floating Point Package
000000r 2               
000000r 2               ;	=	$0080	;128 bytes reserved for application and FPP
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Page Zero Address Equates
000000r 2               
000000r 2               
000000r 2               FR0	=	$00D4	;6-byte register 0
000000r 2               FR0M	=	$00D5	;5-byte register 0 mantissa
000000r 2               QTEMP	=	$00D9	;1-byte temporary
000000r 2               
000000r 2               FRE	=	$00DA	;6-byte (internal) register E
000000r 2               
000000r 2               FR1	=	$00E0	;6-byte register 1
000000r 2               FR1M	=	$00E1	;5-byte register 1 mantissa
000000r 2               
000000r 2               FR2	=	$00E6	;6-byte (internal) register 2
000000r 2               
000000r 2               FRX	=	$00EC	;1-byte temporary
000000r 2               
000000r 2               EEXP	=	$00ED	;1-byte value of exponent
000000r 2               
000000r 2               FRSIGN	=	$00EE	;1-byte floating point sign
000000r 2               NSIGN	=	$00EE	;1-byte sign of number
000000r 2               
000000r 2               PLYCNT	=	$00EF	;1-byte polynomial degree
000000r 2               ESIGN	=	$00EF	;1-byte sign of exponent
000000r 2               
000000r 2               SGNFLG	=	$00F0	;1-byte sign flag
000000r 2               FCHFLG	=	$00F0	;1-byte first character flag
000000r 2               
000000r 2               XFMFLG	=	$00F1	;1-byte transform flag
000000r 2               DIGRT	=	$00F1	;1-byte number of digits after decimal point
000000r 2               
000000r 2               CIX	=	$00F2	;1-byte current input index
000000r 2               INBUFF	=	$00F3	;2-byte line input buffer
000000r 2               
000000r 2               ZTEMP1	=	$00F5	;2-byte temporary
000000r 2               ZTEMP4	=	$00F7	;2-byte temporary
000000r 2               ZTEMP3	=	$00F9	;2-byte temporary
000000r 2               
000000r 2               FLPTR	=	$00FC	;2-byte floating point number pointer
000000r 2               FPTR2	=	$00FE	;2-byte floating point number pointer
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page One (Stack) Address Equates
000000r 2               
000000r 2               
000000r 2               ;	=	$0100	;256-byte stack
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Two Address Equates
000000r 2               
000000r 2               
000000r 2               INTABS	=	$0200	;42-byte interrupt handler table
000000r 2               
000000r 2               VDSLST	=	$0200	;2-byte display list NMI vector
000000r 2               VPRCED	=	$0202	;2-byte serial I/O proceed line IRQ vector
000000r 2               VINTER	=	$0204	;2-byte serial I/O interrupt line IRQ vector
000000r 2               VBREAK	=	$0206	;2-byte BRK instruction IRQ vector
000000r 2               VKEYBD	=	$0208	;2-byte keyboard IRQ vector
000000r 2               VSERIN	=	$020A	;2-byte serial input ready IRQ vector
000000r 2               VSEROR	=	$020C	;2-byte serial output ready IRQ vector
000000r 2               VSEROC	=	$020E	;2-byte serial output complete IRQ vector
000000r 2               VTIMR1	=	$0210	;2-byte POKEY timer 1 IRQ vector
000000r 2               VTIMR2	=	$0212	;2-byte POKEY timer 2 IRQ vector
000000r 2               VTIMR4	=	$0214	;2-byte POKEY timer 4 IRQ vector
000000r 2               VIMIRQ	=	$0216	;2-byte immediate IRQ vector
000000r 2               CDTMV1	=	$0218	;2-byte countdown timer 1 value
000000r 2               CDTMV2	=	$021A	;2-byte countdown timer 2 value
000000r 2               CDTMV3	=	$021C	;2-byte countdown timer 3 value
000000r 2               CDTMV4	=	$021E	;2-byte countdown timer 4 value
000000r 2               CDTMV5	=	$0220	;2-byte countdown timer 5 value
000000r 2               VVBLKI	=	$0222	;2-byte immediate VBLANK NMI vector
000000r 2               VVBLKD	=	$0224	;2-byte deferred VBLANK NMI vector
000000r 2               CDTMA1	=	$0226	;2-byte countdown timer 1 vector
000000r 2               CDTMA2	=	$0228	;2-byte countdown timer 2 vector
000000r 2               
000000r 2               CDTMF3	=	$022A	;1-byte countdown timer 3 flag (0 = expired)
000000r 2               SRTIMR	=	$022B	;1-byte software key repeat timer
000000r 2               CDTMF4	=	$022C	;1-byte countdown timer 4 flag (0 = expired)
000000r 2               INTEMP	=	$022D	;1-byte temporary
000000r 2               CDTMF5	=	$022E	;1-byte countdown timer 5 flag (0 = expired)
000000r 2               SDMCTL	=	$022F	;1-byte DMACTL shadow
000000r 2               SDLSTL	=	$0230	;1-byte DLISTL shadow
000000r 2               SDLSTH	=	$0231	;1-byte DLISTH shadow
000000r 2               SSKCTL	=	$0232	;1-byte SKCTL shadow
000000r 2               LCOUNT	=	$0233	;1-byte relocating loader record le:
000000r 2               LPENH	=	$0234	;1-byte light pen horizontal value
000000r 2               LPENV	=	$0235	;1-byte light pen vertical value
000000r 2               BRKKY	=	$0236	;2-byte BREAK key vector
000000r 2               VPIRQ	=	$0238	;2-byte parallel device IRQ vector
000000r 2               CDEVIC	=	$023A	;1-byte command frame device ID
000000r 2               CCOMND	=	$023B	;1-byte command frame command
000000r 2               CAUX1	=	$023C	;1-byte command auxiliary 1
000000r 2               CAUX2	=	$023D	;1-byte command auxiliary 2
000000r 2               
000000r 2               TEMP	=	$023E	;1-byte temporary
000000r 2               
000000r 2               ;	ASSERT	low TEMP<>$FF	;may not be the last word on a page
000000r 2               
000000r 2               ERRFLG	=	$023F	;1-byte I/O error flag (0 = no error)
000000r 2               
000000r 2               ;	ASSERT	low ERRFLG<>$FF ;may not be the last word on a page
000000r 2               
000000r 2               DFLAGS	=	$0240	;1-byte disk flags from sector 1
000000r 2               DBSECT	=	$0241	;1-byte disk boot sector count
000000r 2               BOOTAD	=	$0242	;2-byte disk boot memory address
000000r 2               COLDST	=	$0244	;1-byte coldstart flag (0 = complete)
000000r 2               RECLEN	=	$0245	;1-byte relocating loader record le:
000000r 2               DSKTIM	=	$0246	;1-byte disk format timeout
000000r 2               PDVMSK	=	$0247	;1-byte parallel device selection mask
000000r 2               SHPDVS	=	$0248	;1-byte PDVS (parallel device selec:
000000r 2               PDIMSK	=	$0249	;1-byte parallel device IRQ selection mask
000000r 2               RELADR	=	$024A	;2-byte relocating loader relative :
000000r 2               PPTMPA	=	$024C	;1-byte parallel device handler tem:
000000r 2               PPTMPX	=	$024D	;1-byte parallel device handler tem:
000000r 2               
000000r 2               ;	=	$024E	;6 bytes reserved for Atari
000000r 2               
000000r 2               ;	=	$0254	;23 bytes reserved for Atari
000000r 2               
000000r 2               CHSALT	=	$026B	;1-byte character set alternate
000000r 2               VSFLAG	=	$026C	;1-byte fine vertical scroll count
000000r 2               KEYDIS	=	$026D	;1-byte keyboard disable
000000r 2               FINE	=	$026E	;1-byte fine scrolling mode
000000r 2               GPRIOR	=	$026F	;1-byte PRIOR shadow
000000r 2               
000000r 2               PADDL0	=	$0270	;1-byte potentiometer 0
000000r 2               PADDL1	=	$0271	;1-byte potentiometer 1
000000r 2               PADDL2	=	$0272	;1-byte potentiometer 2
000000r 2               PADDL3	=	$0273	;1-byte potentiometer 3
000000r 2               PADDL4	=	$0274	;1-byte potentiometer 4
000000r 2               PADDL5	=	$0275	;1-byte potentiometer 5
000000r 2               PADDL6	=	$0276	;1-byte potentiometer 6
000000r 2               PADDL7	=	$0277	;1-byte potentiometer 7
000000r 2               
000000r 2               STICK0	=	$0278	;1-byte joystick 0
000000r 2               STICK1	=	$0279	;1-byte joystick 1
000000r 2               STICK2	=	$027A	;1-byte joystick 2
000000r 2               STICK3	=	$027B	;1-byte joystick 3
000000r 2               
000000r 2               PTRIG0	=	$027C	;1-byte paddle trigger 0
000000r 2               PTRIG1	=	$027D	;1-byte paddle trigger 1
000000r 2               PTRIG2	=	$027E	;1-byte paddle trigger 2
000000r 2               PTRIG3	=	$027F	;1-byte paddle trigger 3
000000r 2               PTRIG4	=	$0280	;1-byte paddle trigger 4
000000r 2               PTRIG5	=	$0281	;1-byte paddle trigger 5
000000r 2               PTRIG6	=	$0282	;1-byte paddle trigger 6
000000r 2               PTRIG7	=	$0283	;1-byte paddle trigger 7
000000r 2               
000000r 2               STRIG0	=	$0284	;1-byte joystick trigger 0
000000r 2               STRIG1	=	$0285	;1-byte joystick trigger 1
000000r 2               STRIG2	=	$0286	;1-byte joystick trigger 2
000000r 2               STRIG3	=	$0287	;1-byte joystick trigger 3
000000r 2               
000000r 2               HIBYTE	=	$0288	;1-byte relocating loader high byte:
000000r 2               WMODE	=	$0289	;1-byte cassette WRITE mode ($80 = writing)
000000r 2               BLIM	=	$028A	;1-byte cassette buffer limit
000000r 2               IMASK	=	$028B	;1-byte (not used)
000000r 2               JVECK	=	$028C	;2-byte jump vector or temporary
000000r 2               NEWADR	=	$028E	;2-byte relocating address
000000r 2               TXTROW	=	$0290	;1-byte split screen text cursor row
000000r 2               TXTCOL	=	$0291	;2-byte split screen text cursor column
000000r 2               TINDEX	=	$0293	;1-byte split scree text mode
000000r 2               TXTMSC	=	$0294	;2-byte split screen memory scan counter
000000r 2               TXTOLD	=	$0296	;6-byte OLDROW, OLDCOL, OLDCHR, OLDADR for text
000000r 2               CRETRY	=	$029C	;1-byte number of command frame ret:
000000r 2               HOLD3	=	$029D	;1-byte temporary
000000r 2               SUBTMP	=	$029E	;1-byte temporary
000000r 2               HOLD2	=	$029F	;1-byte (not used)
000000r 2               DMASK	=	$02A0	;1-byte display (pixel location) mask
000000r 2               TMPLBT	=	$02A1	;1-byte (not used)
000000r 2               ESCFLG	=	$02A2	;1-byte escape flag ($80 = ESC detected)
000000r 2               TABMAP	=	$02A3	;15-byte (120-bit) tab stop bit map
000000r 2               LOGMAP	=	$02B2	;8-byte (32-bit) logical line bit map
000000r 2               INVFLG	=	$02B6	;1-byte inverse video flag ($80 = inverse)
000000r 2               FILFLG	=	$02B7	;1-byte right fill flag (0 = no fill)
000000r 2               TMPROW	=	$02B8	;1-byte temporary row
000000r 2               TMPCOL	=	$02B9	;2-byte temporary column
000000r 2               SCRFLG	=	$02BB	;1-byte scroll occurence flag (0 = not occurred)
000000r 2               HOLD4	=	$02BC	;1-byte temporary
000000r 2               DRETRY	=	$02BD	;1-byte number of device retries
000000r 2               SHFLOK	=	$02BE	;1-byte shift/control lock flags
000000r 2               BOTSCR	=	$02BF	;1-byte screen bottom (24 = normal, 4 = split)
000000r 2               
000000r 2               PCOLR0	=	$02C0	;1-byte player-missle 0 color/luminance
000000r 2               PCOLR1	=	$02C1	;1-byte player-missle 1 color/luminance
000000r 2               PCOLR2	=	$02C2	;1-byte player-missle 2 color/luminance
000000r 2               PCOLR3	=	$02C3	;1-byte player-missle 3 color/luminance
000000r 2               
000000r 2               COLOR0	=	$02C4	;1-byte playfield 0 color/luminance
000000r 2               COLOR1	=	$02C5	;1-byte playfield 1 color/luminance
000000r 2               COLOR2	=	$02C6	;1-byte playfield 2 color/luminance
000000r 2               COLOR3	=	$02C7	;1-byte playfield 3 color/luminance
000000r 2               
000000r 2               COLOR4	=	$02C8	;1-byte background color/luminance
000000r 2               
000000r 2               PARMBL	=	$02C9	;6-byte relocating loader parameter:
000000r 2               RUNADR	=	$02C9	;2-byte run address
000000r 2               HIUSED	=	$02CB	;2-byte highest non-zero page addre:
000000r 2               ZHIUSE	=	$02CD	;2-byte highest zero page address
000000r 2               
000000r 2               OLDPAR	=	$02CF	;6-byte relocating loader parameter:
000000r 2               GBYTEA	=	$02CF	;2-byte GET-BYTE routine address
000000r 2               LOADAD	=	$02D1	;2-byte non-zero page load address
000000r 2               ZLOADA	=	$02D3	;2-byte zero page load address
000000r 2               
000000r 2               DSCTLN	=	$02D5	;2-byte disk sector length
000000r 2               ACMISR	=	$02D7	;2-byte ACMI interrupt service rout:
000000r 2               KRPDEL	=	$02D9	;1-byte auto-repeat delay
000000r 2               KEYREP	=	$02DA	;1-byte auto-repeat rate
000000r 2               NOCLIK	=	$02DB	;1-byte key click disable
000000r 2               HELPFG	=	$02DC	;1-byte HELP key flag (0 = no HELP)
000000r 2               DMASAV	=	$02DD	;1-byte SDMCTL save/restore
000000r 2               PBPNT	=	$02DE	;1-byte printer buffer pointer
000000r 2               PBUFSZ	=	$02DF	;1-byte printer buffer size
000000r 2               
000000r 2               ;	=	$02E0	;4 bytes reserved for DOS
000000r 2               
000000r 2               RAMSIZ	=	$02E4	;1-byte high RAM size
000000r 2               MEMTOP	=	$02E5	;2-byte top of available user memory
000000r 2               MEMLO	=	$02E7	;2-byte bottom of available user memory
000000r 2               HNDLOD	=	$02E9	;1-byte user load flag (0 = no hand:
000000r 2               DVSTAT	=	$02EA	;4-byte device status buffer
000000r 2               CBAUDL	=	$02EE	;1-byte low cassette baud rate
000000r 2               CBAUDH	=	$02EF	;1-byte high cassette baud rate
000000r 2               CRSINH	=	$02F0	;1-byte cursor inhibit (0 = cursor on)
000000r 2               KEYDEL	=	$02F1	;1-byte key debounce delay timer
000000r 2               CH1	=	$02F2	;1-byte prior keyboard character
000000r 2               CHACT	=	$02F3	;1-byte CHACTL shadow
000000r 2               CHBAS	=	$02F4	;1-byte CHBASE shadow
000000r 2               
000000r 2               NEWROW	=	$02F5	;1-byte draw destination row
000000r 2               NEWCOL	=	$02F6	;2-byte draw destination column
000000r 2               ROWINC	=	$02F8	;1-byte draw row increment
000000r 2               COLINC	=	$02F9	;1-byte	draw column increment
000000r 2               
000000r 2               CHAR	=	$02FA	;1-byte internal character
000000r 2               ATACHR	=	$02FB	;1-byte ATASCII character or plot point
000000r 2               CH	=	$02FC	;1-byte keyboard code (buffer)
000000r 2               FILDAT	=	$02FD	;1-byte right fill data
000000r 2               DSPFLG	=	$02FE	;1-byte control character display flag (0 = no)
000000r 2               SSFLAG	=	$02FF	;1-byte start/stop flag (0 = not stopped)
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Three Address Equates
000000r 2               
000000r 2               
000000r 2               DCB	=	$0300	;12-byte device control block
000000r 2               DDEVIC	=	$0300	;1-byte unit 1 bus ID
000000r 2               DUNIT	=	$0301	;1-byte unit number
000000r 2               DCOMND	=	$0302	;1-byte bus command
000000r 2               DSTATS	=	$0303	;1-byte command type/status return
000000r 2               DBUFLO	=	$0304	;1-byte low data buffer address
000000r 2               DBUFHI	=	$0305	;1-byte high data buffer address
000000r 2               DTIMLO	=	$0306	;1-byte timeout (seconds)
000000r 2               DUNUSE	=	$0307	;1-byte (not used)
000000r 2               DBYTLO	=	$0308	;1-byte low number of bytes to transfer
000000r 2               DBYTHI	=	$0309	;1-byte high number of bytes to transfer
000000r 2               DAUX1	=	$030A	;1-byte first command auxiliary
000000r 2               DAUX2	=	$030B	;1-byte second command auxiliary
000000r 2               
000000r 2               TIMER1	=	$030C	;2-byte initial baud rate timer value
000000r 2               JMPERS	=	$030E	;1-byte jumper options
000000r 2               CASFLG	=	$030F	;1-byte cassette I/O flag (0 = not cassette I/O)
000000r 2               TIMER2	=	$0310	;2-byte final baud rate timer value
000000r 2               TEMP1	=	$0312	;2-byte temporary
000000r 2               TEMP2	=	$0313	;1-byte temporary
000000r 2               PTIMOT	=	$0314	;1-byte printer timeout
000000r 2               TEMP3	=	$0315	;1-byte temporary
000000r 2               SAVIO	=	$0316	;1-byte saved serial data input indicator
000000r 2               TIMFLG	=	$0317	;1-byte timeout flag (0 = timeout)
000000r 2               STACKP	=	$0318	;1-byte SIO saved stack pointer
000000r 2               TSTAT	=	$0319	;1-byte temporary status
000000r 2               
000000r 2               HATABS	=	$031A	;35-byte handler address table
000000r 2               
000000r 2               PUPBT1	=	$033D	;1-byte power-up validation byte 1
000000r 2               PUPBT2	=	$033E	;1-byte power-up validation byte 2
000000r 2               PUPBT3	=	$033F	;1-byte power-up validation byte 3
000000r 2               
000000r 2               IOCB	=	$0340	;128-byte I/O control blocks area
000000r 2               ICHID	=	$0340	;1-byte handler ID ($FF = free)
000000r 2               ICDNO	=	$0341	;1-byte device number
000000r 2               ICCOM	=	$0342	;1-byte command code
000000r 2               ICSTA	=	$0343	;1-byte status of last action
000000r 2               ICBAL	=	$0344	;1-byte low buffer address
000000r 2               ICBAH	=	$0345	;1-byte high buffer address
000000r 2               ICPTL	=	$0346	;1-byte low PUT-BYTE routine address-1
000000r 2               ICPTH	=	$0347	;1-byte high PUT-BYTE routine address-1
000000r 2               ICBLL	=	$0348	;1-byte low buffer length
000000r 2               ICBLH	=	$0349	;1-byte high buffer length
000000r 2               ICAX1	=	$034A	;1-byte first auxiliary information
000000r 2               ICAX2	=	$034B	;1-byte second auxiliary information
000000r 2               ICSPR	=	$034C	;4-byte work area
000000r 2               
000000r 2               PRNBUF	=	$03C0	;40-byte printer buffer
000000r 2               SUPERF	=	$03E8	;1-byte editor super function flag :
000000r 2               CKEY	=	$03E9	;1-byte cassette boot r=est flag :
000000r 2               CASSBT	=	$03EA	;1-byte cassette boot flag (0 = not:
000000r 2               CARTCK	=	$03EB	;1-byte cartridge =ivalence checksum
000000r 2               DERRF	=	$03EC	;1-byte screen OPEN error flag (0 = not)
000000r 2               
000000r 2               ;	Remainder of Page Three Not Cleared upon Reset
000000r 2               
000000r 2               ACMVAR	=	$03ED	;11 bytes reserved for ACMI
000000r 2               BASICF	=	$03F8	;1-byte BASIC switch flag (0 = BASIC enabled)
000000r 2               MINTLK	=	$03F9	;1-byte ACMI module interlock
000000r 2               GINTLK	=	$03FA	;1-byte cartridge interlock
000000r 2               CHLINK	=	$03FB	;2-byte loaded handler chain link
000000r 2               CASBUF	=	$03FD	;3-byte first 3 bytes of cassette buffer
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Four Address Equates
000000r 2               
000000r 2               
000000r 2               ;	=	$0400	;128-byte remainder of cassette buffer
000000r 2               
000000r 2               ;	Reserved for Application
000000r 2               
000000r 2               	.IF PLATFORM<>1
000000r 2               
000000r 2               USAREA	=	$0480	;128 bytes reserved for application
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Five Address Equates
000000r 2               
000000r 2               
000000r 2               ;	Reserved for Application and Floating Point Package
000000r 2               
000000r 2               ;	=	$0500	;256 bytes reserved for application and FPP
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Address Equates
000000r 2               
000000r 2               
000000r 2               LBPR1	=	$057E	;1-byte LBUFF preamble
000000r 2               LBPR2	=	$057F	;1-byte LBUFF preamble
000000r 2               LBUFF	=	$0580	;128-byte line buffer
000000r 2               
000000r 2               PLYARG	=	$05E0	;6-byte floating point polynomial argument
000000r 2               FPSCR	=	$05E6	;6-byte floating point temporary
000000r 2               FPSCR1	=	$05EC	;6-byte floating point temporary
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Six Address Equates
000000r 2               
000000r 2               
000000r 2               ;	Reserved for Application
000000r 2               
000000r 2               ;	=	$0600	;256 bytes reserved for application
000000r 2               ;	SPACE	4,10
000000r 2               ;**	LNBUG Address Equates
000000r 2               
000000r 2               
000000r 2               ;	IF	LNBUG
000000r 2               ;LNORG	=	$6000	;LNBUG origin
000000r 2               ;LNIRQ	=	$6033	;LNBUG IRQ entry
000000r 2               ;LNNMI	=	$8351	;LNBUG NMI vector
000000r 2               ;	ENDIF	;LNBUG
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Cartridge Address Equates
000000r 2               
000000r 2               
000000r 2               CARTCS	=	$BFFA	;2-byte cartridge coldstart address
000000r 2               CART	=	$BFFC	;1-byte cartridge present indicator
000000r 2               CARTFG	=	$BFFD	;1-byte cartridge flags
000000r 2               CARTAD	=	$BFFE	;2-byte cartridge start vector
000000r 2               ;	SPACE	4,10
000000r 2               ;**	CTIA/GTIA Address Equates
000000r 2               
000000r 2               
000000r 2               CTIA	=	$D000	;CTIA/GTIA area
000000r 2               
000000r 2               ;	Read/Write Addresses
000000r 2               
000000r 2               CONSOL	=	$D01F	;console switches and speaker control
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               M0PF	=	$D000	;missle 0 and playfield collision
000000r 2               M1PF	=	$D001	;missle 1 and playfield collision
000000r 2               M2PF	=	$D002	;missle 2 and playfield collision
000000r 2               M3PF	=	$D003	;missle 3 and playfield collision
000000r 2               
000000r 2               P0PF	=	$D004	;player 0 and playfield collision
000000r 2               P1PF	=	$D005	;player 1 and playfield collision
000000r 2               P2PF	=	$D006	;player 2 and playfield collision
000000r 2               P3PF	=	$D007	;player 3 and playfield collision
000000r 2               
000000r 2               M0PL	=	$D008	;missle 0 and player collision
000000r 2               M1PL	=	$D009	;missle 1 and player collision
000000r 2               M2PL	=	$D00A	;missle 2 and player collision
000000r 2               M3PL	=	$D00B	;missle 3 and player collision
000000r 2               
000000r 2               P0PL	=	$D00C	;player 0 and player collision
000000r 2               P1PL	=	$D00D	;player 1 and player collision
000000r 2               P2PL	=	$D00E	;player 2 and player collision
000000r 2               P3PL	=	$D00F	;player 3 and player collision
000000r 2               
000000r 2               TRIG0	=	$D010	;joystick trigger 0
000000r 2               TRIG1	=	$D011	;joystick trigger 1
000000r 2               
000000r 2               TRIG2	=	$D012	;cartridge interlock
000000r 2               TRIG3	=	$D013	;ACMI module interlock
000000r 2               
000000r 2               PAL	=	$D014	;PAL/NTSC indicator
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               HPOSP0	=	$D000	;player 0 horizontal position
000000r 2               HPOSP1	=	$D001	;player 1 horizontal position
000000r 2               HPOSP2	=	$D002	;player 2 horizontal position
000000r 2               HPOSP3	=	$D003	;player 3 horizontal position
000000r 2               
000000r 2               HPOSM0	=	$D004	;missle 0 horizontal position
000000r 2               HPOSM1	=	$D005	;missle 1 horizontal position
000000r 2               HPOSM2	=	$D006	;missle 2 horizontal position
000000r 2               HPOSM3	=	$D007	;missle 3 horizontal position
000000r 2               
000000r 2               SIZEP0	=	$D008	;player 0 size
000000r 2               SIZEP1	=	$D009	;player 1 size
000000r 2               SIZEP2	=	$D00A	;player 2 size
000000r 2               SIZEP3	=	$D00B	;player 3 size
000000r 2               
000000r 2               SIZEM	=	$D00C	;missle sizes
000000r 2               
000000r 2               GRAFP0	=	$D00D	;player 0 graphics
000000r 2               GRAFP1	=	$D00E	;player 1 graphics
000000r 2               GRAFP2	=	$D00F	;player 2 graphics
000000r 2               GRAFP3	=	$D010	;player 3 graphics
000000r 2               
000000r 2               GRAFM	=	$D011	;missle graphics
000000r 2               
000000r 2               COLPM0	=	$D012	;player-missle 0 color/luminance
000000r 2               COLPM1	=	$D013	;player-missle 1 color/luminance
000000r 2               COLPM2	=	$D014	;player-missle 2 color/luminance
000000r 2               COLPM3	=	$D015	;player-missle 3 color/luminance
000000r 2               
000000r 2               COLPF0	=	$D016	;playfield 0 color/luminance
000000r 2               COLPF1	=	$D017	;playfield 1 color/luminance
000000r 2               COLPF2	=	$D018	;playfield 2 color/luminance
000000r 2               COLPF3	=	$D019	;playfield 3 color/luminance
000000r 2               
000000r 2               COLBK	=	$D01A	;background color/luminance
000000r 2               
000000r 2               PRIOR	=	$D01B	;priority select
000000r 2               VDELAY	=	$D01C	;vertical delay
000000r 2               GRACTL	=	$D01D	;graphic control
000000r 2               HITCLR	=	$D01E	;collision clear
000000r 2               ;	SPACE	4,10
000000r 2               ;**	PBI Address Equates
000000r 2               
000000r 2               
000000r 2               PBI	=	$D100	;parallel bus interface area
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               PDVI	=	$D1FF	;parallel device IRQ status
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               PDVS	=	$D1FF	;parallel device select
000000r 2               ;	SPACE	4,10
000000r 2               ;**	POKEY Address Equates
000000r 2               
000000r 2               
000000r 2               POKEY	=	$D200	;POKEY area
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               POT0	=	$D200	;potentiometer 0
000000r 2               POT1	=	$D201	;potentiometer 1
000000r 2               POT2	=	$D202	;potentiometer 2
000000r 2               POT3	=	$D203	;potentiometer 3
000000r 2               POT4	=	$D204	;potentiometer 4
000000r 2               POT5	=	$D205	;potentiometer 5
000000r 2               POT6	=	$D206	;potentiometer 6
000000r 2               POT7	=	$D207	;potentiometer 7
000000r 2               
000000r 2               ALLPOT	=	$D208	;potentiometer port state
000000r 2               KBCODE	=	$D209	;keyboard code
000000r 2               RANDOM	=	$D20A	;random number generator
000000r 2               SERIN	=	$D20D	;serial port input
000000r 2               IRQST	=	$D20E	;IRQ interrupt status
000000r 2               SKSTAT	=	$D20F	;serial port and keyboard status
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               AUDF1	=	$D200	;channel 1 audio fr=ency
000000r 2               AUDC1	=	$D201	;channel 1 audio control
000000r 2               
000000r 2               AUDF2	=	$D202	;channel 2 audio fr=ency
000000r 2               AUDC2	=	$D203	;channel 2 audio control
000000r 2               
000000r 2               AUDF3	=	$D204	;channel 3 audio fr=ency
000000r 2               AUDC3	=	$D205	;channel 3 audio control
000000r 2               
000000r 2               AUDF4	=	$D206	;channel 4 audio fr=ency
000000r 2               AUDC4	=	$D207	;channel 4 audio control
000000r 2               
000000r 2               AUDCTL	=	$D208	;audio control
000000r 2               STIMER	=	$D209	;start timers
000000r 2               SKRES	=	$D20A	;reset SKSTAT status
000000r 2               POTGO	=	$D20B	;start potentiometer scan s=ence
000000r 2               SEROUT	=	$D20D	;serial port output
000000r 2               IRQEN	=	$D20E	;IRQ interrupt enable
000000r 2               SKCTL	=	$D20F	;serial port and keyboard control
000000r 2               ;	SPACE	4,10
000000r 2               ;**	PIA Address Equates
000000r 2               
000000r 2               
000000r 2               PIA	=	$D300	;PIA area
000000r 2               
000000r 2               ;	Read/Write Addresses
000000r 2               
000000r 2               PORTA	=	$D300	;port A direction register or jacks 0 and 1
000000r 2               PORTB	=	$D301	;port B direction register or memory control
000000r 2               
000000r 2               PACTL	=	$D302	;port A control
000000r 2               PBCTL	=	$D303	;port B control
000000r 2               ;	SPACE	4,10
000000r 2               ;**	ANTIC Address Equates
000000r 2               
000000r 2               
000000r 2               ANTIC	=	$D400	;ANTIC area
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               VCOUNT	=	$D40B	;vertical line counter
000000r 2               PENH	=	$D40C	;light pen horizontal position
000000r 2               PENV	=	$D40D	;light pen vertical position
000000r 2               NMIST	=	$D40F	;NMI interrupt status
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               DMACTL	=	$D400	;DMA control
000000r 2               CHACTL	=	$D401	;character control
000000r 2               DLISTL	=	$D402	;low display list address
000000r 2               DLISTH	=	$D403	;high disply list address
000000r 2               HSCROL	=	$D404	;horizontal scroll
000000r 2               VSCROL	=	$D405	;vertical scroll
000000r 2               PMBASE	=	$D407	;player-missle base address
000000r 2               CHBASE	=	$D409	;character base address
000000r 2               WSYNC	=	$D40A	;wait for HBLANK synchronization
000000r 2               NMIEN	=	$D40E	;NMI enable
000000r 2               NMIRES	=	$D40F	;NMI interrupt status reset
000000r 2               ;	SPACE	4,10
000000r 2               ;**	PBI RAM Address Equates
000000r 2               
000000r 2               
000000r 2               PBIRAM	=	$D600	;parallel bus interface RAM area
000000r 2               ;	SPACE	4,10
000000r 2               ;**	ACMI Address Equates
000000r 2               
000000r 2               
000000r 2               ;	IF	ACMI
000000r 2               ;	ENDIF	;ACMI
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Address Equates
000000r 2               
000000r 2               
000000r 2               AFP	=	$D800	;convert ASCII to floating point
000000r 2               FASC	=	$D8E6	;convert floating point to ASCII
000000r 2               IFP	=	$D9AA	;convert integer to floating point
000000r 2               FPI	=	$D9D2	;convert floating point to integer
000000r 2               ZFR0	=	$DA44	;zero FR0
000000r 2               ZF1	=	$DA46	;zero floating point number
000000r 2               FSUB	=	$DA60	;subtract floating point numbers
000000r 2               FADD	=	$DA66	;add floating point numbers
000000r 2               FMUL	=	$DADB	;multiply floating point numbers
000000r 2               FDIV	=	$DB28	;divide floating point numbers
000000r 2               PLYEVL	=	$DD40	;evaluate floating point polynomial
000000r 2               FLD0R	=	$DD89	;load floating point number
000000r 2               FLD0P	=	$DD8D	;load floating point number
000000r 2               FLD1R	=	$DD98	;load floating point number
000000r 2               FLD1P	=	$DD9C	;load floating point number
000000r 2               FST0R	=	$DDA7	;store floating point number
000000r 2               FST0P	=	$DDAB	;store floating point number
000000r 2               FMOVE	=	$DDB6	;move floating point number
000000r 2               LOG	=	$DECD	;calculate floating point logarithm
000000r 2               LOG10	=	$DED1	;calculate floating point base 10 logarithm
000000r 2               EXP	=	$DDC0	;calculate floating point exponentiation
000000r 2               EXP10	=	$DDCC	;calculate floating point base 10 exponentiation
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Parallel Device Address Equates
000000r 2               
000000r 2               
000000r 2               PDID1	=	$D803	;parallel device ID 1
000000r 2               PDIOV	=	$D805	;parallel device I/O vector
000000r 2               PDIRQV	=	$D808	;parallel device IRQ vector
000000r 2               PDID2	=	$D80B	;parallel device ID 2
000000r 2               PDVV	=	$D80D	;parallel device vector table
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Device Handler Vector Table Address Equates
000000r 2               
000000r 2               
000000r 2               EDITRV	=	$E400	;editor handler vector table
000000r 2               SCRENV	=	$E410	;screen handler vector table
000000r 2               KEYBDV	=	$E420	;keyboard handler vector table
000000r 2               PRINTV	=	$E430	;printer handler vector table
000000r 2               CASETV	=	$E440	;cassette handler vector table
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Jump Vector Address Equates
000000r 2               
000000r 2               
000000r 2               DINITV	=	$E450	;vector to initialize DIO
000000r 2               DSKINV	=	$E453	;vector to DIO
000000r 2               CIOV	=	$E456	;vector to CIO
000000r 2               SIOV	=	$E459	;vector to SIO
000000r 2               SETVBV	=	$E45C	;vector to set VBLANK parameters
000000r 2               SYSVBV	=	$E45F	;vector to process immediate VBLANK NMI
000000r 2               XITVBV	=	$E462	;vector to process deferred VBLANK NMI
000000r 2               SIOINV	=	$E465	;vector to initialize SIO
000000r 2               SENDEV	=	$E468	;vector to enable SEND
000000r 2               INTINV	=	$E46B	;vector to initialize interrupt handler
000000r 2               CIOINV	=	$E46E	;vector to initialize CIO
000000r 2               BLKBDV	=	$E471	;vector to power-up display (formerly memo pad)
000000r 2               WARMSV	=	$E474	;vector to warmstart
000000r 2               COLDSV	=	$E477	;vector to coldstart
000000r 2               RBLOKV	=	$E47A	;vector to read cassette block
000000r 2               CSOPIV	=	$E47D	;vector to open cassette for input
000000r 2               PUPDIV	=	$E480	;vector to power-up display
000000r 2               SLFTSV	=	$E483	;vector to self-test
000000r 2               PHENTV	=	$E486	;vector to enter peripheral handler
000000r 2               PHUNLV	=	$E489	;vector to unlink peripheral handler
000000r 2               PHINIV	=	$E48C	;vector to initialize peripheral handler
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Generic Parallel Device Handler Vector Table Address Equates
000000r 2               
000000r 2               
000000r 2               GPDVV	=	$E48F	;generic parallel device handler vector table
000000r 2               ;	SUBTTL	'Miscellaneous Address Equates'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Self-test Page Zero Address Equates
000000r 2               
000000r 2               
000000r 2               STTIME	=	$0080	;2-byte main screen timeout timer
000000r 2               STAUT	=	$0082	;1-byte auto-mode flag
000000r 2               STJMP	=	$0083	;3-byte ANTIC jump instruction
000000r 2               STSEL	=	$0086	;1-byte selection
000000r 2               STPASS	=	$0087	;1-byte pass
000000r 2               STSPP	=	$0088	;1-byte SELECT previously pressed flag
000000r 2               ;	=	$0089	;1-byte (not used)
000000r 2               STKST	=	$008A	;1-byte keyboard self-test flag (0 = not)
000000r 2               STCHK	=	$008B	;2-byte checksum
000000r 2               STSMM	=	$008D	;1-byte screen memory mask
000000r 2               STSMP	=	$008E	;1-byte screen memory pointer
000000r 2               ST1K	=	$008F	;1-byte current 1K of memory to test
000000r 2               STPAG	=	$0090	;2-byte current page to test
000000r 2               STPC	=	$0092	;1-byte page count
000000r 2               STMVAL	=	$0093	;1-byte correct value for memory test
000000r 2               STSKP	=	$0094	;1-byte simulated keypress index
000000r 2               STTMP1	=	$0095	;2-byte temporary
000000r 2               STVOC	=	$0097	;1-byte current voice indicator
000000r 2               STNOT	=	$0098	;1-byte current note counter
000000r 2               STCDI	=	$0099	;1-byte cleft display pointer
000000r 2               STCDA	=	$009A	;1-byte cleft data pointer
000000r 2               STTMP2	=	$009B	;2-byte temporary
000000r 2               STTMP3	=	$009D	;1-byte temporary
000000r 2               STADR1	=	$009E	;2-byte temporary address
000000r 2               STADR2	=	$00A0	;2-byte temporary address
000000r 2               STBL	=	$00A2	;1-byte blink counter
000000r 2               STTMP4	=	$00A3	;1-byte temporary
000000r 2               STLM	=	$00A4	;1-byte LED mask
000000r 2               STTMP5	=	$00A5	;1-byte temporary
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Self-test Address Equates
000000r 2               
000000r 2               
000000r 2               ST3000	=	$3000	;screen memory
000000r 2               ST3002	=	$3002	;cleft display
000000r 2               ST3004	=	$3004	;"VOICE #" text display
000000r 2               ST300B	=	$300B	;voice number display
000000r 2               ST301C	=	$301C	;START key display
000000r 2               ST301E	=	$301E	;SELECT key display
000000r 2               ST3020	=	$3020	;OPTION key display, first 8K ROM display
000000r 2               ST3021	=	$3021	;keyboard character display
000000r 2               ST3022	=	$3022	;keyboard text display
000000r 2               ST3024	=	$3024	;second 8K ROM display
000000r 2               ST3028	=	$3028	;"RAM" text display
000000r 2               ST3038	=	$3038	;RAM display
000000r 2               ST303C	=	$303C	;fifth note display
000000r 2               ST304C	=	$304C	;"B S" text display
000000r 2               ST3052	=	$3052	;tab key display
000000r 2               ST3062	=	$3062	;cleft display
000000r 2               ST306D	=	$306D	;return key display
000000r 2               ST3072	=	$3072	;control key display
000000r 2               ST3092	=	$3092	;"SH" text display
000000r 2               ST309E	=	$309E	;sixth note display
000000r 2               ST30AB	=	$30AB	;"SH" text display
000000r 2               ST30B7	=	$30B7	;"S P A C E   B A R" text display
000000r 2               ST30C1	=	$30C1	;cleft display
000000r 2               ST30C2	=	$30C2	;cleft display
000000r 2               ST30C7	=	$30C7	;third note display
000000r 2               ST30CA	=	$30CA	;fourth note display
000000r 2               ST30F8	=	$30F8	;third note display
000000r 2               ST3100	=	$3100	;screen memory
000000r 2               ST3121	=	$3121	;cleft display
000000r 2               ST3122	=	$3122	;cleft display
000000r 2               ST313C	=	$313C	;fifth note display
000000r 2               ST3150	=	$3150	;first line of staff display
000000r 2               ST3154	=	$3154	;first note display
000000r 2               ST3181	=	$3181	;cleft display
000000r 2               ST3182	=	$3182	;cleft display
000000r 2               ST3186	=	$3186	;second note display
000000r 2               ST318C	=	$318C	;fifth note display
000000r 2               ST31B0	=	$31B0	;second line of staff display
000000r 2               ST31C2	=	$31C2	;cleft display
000000r 2               ST31CA	=	$31CA	;fourth note display
000000r 2               ST31EE	=	$31EE	;sixth note display
000000r 2               ST31F1	=	$31F1	;cleft display
000000r 2               ST3210	=	$3210	;third line of staff display
000000r 2               ST321A	=	$321A	;fourth note display
000000r 2               ST3248	=	$3248	;third note display
000000r 2               ST3270	=	$3270	;fourth line of staff display
000000r 2               ST32D0	=	$32D0	;fifth line of staff display
000000r 2               
000000r 2               	.ENDIF
000000r 2               
000000r 2               ;	SUBTTL	'Macro Definitions'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	FIX - Fix Address
000000r 2               ;*
000000r 2               ;*	FIX sets the origin counter to the value specified as an
000000r 2               ;*	argument.  If the current origin counter is less than the
000000r 2               ;*	argument, FIX fills the intervening bytes with zero and
000000r 2               ;*	issues a message to document the location and number of
000000r 2               ;*	bytes that are zero filled.
000000r 2               ;*
000000r 2               ;*	ENTRY	FIX	address
000000r 2               ;*
000000r 2               ;*
000000r 2               ;*	EXIT
000000r 2               ;*		Origin counter set to specified address.
000000r 2               ;*		Message issued if zero fill r=ired.
000000r 2               ;*
000000r 2               ;*	CHANGES
000000r 2               ;*		-none-
000000r 2               ;*
000000r 2               ;*	CALLS
000000r 2               ;*		-none-
000000r 2               ;*
000000r 2               ;*	NOTES
000000r 2               ;*		Due to ECHO limitiation of 255 iterations, FIX is
000000r 2               ;*		recursive.
000000r 2               ;*		If the current origin counter value is beyond the
000000r 2               ;*		argument, FIX generates an error.
000000r 2               ;*
000000r 2               ;*	MODS
000000r 2               ;*		R. K. Nordin	11/01/83
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro	FIX	address
000000r 2               	.if	* > address
000000r 2               	.error	.sprintf("$%04x precedes current origin counter of $%04x", address, *)
000000r 2               	.elseif * < address
000000r 2               	.out	.sprintf("$%04x free bytes from $%04x to $%04x", address-*, *, address-1)
000000r 2               	.res	address-*, $00
000000r 2               	.endif
000000r 2               .endmacro
000000r 2               ;	SUBTTL	'First 8K ROM Identification and Checksum'
000000r 2               ;	SPACE	4,10
000000r 2               ;	ORG	$C000
000000r 2               ;	SPACE	4,10
000000r 2               ;**	First 8K ROM Identification and Checksum
000000r 2               
000000r 2               
000000r 2               ;	DW	$0000				;reserved for checksum
000000r 2               ;	DB	IDDAY,IDMON,IDYEAR		;date (day, month, year)
000000r 2               ;	DB	$00				;not used
000000r 2               ;	DB	IDPN1,IDPN2,IDPN3,IDPN4,IDPN5	;part number
000000r 2               ;	DB	IDREV				;revision number
000000r 2               
000000r 2               
000000r 1               
000000r 1               FNAME		= $500
000000r 1               FVEC		= $2E0
000000r 1               FINIT		= $2E2
000000r 1               
000000r 1               		.ORG DUPCODE
001A40  1               	.ENDIF
001A40  1               
001A40  1               	.IF PLATFORM = 3
001A40  1               		.include "fat16.inc"
001A40  1               		.include "homebrew.inc"
001A40  1               		.include "myos.inc"
001A40  1               
001A40  1               		DUPCODE		= $0A00
001A40  1               		.ORG DUPCODE
001A40  1               	.ENDIF
001A40  1               ;
001A40  1               ;
001A40  1               ;
001A40  1  4C 46 1A     		JMP	DUPINIT
001A43  1  4C 49 1B     		JMP	LOADFIL
001A46  1               
001A46  1  A9 00        DUPINIT:	LDA	#0
001A48  1  A2 1F        		LDX	#31
001A4A  1  9D 00 05     DUPINIT1:	STA	FNAME,x
001A4D  1  CA           		DEX
001A4E  1  10 FA        		BPL	DUPINIT1
001A50  1  A9 4C        		LDA	#$4C
001A52  1  8D 7C 07     		STA	JMPIND
001A55  1               
001A55  1               	.IF PLATFORM = 2 || PLATFORM = 4
001A55  1  A2 70        		LDX	#$70
001A57  1  A9 03        		LDA	#OPEN
001A59  1  9D 42 03     		STA 	ICCOM,X
001A5C  1  A9 04        		LDA 	#4
001A5E  1  9D 4A 03     		STA 	ICAX1,X
001A61  1  9D 49 03     		STA 	ICBLH,X
001A64  1  A9 89        		LDA 	#<KBDNAME
001A66  1  9D 44 03     		STA 	ICBAL,X
001A69  1  A9 1F        		LDA 	#>KBDNAME
001A6B  1  9D 45 03     		STA 	ICBAH,X
001A6E  1  A9 00        		LDA 	#0
001A70  1  9D 48 03     		STA 	ICBLL,X
001A73  1  9D 4B 03     		STA 	ICAX2,X
001A76  1  20 56 E4     		JSR 	CIOV
001A79  1               	.ENDIF
001A79  1               
001A79  1  18           MENU:		CLC
001A7A  1  A2 64        		LDX	#<DUPMENU
001A7C  1  A9 1E        		LDA	#>DUPMENU
001A7E  1  20 09 0D     		JSR	JPRINTSTR
001A81  1               
001A81  1  20 47 1E     		JSR 	GETCHAR
001A84  1  20 03 0D     		JSR	JPRINT
001A87  1               
001A87  1  A2 08        		LDX	#8
001A89  1  DD 15 1F     FINDCMD:	CMP	CMDTABXIO,X
001A8C  1  F0 05        		BEQ	DOCMD
001A8E  1  CA           		DEX
001A8F  1  10 F8        		BPL	FINDCMD
001A91  1  30 E6        		BMI	MENU
001A93  1               
001A93  1  E0 04        DOCMD:		CPX	#4
001A95  1  90 0E        		BCC	DOXIO
001A97  1  8A           		TXA
001A98  1  E9 04        		SBC	#4		;carry set = 4
001A9A  1  0A           		ASL
001A9B  1  AA           		TAX
001A9C  1  BD 23 1F     		LDA	JMPTAB+1,X
001A9F  1  48           		PHA
001AA0  1  BD 22 1F     		LDA	JMPTAB,X
001AA3  1  48           		PHA
001AA4  1  60           		RTS
001AA5  1               
001AA5  1  BD 1E 1F     DOXIO:		LDA	XIOCMD,X
001AA8  1  A2 10        		LDX	#$10
001AAA  1  9D 42 03     		STA	ICCOM,X
001AAD  1               
001AAD  1  20 C7 1A     		JSR 	PRINTSPEC
001AB0  1               
001AB0  1  20 AE 1D     		JSR 	GETSTR
001AB3  1  30 6D        		BMI 	ERR
001AB5  1               
001AB5  1  20 F8 1C     		JSR 	CORRNAME
001AB8  1               
001AB8  1  A2 10        		LDX	#$10
001ABA  1  20 C3 1D     		JSR 	FOPEN3
001ABD  1  30 63        		BMI 	ERR
001ABF  1  10 B8        		BPL 	MENU
001AC1  1               
001AC1  1               
001AC1  1               
001AC1  1  BA           EXIT:		TSX
001AC2  1  E0 FF        		CPX	#$FF
001AC4  1  F0 B3        		BEQ	MENU
001AC6  1  60           EXIT1:		RTS
001AC7  1               
001AC7  1               
001AC7  1  18           PRINTSPEC:	CLC
001AC8  1  A2 3B        		LDX	#<SPECSTR
001ACA  1  A9 1F        		LDA	#>SPECSTR
001ACC  1  4C 09 0D     		JMP	JPRINTSTR
001ACF  1               
001ACF  1               
001ACF  1  18           GOTOADR:	CLC
001AD0  1  A2 7D        		LDX	#<GOTOSTR
001AD2  1  A9 1F        		LDA	#>GOTOSTR
001AD4  1  20 09 0D     		JSR	JPRINTSTR
001AD7  1               
001AD7  1  20 FB 1D     		JSR 	ENTERADR
001ADA  1  C9 58        		CMP 	#'X'
001ADC  1  F0 9B        		BEQ 	MENU
001ADE  1  20 E4 1A     		JSR 	GOTOADR1
001AE1  1  4C 79 1A     		JMP 	MENU
001AE4  1  6C 6B 07     GOTOADR1:	JMP 	(ASTART)
001AE7  1               
001AE7  1  20 C7 1A     DIR:		JSR 	PRINTSPEC
001AEA  1               
001AEA  1  20 AE 1D     		JSR 	GETSTR
001AED  1  30 33        		BMI 	ERR
001AEF  1               
001AEF  1  AD 00 05     		LDA 	FNAME		;only EOL entered?
001AF2  1  C9 9B        		CMP 	#EOL
001AF4  1  D0 0B        		BNE 	DIR4		;no
001AF6  1               
001AF6  1  A2 05        		LDX 	#5		;replace with D:*.*
001AF8  1  BD 50 1F     DIR3:		LDA 	DEFSPEC,X
001AFB  1  9D 00 05     		STA 	FNAME,X
001AFE  1  CA           		DEX
001AFF  1  10 F7        		BPL 	DIR3
001B01  1               
001B01  1  20 F8 1C     DIR4:		JSR 	CORRNAME
001B04  1               
001B04  1  20 DD 1D     		JSR 	FOPENDIR
001B07  1  30 19        		BMI 	ERR
001B09  1               
001B09  1  20 7C 1D     DIR1:		JSR 	FGETDIR
001B0C  1  30 0B        		BMI 	DIR2
001B0E  1               
001B0E  1  18           		CLC
001B0F  1  A2 00        		LDX 	#<FNAME
001B11  1  A9 05        		LDA 	#>FNAME
001B13  1  20 09 0D     		JSR 	JPRINTSTR
001B16  1  4C 09 1B     		JMP 	DIR1
001B19  1               
001B19  1  20 F1 1D     DIR2:		JSR 	FCLOSE
001B1C  1  20 47 1E     		JSR 	GETCHAR
001B1F  1  4C 79 1A     		JMP 	MENU
001B22  1               
001B22  1  98           ERR:		TYA
001B23  1  48           		PHA
001B24  1  20 F1 1D     		JSR 	FCLOSE
001B27  1               
001B27  1  18           		CLC
001B28  1  A2 48        		LDX	#<ERRSTR
001B2A  1  A9 1F        		LDA	#>ERRSTR
001B2C  1  20 09 0D     		JSR	JPRINTSTR
001B2F  1               
001B2F  1  68           		PLA
001B30  1  20 06 0D     ERRPRT:		JSR 	JPUTHEX
001B33  1  20 47 1E     		JSR 	GETCHAR
001B36  1  4C 79 1A     		JMP 	MENU
001B39  1               
001B39  1               ;-------------------------------------------------------------------------------
001B39  1               ; Load File
001B39  1               ; - Print Filespec
001B39  1               ; - Get String
001B39  1               ; - Load file in Chunks
001B39  1               ;-------------------------------------------------------------------------------
001B39  1  20 C7 1A     LOAD:		JSR 	PRINTSPEC
001B3C  1  20 AE 1D     		JSR 	GETSTR
001B3F  1  30 E1        		BMI 	ERR
001B41  1  20 49 1B     		JSR 	LOADFIL
001B44  1  30 EA        		BMI 	ERRPRT
001B46  1  4C 79 1A     		JMP 	MENU
001B49  1               
001B49  1               
001B49  1  A9 F7        LOADFIL:	LDA 	#<LABRTS
001B4B  1  8D E0 02     		STA 	FVEC
001B4E  1  A9 1C        		LDA 	#>LABRTS
001B50  1  8D E1 02     		STA 	FVEC+1
001B53  1               
001B53  1  20 F8 1C     		JSR 	CORRNAME
001B56  1               
001B56  1  20 B7 1D     		JSR 	FOPEN
001B59  1  30 47        		BMI 	ERR1
001B5B  1  20 86 1D     		JSR 	FGETST		;get 2 bytes in ASTART
001B5E  1  30 42        		BMI 	ERR1
001B60  1               
001B60  1  A9 FF        		LDA 	#$FF		;check if first 2-bytes are $FF
001B62  1  CD 6B 07     		CMP 	ASTART		;if not, close and exit
001B65  1  D0 43        		BNE 	MCLOSE
001B67  1  CD 6C 07     		CMP 	ASTART+1
001B6A  1  D0 3E        		BNE 	MCLOSE
001B6C  1               
001B6C  1  20 86 1D     LOADCHU1:	JSR 	FGETST		;get start address
001B6F  1  30 31        		BMI 	ERR1
001B71  1  20 95 1D     LOADCHU:	JSR 	FGETEND		;get end address
001B74  1  30 2C        		BMI 	ERR1
001B76  1  20 24 1D     		JSR 	FGETCHUN	;read chunk of data
001B79  1  30 27        		BMI 	ERR1
001B7B  1               
001B7B  1  AD E2 02     		LDA 	FINIT		;init this chunk
001B7E  1  8D 7D 07     		STA 	JMPPTR
001B81  1  AD E3 02     		LDA 	FINIT+1
001B84  1  8D 7E 07     		STA 	JMPPTR+1
001B87  1  20 7C 07     		JSR 	JMPIND
001B8A  1               
001B8A  1  20 86 1D     		JSR 	FGETST		;read next 2-bytes
001B8D  1  C0 88        		CPY 	#EOFERR		;EOF?
001B8F  1  F0 1C        		BEQ 	FGOTO		;yes, try to start the file
001B91  1  98           		TYA
001B92  1  30 0E        		BMI 	ERR1		;error?
001B94  1               
001B94  1  A9 FF        		LDA 	#$FF		;skip if $FF $FF
001B96  1  CD 6B 07     		CMP 	ASTART
001B99  1  D0 D6        		BNE 	LOADCHU
001B9B  1  CD 6C 07     		CMP 	ASTART+1
001B9E  1  D0 D1        		BNE 	LOADCHU
001BA0  1  F0 CA        		BEQ 	LOADCHU1
001BA2  1               
001BA2  1  98           ERR1:		TYA
001BA3  1  48           		PHA
001BA4  1  20 F1 1D     		JSR 	FCLOSE
001BA7  1  68           		PLA
001BA8  1  A8           		TAY
001BA9  1  60           		RTS
001BAA  1               
001BAA  1  4C F1 1D     MCLOSE:		JMP 	FCLOSE
001BAD  1               
001BAD  1               
001BAD  1  20 F1 1D     FGOTO:		JSR 	FCLOSE
001BB0  1               ;		SEC
001BB0  1               ;		LDX	#<READYSTR
001BB0  1               ;		LDA	#>READYSTR
001BB0  1               ;		JSR	JPRINTSTR
001BB0  1               ;		JSR	GETCHAR
001BB0  1               
001BB0  1  A9 04        		LDA	#4					;key still pressed
001BB2  1  2C 0F D2     FGOTO1:		BIT	SKSTAT
001BB5  1  F0 FB        		BEQ	FGOTO1					;yes, loop
001BB7  1               
001BB7  1  AD E0 02     		LDA 	FVEC
001BBA  1  8D 7D 07     		STA 	JMPPTR
001BBD  1  AD E1 02     		LDA 	FVEC+1
001BC0  1  8D 7E 07     		STA 	JMPPTR+1
001BC3  1  20 7C 07     		JSR 	JMPIND
001BC6  1  A9 01        		LDA	#SUCCES
001BC8  1  60           		RTS
001BC9  1               
001BC9  1  A2 56        SAVE:		LDX	#<FROMSTR
001BCB  1  A9 1F        		LDA	#>FROMSTR
001BCD  1  20 09 0D     		JSR	JPRINTSTR
001BD0  1  20 FB 1D     		JSR 	ENTERADR
001BD3  1  C9 58        		CMP 	#'X'
001BD5  1  D0 03        		BNE	SAVE1
001BD7  1  4C 79 1A     		JMP 	MENU
001BDA  1               
001BDA  1  AD 6B 07     SAVE1:		LDA	ASTART
001BDD  1  8D 76 07     		STA	FSTARTS
001BE0  1  AD 6C 07     		LDA	ASTART+1
001BE3  1  8D 77 07     		STA	FSTARTS+1
001BE6  1               
001BE6  1               	.IF PLATFORM <= 1
001BE6  1               		SEC
001BE6  1               	.ELSE
001BE6  1  18           		CLC
001BE7  1               	.ENDIF
001BE7  1  A2 5F        		LDX	#<TOSTR
001BE9  1  A9 1F        		LDA	#>TOSTR
001BEB  1  20 09 0D     		JSR	JPRINTSTR
001BEE  1  20 FB 1D     		JSR 	ENTERADR
001BF1  1  C9 58        		CMP 	#'X'
001BF3  1  D0 03        		BNE	SAVE2
001BF5  1  4C 79 1A     		JMP 	MENU
001BF8  1               
001BF8  1  AD 6B 07     SAVE2:		LDA	ASTART
001BFB  1  8D 78 07     		STA	FENDS
001BFE  1  AD 6C 07     		LDA	ASTART+1
001C01  1  8D 79 07     		STA	FENDS+1
001C04  1               
001C04  1  AD 79 07     		LDA	FENDS+1
001C07  1  CD 77 07     		CMP	FSTARTS+1
001C0A  1  B0 03        		BCS	SAVE8
001C0C  1  4C 79 1A     		JMP	MENU
001C0F  1  AD 78 07     SAVE8:		LDA	FENDS
001C12  1  CD 76 07     		CMP	FSTARTS
001C15  1  B0 03        		BCS	SAVE9
001C17  1  4C 79 1A     		JMP	MENU
001C1A  1               
001C1A  1  A2 FF        SAVE9:		LDX	#$FF
001C1C  1  8E 70 07     		STX	FHEADER
001C1F  1  8E 71 07     		STX	FHEADER+1
001C22  1  E8           		INX
001C23  1  8E 7A 07     		STX	FDIFF
001C26  1  8E 7B 07     		STX	FDIFF+1
001C29  1               
001C29  1  18           		CLC
001C2A  1  A2 69        		LDX	#<INTOSTR
001C2C  1  A9 1F        		LDA	#>INTOSTR
001C2E  1  20 09 0D     		JSR	JPRINTSTR
001C31  1  20 FB 1D     		JSR 	ENTERADR
001C34  1  C9 58        		CMP	#'X'
001C36  1  F0 13        		BEQ	SAVE10
001C38  1               
001C38  1  38           		SEC
001C39  1  AD 76 07     		LDA	FSTARTS
001C3C  1  ED 6B 07     		SBC	ASTART
001C3F  1  8D 7A 07     		STA	FDIFF
001C42  1  AD 77 07     		LDA	FSTARTS+1
001C45  1  ED 6C 07     		SBC	ASTART+1
001C48  1  8D 7B 07     		STA	FDIFF+1
001C4B  1               
001C4B  1  38           SAVE10:		SEC
001C4C  1  AD 76 07     		LDA	FSTARTS
001C4F  1  ED 7A 07     		SBC	FDIFF
001C52  1  8D 72 07     		STA	FSTART
001C55  1  AD 77 07     		LDA	FSTARTS+1
001C58  1  ED 7B 07     		SBC	FDIFF+1
001C5B  1  8D 73 07     		STA	FSTART+1
001C5E  1               
001C5E  1  38           		SEC
001C5F  1  AD 78 07     		LDA	FENDS
001C62  1  ED 7A 07     		SBC	FDIFF
001C65  1  8D 74 07     		STA	FEND
001C68  1  AD 79 07     		LDA	FENDS+1
001C6B  1  ED 7B 07     		SBC	FDIFF+1
001C6E  1  8D 75 07     		STA	FEND+1
001C71  1               
001C71  1               	.IF PLATFORM <= 1
001C71  1               		SEC
001C71  1               	.ELSE
001C71  1  18           		CLC
001C72  1               	.ENDIF
001C72  1  A2 3E        		LDX	#<(SPECSTR+3)
001C74  1  A9 1F        		LDA	#>(SPECSTR+3)
001C76  1  20 09 0D     		JSR	JPRINTSTR
001C79  1               
001C79  1  20 AE 1D     		JSR 	GETSTR
001C7C  1  10 03        		BPL	SAVE3
001C7E  1  4C 22 1B     		JMP 	ERR
001C81  1  20 F8 1C     SAVE3:		JSR 	CORRNAME
001C84  1               
001C84  1  18           		CLC
001C85  1  A2 73        		LDX	#<APPENDSTR
001C87  1  A9 1F        		LDA	#>APPENDSTR
001C89  1  20 09 0D     		JSR	JPRINTSTR
001C8C  1               
001C8C  1  20 47 1E     		JSR 	GETCHAR
001C8F  1  A8           		TAY
001C90  1  20 03 0D     		JSR	JPRINT
001C93  1               
001C93  1  A2 10        		LDX 	#$10
001C95  1  A9 03        		LDA 	#OPEN
001C97  1  9D 42 03     		STA 	ICCOM,X
001C9A  1  A9 08        		LDA	#8
001C9C  1  C0 59        		CPY	#'Y'
001C9E  1  D0 02        		BNE	SAVE7
001CA0  1  09 01        		ORA	#1
001CA2  1  20 C0 1D     SAVE7:		JSR	FOPEN2
001CA5  1  10 03        		BPL	SAVE4
001CA7  1  4C 22 1B     		JMP	ERR
001CAA  1               
001CAA  1  A9 0B        SAVE4:		LDA	#PUTCHR
001CAC  1  9D 42 03     		STA	ICCOM,X
001CAF  1  A9 06        		LDA	#6
001CB1  1  9D 48 03     		STA	ICBLL,X
001CB4  1  A9 00        		LDA	#0
001CB6  1               	.IF PLATFORM  <= 1
001CB6  1               		STA	ICBAB,X
001CB6  1               		STA	ICBLB,X
001CB6  1               	.ENDIF
001CB6  1  9D 49 03     		STA	ICBLH,X
001CB9  1  A9 70        		LDA	#<FHEADER
001CBB  1  9D 44 03     		STA	ICBAL,X
001CBE  1  A9 07        		LDA	#>FHEADER
001CC0  1  9D 45 03     		STA	ICBAH,X
001CC3  1  20 56 E4     		JSR	CIOV
001CC6  1  30 29        		BMI	SAVECLOSE
001CC8  1               
001CC8  1  AD 76 07     SAVE6:		LDA	FSTARTS
001CCB  1  9D 44 03     		STA	ICBAL,X
001CCE  1  AD 77 07     		LDA	FSTARTS+1
001CD1  1  9D 45 03     		STA	ICBAH,X
001CD4  1  AD 78 07     		LDA	FENDS
001CD7  1  ED 76 07     		SBC	FSTARTS
001CDA  1  9D 48 03     		STA	ICBLL,X
001CDD  1  AD 79 07     		LDA	FENDS+1
001CE0  1  ED 77 07     		SBC	FSTARTS+1
001CE3  1  9D 49 03     		STA	ICBLH,X
001CE6  1  FE 48 03     		INC	ICBLL,X
001CE9  1  D0 03        		BNE	SAVE5
001CEB  1  FE 49 03     		INC	ICBLH,X
001CEE  1  20 56 E4     SAVE5:		JSR	CIOV
001CF1  1  20 F1 1D     SAVECLOSE:	JSR	FCLOSE
001CF4  1  4C 79 1A     		JMP	MENU
001CF7  1               
001CF7  1  60           LABRTS:		RTS
001CF8  1               
001CF8  1               	.IF PLATFORM=99
001CF8  1               DEBUG:		LDA	ASTART
001CF8  1               		JSR	JPUTHEX
001CF8  1               		LDA	ASTART+1
001CF8  1               		JSR	JPUTHEX
001CF8  1               		LDA	AEND
001CF8  1               		JSR	JPUTHEX
001CF8  1               		LDA	AEND+1
001CF8  1               		JSR	JPUTHEX
001CF8  1               		LDA	FVEC
001CF8  1               		JSR	JPUTHEX
001CF8  1               		LDA	FVEC+1
001CF8  1               		JSR	JPUTHEX
001CF8  1               		LDA	FINIT
001CF8  1               		JSR	JPUTHEX
001CF8  1               		LDA	FINIT+1
001CF8  1               		JSR	JPUTHEX
001CF8  1               		RTS
001CF8  1               	.ENDIF
001CF8  1               
001CF8  1  A9 3A        CORRNAME:	LDA 	#':'
001CFA  1  CD 01 05     		CMP 	FNAME+1
001CFD  1  F0 F8        		BEQ 	LABRTS
001CFF  1  CD 02 05     		CMP 	FNAME+2
001D02  1  F0 F3        		BEQ 	LABRTS
001D04  1               
001D04  1  A2 00        		LDX 	#0
001D06  1  BD 00 05     CORRNAM2:	LDA 	FNAME,X
001D09  1  C9 9B        		CMP 	#EOL
001D0B  1  F0 03        		BEQ 	CORRNAM1
001D0D  1  E8           		INX
001D0E  1  D0 F6        		BNE 	CORRNAM2
001D10  1               
001D10  1  BD 00 05     CORRNAM1:	LDA 	FNAME,X
001D13  1  9D 02 05     		STA 	FNAME+2,X
001D16  1  CA           		DEX
001D17  1  10 F7        		BPL 	CORRNAM1
001D19  1  A9 44        		LDA 	#DRVCHAR
001D1B  1  8D 00 05     		STA 	FNAME
001D1E  1  A9 3A        		LDA 	#':'
001D20  1  8D 01 05     		STA 	FNAME+1
001D23  1  60           		RTS
001D24  1               
001D24  1  AD 6C 07     FGETCHUN:	LDA 	ASTART+1
001D27  1  20 06 0D     		JSR 	JPUTHEX
001D2A  1  AD 6B 07     		LDA 	ASTART
001D2D  1  20 06 0D     		JSR 	JPUTHEX
001D30  1  A9 2D        		LDA 	#'-'
001D32  1  20 03 0D     		JSR 	JPRINT
001D35  1  AD 6E 07     		LDA 	AEND+1
001D38  1  20 06 0D     		JSR 	JPUTHEX
001D3B  1  AD 6D 07     		LDA 	AEND
001D3E  1  20 06 0D     		JSR 	JPUTHEX
001D41  1  A9 9B        		LDA 	#EOL
001D43  1  20 03 0D     		JSR 	JPRINT
001D46  1               
001D46  1  A9 F7        		LDA 	#<LABRTS
001D48  1  8D E2 02     		STA 	FINIT
001D4B  1  A9 1C        		LDA 	#>LABRTS
001D4D  1  8D E3 02     		STA 	FINIT+1
001D50  1               
001D50  1  A2 10        		LDX 	#$10
001D52  1  38           		SEC
001D53  1               	.IF PLATFORM  <= 1
001D53  1               		LDA	#0
001D53  1               		STA	ICBAB,X
001D53  1               		STA	ICBLB,X
001D53  1               	.ENDIF
001D53  1               
001D53  1  AD 6D 07     		LDA 	AEND
001D56  1  ED 6B 07     		SBC 	ASTART
001D59  1  9D 48 03     		STA 	ICBLL,X
001D5C  1  AD 6E 07     		LDA 	AEND+1
001D5F  1  ED 6C 07     		SBC 	ASTART+1
001D62  1  9D 49 03     		STA 	ICBLH,X
001D65  1  FE 48 03     		INC 	ICBLL,X
001D68  1  D0 03        		BNE 	FGETCHU1
001D6A  1  FE 49 03     		INC 	ICBLH,X
001D6D  1               
001D6D  1  AD 6B 07     FGETCHU1:	LDA 	ASTART
001D70  1  9D 44 03     		STA 	ICBAL,X
001D73  1  AD 6C 07     		LDA 	ASTART+1
001D76  1  9D 45 03     		STA 	ICBAH,X
001D79  1               
001D79  1  4C E9 1D     		JMP 	FGET
001D7C  1               ;
001D7C  1               ;
001D7C  1               ;
001D7C  1  A2 10        FGETDIR:	LDX 	#$10
001D7E  1  A9 05        		LDA 	#GETREC
001D80  1  9D 42 03     		STA 	ICCOM,X
001D83  1  4C C3 1D     		JMP 	FOPEN3
001D86  1               
001D86  1  A2 10        FGETST:		LDX 	#$10				;read 2 bytes to ASTART
001D88  1  A9 6B        		LDA 	#<ASTART
001D8A  1  9D 44 03     		STA 	ICBAL,X
001D8D  1  A9 07        		LDA 	#>ASTART
001D8F  1  9D 45 03     		STA 	ICBAH,X
001D92  1  4C A1 1D     		JMP 	FGET2
001D95  1               
001D95  1  A2 10        FGETEND:	LDX 	#$10
001D97  1  A9 6D        		LDA 	#<AEND
001D99  1  9D 44 03     		STA 	ICBAL,X
001D9C  1  A9 07        		LDA 	#>AEND
001D9E  1  9D 45 03     		STA 	ICBAH,X
001DA1  1               
001DA1  1  A9 02        FGET2:		LDA 	#2
001DA3  1  9D 48 03     		STA 	ICBLL,X
001DA6  1  A9 00        		LDA 	#0
001DA8  1  9D 49 03     		STA 	ICBLH,X
001DAB  1               	.IF PLATFORM  <= 1
001DAB  1               		STA	ICBAB,X
001DAB  1               		STA	ICBLB,X
001DAB  1               	.ENDIF
001DAB  1               
001DAB  1  4C E9 1D     		JMP 	FGET
001DAE  1               
001DAE  1  A2 00        GETSTR:		LDX 	#0
001DB0  1  A9 05        		LDA 	#GETREC
001DB2  1  9D 42 03     		STA 	ICCOM,X
001DB5  1  D0 0C        		BNE 	FOPEN3
001DB7  1               
001DB7  1  A2 10        FOPEN:		LDX 	#$10
001DB9  1  A9 03        		LDA 	#OPEN
001DBB  1  9D 42 03     		STA 	ICCOM,X
001DBE  1  A9 04        FOPEN1:		LDA 	#4
001DC0  1  9D 4A 03     FOPEN2:		STA 	ICAX1,X
001DC3  1  A9 00        FOPEN3:		LDA 	#<FNAME
001DC5  1  9D 44 03     		STA 	ICBAL,X
001DC8  1  A9 05        		LDA 	#>FNAME
001DCA  1  9D 45 03     		STA 	ICBAH,X
001DCD  1  A9 00        		LDA 	#0
001DCF  1               	.IF PLATFORM  <= 1
001DCF  1               		STA	ICBAB,X
001DCF  1               		STA	ICBLB,X
001DCF  1               	.ENDIF
001DCF  1  9D 48 03     		STA 	ICBLL,X
001DD2  1  9D 4B 03     		STA 	ICAX2,X
001DD5  1  A9 01        		LDA 	#1
001DD7  1  9D 49 03     		STA 	ICBLH,X
001DDA  1  4C 56 E4     		JMP 	CIOV
001DDD  1               
001DDD  1  A2 10        FOPENDIR:	LDX 	#$10
001DDF  1  A9 03        		LDA 	#OPEN
001DE1  1  9D 42 03     		STA 	ICCOM,X
001DE4  1  A9 06        		LDA 	#6
001DE6  1  4C C0 1D     		JMP 	FOPEN2
001DE9  1               
001DE9  1  A9 07        FGET:		LDA 	#GETCHR
001DEB  1  9D 42 03     		STA 	ICCOM,X
001DEE  1  4C 56 E4     		JMP 	CIOV
001DF1  1               
001DF1  1  A2 10        FCLOSE:		LDX 	#$10
001DF3  1  A9 0C        FCLOSE1:	LDA 	#CLOSE
001DF5  1  9D 42 03     		STA 	ICCOM,X
001DF8  1  4C 56 E4     		JMP 	CIOV
001DFB  1               
001DFB  1  A9 00        ENTERADR:	LDA	#0
001DFD  1  8D 6B 07     		STA	ASTART
001E00  1  8D 6C 07     		STA	ASTART+1
001E03  1  A9 04        		LDA	#4
001E05  1  8D 6F 07     		STA	CNT
001E08  1               
001E08  1  20 47 1E     ENTERADRC:	JSR	GETCHAR
001E0B  1  C9 9B        		CMP	#EOL
001E0D  1  F0 33        		BEQ	ENTERADREND
001E0F  1               
001E0F  1  C9 58        		CMP	#'X'
001E11  1  D0 01        		BNE	ENTERADRD
001E13  1  60           		RTS
001E14  1               
001E14  1  20 03 0D     ENTERADRD:	JSR	JPRINT
001E17  1  C9 3A        		CMP	#':'
001E19  1  B0 08        		BCS	ENTERADRE
001E1B  1  C9 30        		CMP	#'0'
001E1D  1  90 E9        		BCC	ENTERADRC
001E1F  1               
001E1F  1  29 0F        		AND	#%00001111
001E21  1  B0 0A        		BCS	ENTERADRF
001E23  1               
001E23  1  C9 47        ENTERADRE:	CMP	#'G'
001E25  1  B0 E1        		BCS	ENTERADRC
001E27  1  C9 41        		CMP	#'A'
001E29  1  90 DD        		BCC	ENTERADRC
001E2B  1               
001E2B  1  E9 37        		SBC	#'7'
001E2D  1  0A           ENTERADRF:	ASL
001E2E  1  0A           		ASL
001E2F  1  0A           		ASL
001E30  1  0A           		ASL
001E31  1  A2 04        		LDX	#4
001E33  1  0A           ENTERADRG:	ASL
001E34  1  2E 6B 07     		ROL	ASTART
001E37  1  2E 6C 07     		ROL	ASTART+1
001E3A  1  CA           		DEX
001E3B  1  D0 F6        		BNE	ENTERADRG
001E3D  1               
001E3D  1  CE 6F 07     		DEC	CNT
001E40  1  D0 C6        		BNE	ENTERADRC
001E42  1  A9 9B        ENTERADREND:	LDA	#EOL
001E44  1  4C 03 0D     		JMP	JPRINT
001E47  1               
001E47  1  A2 70        GETCHAR:	LDX	#$70
001E49  1  A9 07        		LDA	#GETCHR
001E4B  1  9D 42 03     		STA 	ICCOM,X
001E4E  1  A9 00        		LDA 	#0
001E50  1  9D 48 03     		STA 	ICBLL,X
001E53  1  9D 49 03     		STA 	ICBLH,X
001E56  1               	.IF PLATFORM <= 1
001E56  1               		STA 	ICBLB,X
001E56  1               	.ENDIF
001E56  1  20 56 E4     		JSR 	CIOV
001E59  1               
001E59  1  C9 61        UPPER:		cmp	#'a'
001E5B  1  90 06        		bcc	UPPEREND
001E5D  1  C9 7B        		cmp	#'z'+1
001E5F  1  B0 02        		bcs	UPPEREND
001E61  1  E9 1F        		sbc	#$1F
001E63  1  60           UPPEREND:	rts
001E64  1               
001E64  1               
001E64  1               ;
001E64  1  7D           DUPMENU:	.byte CLS
001E65  1  46 41 54 2D  		.byte "FAT-1"
001E69  1  31           
001E6A  1               	.IF PLATFORM = 4
001E6A  1  32           		.byte "2"
001E6B  1               	.ELSE
001E6B  1               		.byte "6"
001E6B  1               	.ENDIF
001E6B  1  20 44 4F 53  		.byte " DOS (c) by R. Scholz"
001E6F  1  20 28 63 29  
001E73  1  20 62 79 20  
001E80  1  9B 9B        		.byte EOL,EOL
001E82  1  41 20 2D 20  		.byte "A - Display Dir"
001E86  1  44 69 73 70  
001E8A  1  6C 61 79 20  
001E91  1  9B           		.byte EOL
001E92  1  43 20 2D 20  		.byte "C - Change  Dir"
001E96  1  43 68 61 6E  
001E9A  1  67 65 20 20  
001EA1  1  9B           		.byte EOL
001EA2  1  44 20 2D 20  		.byte "D - Delete  File"
001EA6  1  44 65 6C 65  
001EAA  1  74 65 20 20  
001EB2  1  9B           		.byte EOL
001EB3  1  47 20 2D 20  		.byte "G - Goto    Address"
001EB7  1  47 6F 74 6F  
001EBB  1  20 20 20 20  
001EC6  1  9B           		.byte EOL
001EC7  1  4C 20 2D 20  		.byte "L - Load    File"
001ECB  1  4C 6F 61 64  
001ECF  1  20 20 20 20  
001ED7  1  9B           		.byte EOL
001ED8  1  4D 20 2D 20  		.byte "M - Create  Dir"
001EDC  1  43 72 65 61  
001EE0  1  74 65 20 20  
001EE7  1  9B           		.byte EOL
001EE8  1  52 20 2D 20  		.byte "R - Rename  File"
001EEC  1  52 65 6E 61  
001EF0  1  6D 65 20 20  
001EF8  1  9B           		.byte EOL
001EF9  1  53 20 2D 20  		.byte "S - Save    File"
001EFD  1  53 61 76 65  
001F01  1  20 20 20 20  
001F09  1  9B           		.byte EOL
001F0A  1  58 20 2D 20  		.byte "X - Exit"
001F0E  1  45 78 69 74  
001F12  1  9B 9B        		.byte EOL,EOL
001F14  1  00           		.byte 0
001F15  1               
001F15  1  43 44 4D 52  CMDTABXIO:	.byte "CDMR"
001F19  1  41 47 4C 53  CMDTAB:		.byte "AGLSX"
001F1D  1  58           
001F1E  1  29 21 22 20  XIOCMD:		.byte CCHADIR, CDELETE, CCREDIR, CRENAME
001F22  1  E6 1A CE 1A  JMPTAB:		.word DIR-1, GOTOADR-1, LOAD-1, SAVE-1, EXIT-1
001F26  1  38 1B C8 1B  
001F2A  1  C0 1A        
001F2C  1               
001F2C  1  70 72 65 73  READYSTR:	.byte "press any key.",0
001F30  1  73 20 61 6E  
001F34  1  79 20 6B 65  
001F3B  1  20 2D 20 46  SPECSTR:	.byte " - FILESPEC:"
001F3F  1  49 4C 45 53  
001F43  1  50 45 43 3A  
001F47  1  00           		.byte 0
001F48  1  45 52 52 4F  ERRSTR:		.byte "ERROR: "
001F4C  1  52 3A 20     
001F4F  1  00           		.byte 0
001F50  1  44 3A 2A 2E  DEFSPEC:	.byte DRVCHAR, ":*.*"
001F54  1  2A           
001F55  1  9B           		.byte EOL
001F56  1               
001F56  1  20 2D 20 46  FROMSTR:	.byte " - FROM:",0
001F5A  1  52 4F 4D 3A  
001F5E  1  00           
001F5F  1  20 20 20 20  TOSTR:		.byte "      TO:",0
001F63  1  20 20 54 4F  
001F67  1  3A 00        
001F69  1  20 20 20 20  INTOSTR:	.byte "    INTO:",0
001F6D  1  49 4E 54 4F  
001F71  1  3A 00        
001F73  1  20 20 41 50  APPENDSTR:	.byte "  APPEND:",0
001F77  1  50 45 4E 44  
001F7B  1  3A 00        
001F7D  1  20 2D 20 41  GOTOSTR:	.byte " - ADDRESS:"
001F81  1  44 44 52 45  
001F85  1  53 53 3A     
001F88  1  00           		.byte 0
001F89  1               
001F89  1  4B 3A 9B     KBDNAME:	.byte	"K:",EOL
001F8B  1               
