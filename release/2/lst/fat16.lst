ca65 V2.17 - Git 59ab140
Main file   : ..\src\fat16.a65
Current file: ..\src\fat16.a65

000000r 1               .macro	cmp_icbalz_y
000000r 1               	.IF PLATFORM=0
000000r 1               		CMP [ICBALZ],Y
000000r 1               	.ELSE
000000r 1               		CMP (ICBALZ),Y
000000r 1               	.ENDIF
000000r 1               .endmacro
000000r 1               
000000r 1               .macro	lda_icbalz_y
000000r 1               	.IF PLATFORM=0
000000r 1               		LDA [ICBALZ],Y
000000r 1               	.ELSE
000000r 1               		LDA (ICBALZ),Y
000000r 1               	.ENDIF
000000r 1               .endmacro
000000r 1               
000000r 1               .macro	sta_icbalz_y
000000r 1               	.IF PLATFORM=0
000000r 1               		STA [ICBALZ],Y
000000r 1               	.ELSE
000000r 1               		STA (ICBALZ),Y
000000r 1               	.ENDIF
000000r 1               .endmacro
000000r 1               
000000r 1               	.IF PLATFORM = 2
000000r 1               		.include "atarixl.inc"
000000r 2               ;	SPACE	4,10
000000r 2               ;***	Copyright 1984 ATARI.  Unauthorized reproduction, adaptation,
000000r 2               ;*	distribution, performance or display of this computer program
000000r 2               ;*	or the associated audiovisual work is strictly prohibited.
000000r 2               ;	SPACE	4,10
000000r 2               ;***	OS - Operating System
000000r 2               ;*
000000r 2               ;*	NOTES
000000r 2               ;*		This represents an attempt to bring the OS :
000000r 2               ;*		into conformance with the Atari Internal So:
000000r 2               ;*		Standards as defined in the Software Develo:
000000r 2               ;*		Committee Report on Procedures And Standard:
000000r 2               ;*		(10/27/81).  Due to time constraints, the e:
000000r 2               ;*		source could not be brought up to the stand:
000000r 2               ;*		particularly in the area of subroutine head:
000000r 2               ;*		documentation (ENTRY, EXIT, CHANGES and CAL:
000000r 2               ;*		More complete and consistent conformance to:
000000r 2               ;*		standard is planned for the next revision o:
000000r 2               ;*		Operating System (Revision 3).
000000r 2               ;*
000000r 2               ;*	MODS
000000r 2               ;*		Revision A (400/800)
000000r 2               ;*		D. Crane/A. Miller/L. Kaplan/R. Whitehead
000000r 2               ;*
000000r 2               ;*		Revision B (400/800)
000000r 2               ;*		Fix several problems.
000000r 2               ;*		M. Mahar/R. S. Scheiman
000000r 2               ;*
000000r 2               ;*		Revision 10 (1200XL)
000000r 2               ;*		Support 1200XL, add new features.
000000r 2               ;*		H. Stewart/L. Winner/R. S. Scheiman/
000000r 2               ;*		Y. M. Chen/M. W. Colburn	10/26/82
000000r 2               ;*
000000r 2               ;*		Revision 11 (1200XL)
000000r 2               ;*		Fix several problems.
000000r 2               ;*		R. S. Scheiman	12/23/82
000000r 2               ;*
000000r 2               ;*		Revision 1 (600XL/800XL)
000000r 2               ;*		Support PBI and on-board BASIC.
000000r 2               ;*		R. S. Scheiman/R. K. Nordin/Y. M. Chen	03/11/83
000000r 2               ;*
000000r 2               ;*		Revision 2 (600XL/800XL)
000000r 2               ;*		Fix several problems.
000000r 2               ;*		R. S. Scheiman	05/10/83
000000r 2               ;*		Bring closer to Coding Standard (object unchanged).
000000r 2               ;*		R. K. Nordin	11/01/83
000000r 2               
000000r 2               
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Program Structure
000000r 2               ;*
000000r 2               ;*	The sections of the OS appear in the following order with
000000r 2               ;*	corresponding subtitles:
000000r 2               ;*
000000r 2               ;*	Equates and Definitions
000000r 2               ;*
000000r 2               ;*		System Symbol Equates
000000r 2               ;*		System Address Equates
000000r 2               ;*		Miscellaneous Address Equates
000000r 2               ;*		Macro Definitions
000000r 2               ;*
000000r 2               ;*	Code and Data
000000r 2               ;*
000000r 2               ;*		First 8K ROM Identification and Checksum
000000r 2               ;*
000000r 2               ;*		Interrupt Handler
000000r 2               ;*		Initialization
000000r 2               ;*		Disk Input/Ouput
000000r 2               ;*		Relocating Loader
000000r 2               ;*		Self-test, Part 1
000000r 2               ;*		Parallel Input/Output
000000r 2               ;*		Peripheral Handler Loading Facility, Part 1
000000r 2               ;*		Self-test, Part 2
000000r 2               ;*		Peripheral Handler Loading Facility, Part 2
000000r 2               ;*
000000r 2               ;*		International Character Set
000000r 2               ;*
000000r 2               ;*		Self-test, Part 3
000000r 2               ;*		Floating Point Package
000000r 2               ;*
000000r 2               ;*		Domestic Character Set
000000r 2               ;*
000000r 2               ;*		Device Handler Vector Tables
000000r 2               ;*		Jump Vectors
000000r 2               ;*		Generic Parallel Device Handler Vector Table
000000r 2               ;*
000000r 2               ;*		$E4C0 Patch
000000r 2               ;*		Central Input/Output
000000r 2               ;*		Peripheral Handler Loading Facility, Part 3
000000r 2               ;*		$E912 Patch
000000r 2               ;*		Peripheral Handler Loading Facility, Part 4
000000r 2               ;*		$E959 Patch
000000r 2               ;*		Serial Input/Output
000000r 2               ;*		Keyboard, Editor and Screen Handler, Part 1
000000r 2               ;*		Peripheral Handler Loading Facility, Part 5
000000r 2               ;*		$EF6B Patch
000000r 2               ;*		Keyboard, Editor and Screen Handler, Part 2
000000r 2               ;*		$F223 Patch
000000r 2               ;*		Keyboard, Editor and Screen Handler, Part 3
000000r 2               ;*		$FCD8 Patch
000000r 2               ;*		Cassette Handler
000000r 2               ;*		Printer Handler
000000r 2               ;*		Self-test, Part 4
000000r 2               ;*
000000r 2               ;*		Second 8K ROM Identification and Checksum
000000r 2               ;*		6502 Machine Vectors
000000r 2               ;	SUBTTL	'System Symbol Equates'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Assembly Option Equates
000000r 2               
000000r 2               
000000r 2               FALSE	=	0
000000r 2               TRUE	=	1
000000r 2               
000000r 2               .define	VGC	TRUE	;virtual game controllers
000000r 2               .define	RAMSYS	FALSE	;not RAM based system
000000r 2               .define	LNBUG	FALSE	;no LNBUG interface
000000r 2               .define	ACMI	FALSE	;no asynchronous communications mod:
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Identification Equates
000000r 2               
000000r 2               
000000r 2               IDREV	=	$02	;identification revision number
000000r 2               IDDAY	=	$10	;identification day
000000r 2               IDMON	=	$05	;identification month
000000r 2               IDYEAR	=	$83	;identification year
000000r 2               IDCPU	=	$02	;identification CPU series
000000r 2               IDPN1	=	'B'	;identification part number field 1
000000r 2               IDPN2	=	'B'	;identification part number field 2
000000r 2               IDPN3	=	$00	;identification part number field 3
000000r 2               IDPN4	=	$00	;identification part number field 4
000000r 2               IDPN5	=	$01	;identification part number field 5
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Configuration Equates
000000r 2               ;*
000000r 2               ;*	NOTES
000000r 2               ;*		Problem: last byte of HATABS (as defined by:
000000r 2               ;*		overlaps first power-up validation byte.
000000r 2               
000000r 2               
000000r 2               MAXDEV	=	33	;offset to last possible entry of HATABS
000000r 2               IOCBSZ	=	16	;length of IOCB
000000r 2               
000000r 2               SEIOCB	=	0*IOCBSZ	;screen editor IOCB index
000000r 2               MAXIOC	=	8*IOCBSZ	;first invalid IOCB index
000000r 2               
000000r 2               DSCTSZ	=	128	;disk sector size
000000r 2               
000000r 2               LEDGE	=	2	;left edge
000000r 2               REDGE	=	39	;right edge
000000r 2               
000000r 2               INIML	=	$0700	;initial MEMLO
000000r 2               
000000r 2               ICSORG	=	$CC00	;international character set origin
000000r 2               DCSORG	=	$E000	;domestic character set origin
000000r 2               ;	SPACE	4,10
000000r 2               ;**	IOCB Command Code Equates
000000r 2               
000000r 2               
000000r 2               OPEN	=	$03	;open
000000r 2               GETREC	=	$05	;get record
000000r 2               GETCHR	=	$07	;get character(s)
000000r 2               PUTREC	=	$09	;put record
000000r 2               PUTCHR	=	$0B	;put character(s)
000000r 2               CLOSE	=	$0C	;close
000000r 2               STATIS	=	$0D	;status
000000r 2               SPECIL	=	$0E	;special
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Special Entry Command Equates
000000r 2               
000000r 2               
000000r 2               ;	Screen Commands
000000r 2               
000000r 2               DRAWLN	=	$11	;draw line
000000r 2               FILLIN	=	$12	;draw line with right fill
000000r 2               ;	SPACE	4,10
000000r 2               ;**	ICAX1 Auxiliary Byte 1 Equates
000000r 2               
000000r 2               
000000r 2               APPEND	=	$01	;open write append (D:) or screen read (E:)
000000r 2               DIRECT	=	$02	;open for directory access (D:)
000000r 2               OPNIN	=	$04	;open for input (all devices)
000000r 2               OPNOT	=	$08	;open for output (all devices)
000000r 2               MXDMOD	=	$10	;open for mixed mode (E:, S:)
000000r 2               INSCLR	=	$20	;open for input without clearing screen (E:, S:)
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Device Code Equates
000000r 2               
000000r 2               
000000r 2               CASSET	=	'C'	;cassette
000000r 2               DISK	=	'D'	;disk
000000r 2               SCREDT	=	'E'	;screen editor
000000r 2               KBD	=	'K'	;keyboard
000000r 2               PRINTR	=	'P'	;printer
000000r 2               DISPLY	=	'S'	;screen display
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Character and Key Code Equates
000000r 2               
000000r 2               
000000r 2               CLS	=	$7D	;clear screen
000000r 2               EOL	=	$9B	;end of line (RETURN)
000000r 2               
000000r 2               HELP	=	$11	;key code for HELP
000000r 2               CNTLF1	=	$83	;key code for CTRL-F1
000000r 2               CNTLF2	=	$84	;key code for CTRL-F2
000000r 2               CNTLF3	=	$93	;key code for CTRL-F3
000000r 2               CNTLF4	=	$94	;key code for CTRL-F4
000000r 2               CNTL1	=	$9F	;key code for CTRL-1
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Status Code Equates
000000r 2               
000000r 2               
000000r 2               SUCCES	=	1	;successful operation
000000r 2               
000000r 2               BRKABT	=	128	;BREAK key abort
000000r 2               PRVOPN	=	129	;IOCB already open error
000000r 2               NONDEV	=	130	;nonexistent device error
000000r 2               WRONLY	=	131	;IOCB opened for write only error
000000r 2               NVALID	=	132	;invalid command error
000000r 2               NOTOPN	=	133	;device/file not open error
000000r 2               BADIOC	=	134	;invalid IOCB index error
000000r 2               RDONLY	=	135	;IOCB opened for read only error
000000r 2               EOFERR	=	136	;end of file error
000000r 2               TRNRCD	=	137	;truncated record error
000000r 2               TIMOUT	=	138	;peripheral device timeout error
000000r 2               DNACK	=	139	;device does not acknowledge command error
000000r 2               FRMERR	=	140	;serial bus framing error
000000r 2               CRSROR	=	141	;cursor overrange error
000000r 2               OVRRUN	=	142	;serial bus data overrun error
000000r 2               CHKERR	=	143	;serial bus checksum error
000000r 2               DERROR	=	144	;device done (operation incomplete) error
000000r 2               BADMOD	=	145	;bad screen mode number error
000000r 2               FNCNOT	=	146	;function not implemented in handler error
000000r 2               SCRMEM	=	147	;insufficient memory for screen mode error
000000r 2               
000000r 2               ;**	DCB Device Bus ID Equates
000000r 2               
000000r 2               
000000r 2               DISKID	=	$31	;disk bus ID
000000r 2               PDEVN	=	$40	;printer bus ID
000000r 2               CASET	=	$60	;cassette bus ID
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Bus Command Equates
000000r 2               
000000r 2               
000000r 2               FOMAT	=	'!'	;format command
000000r 2               PUTSEC	=	'P'	;put sector command
000000r 2               READ	=	'R'	;read command
000000r 2               STATC	=	'S'	;status command
000000r 2               WRITE	=	'W'	;write command
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Command Auxiliary Byte Equates
000000r 2               
000000r 2               
000000r 2               DOUBLE	=	'D'	;print 20 characters double width
000000r 2               NORMAL	=	'N'	;print 40 characters normally
000000r 2               PLOT	=	'P'	;plot
000000r 2               SIDWAY	=	'S'	;print 16 characters sideways
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Bus Response Equates
000000r 2               
000000r 2               
000000r 2               ACK	=	'A'	;device acknowledged
000000r 2               COMPLT	=	'C'	;device successfully completed operation
000000r 2               ERROR	=	'E'	;device incurred error in attempted operation
000000r 2               NACK	=	'N'	;device did not understand
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Miscellaneous Equates
000000r 2               
000000r 2               
000000r 2               FPREC	=	6	;precision
000000r 2               
000000r 2               FMPREC	=	FPREC-1	;length of mantissa
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Cassette Record Type Equates
000000r 2               
000000r 2               
000000r 2               HDR	=	$FB	;header
000000r 2               DTA	=	$FC	;data record
000000r 2               DT1	=	$FA	;last data record
000000r 2               EOT	=	$FE	;end of tape (file)
000000r 2               
000000r 2               TONE1	=	2	;record
000000r 2               TONE2	=	1	;playback
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Cassette Timing Equates
000000r 2               
000000r 2               
000000r 2               WLEADN	=	1152	;NTSC 19.2 second WRITE file leader
000000r 2               RLEADN	=	576	;NTSC 9.6 second READ file leader
000000r 2               WIRGLN	=	180	;NTSC 3.0 second WRITE IRG
000000r 2               RIRGLN	=	120	;NTSC 2.0 second READ IRG
000000r 2               WSIRGN	=	15	;NTSC 0.25 second WRITE short IRG
000000r 2               RSIRGN	=	10	;NTSC 0.16 second READ short IRG
000000r 2               BEEPNN	=	30	;NTSC 0.5 second beep duration
000000r 2               BEEPFN	=	10	;NTSC 0.16 second beep separation
000000r 2               
000000r 2               WLEADP	=	960	;PAL 19.2 second WRITE file leader
000000r 2               RLEADP	=	480	;PAL 9.6 second READ file leader
000000r 2               WIRGLP	=	150	;PAL 3.0 second WRITE IRG
000000r 2               RIRGLP	=	100	;PAL 2.0 second READ IRG
000000r 2               WSIRGP	=	13	;PAL 0.25 second WRITE short IRG
000000r 2               RSIRGP	=	8	;PAL 0.16 second READ short IRG
000000r 2               BEEPNP	=	25	;PAL 0.5 second beep duration
000000r 2               BEEPFP	=	8	;PAL 0.16 second beep separation
000000r 2               
000000r 2               WIRGHI	=	0	;high WRITE IRG
000000r 2               RIRGHI	=	0	;high READ IRG
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Power-up Validation Byte Value Equates
000000r 2               
000000r 2               
000000r 2               PUPVL1	=	$5C	;power-up validation value 1
000000r 2               PUPVL2	=	$93	;power-up validation value 2
000000r 2               PUPVL3	=	$25	;power-up validation value 3
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Relocating Loader Miscellaneous Equates
000000r 2               
000000r 2               
000000r 2               DATAER	=	156	;end of record appears before END r:
000000r 2               MEMERR	=	157	;memory insufficient for load error
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Miscellaneous Equates
000000r 2               
000000r 2               
000000r 2               IOCFRE	=	$FF	;IOCB free indicator
000000r 2               
000000r 2               B19200	=	$0028	;19200 baud POKEY counter value
000000r 2               B00600	=	$05CC	;600 baud POKEY counter value
000000r 2               
000000r 2               HITONE	=	$05	;FSK high freq. POKEY counter value (5326 Hz)
000000r 2               LOTONE	=	$07	;FSK low freq. POKEY counter value (3995 Hz)
000000r 2               
000000r 2               NCOMLO	=	$34	;PIA lower NOT COMMAND line command
000000r 2               NCOMHI	=	$3C	;PIA raise NOT COMMAND line command
000000r 2               
000000r 2               MOTRGO	=	$34	;PIA cassette motor ON command
000000r 2               MOTRST	=	$3C	;PIA cassette motor OFF command
000000r 2               
000000r 2               NODAT	=	$00	;SIO immediate operation
000000r 2               GETDAT	=	$40	;SIO read data frame
000000r 2               PUTDAT	=	$80	;SIO write data frame
000000r 2               
000000r 2               CRETRI	=	13	;number of command frame retries
000000r 2               DRETRI	=	1	;number of device retries
000000r 2               CTIM	=	2	;command frame ACK timeout
000000r 2               
000000r 2               NBUFSZ	=	40	;print normal buffer size
000000r 2               DBUFSZ	=	20	;print double buffer size
000000r 2               SBUFSZ	=	29	;print sideways buffer size
000000r 2               ;	SUBTTL	'System Address Equates'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Zero Address Equates
000000r 2               
000000r 2               
000000r 2               LNFLG	=	$0000	;1-byte LNBUG flag (0 = not LNBUG)
000000r 2               NGFLAG	=	$0001	;1-byte memory status (0 = failure)
000000r 2               
000000r 2               ;	Not Cleared
000000r 2               
000000r 2               ;CASINI	=	$0002	;2-byte cassette program initialization address
000000r 2               ;RAMLO	=	$0004	;2-byte RAM address for memory test
000000r 2               ;TRAMSZ	=	$0006	;1-byte RAM size temporary
000000r 2               ;CMCMD	=	$0007	;1-byte command communications
000000r 2               
000000r 2               ;	Cleared upon Coldstart Only
000000r 2               
000000r 2               ;WARMST	=	$0008	;1-byte warmstart flag (0 = coldstart)
000000r 2               ;BOOT	=	$0009	;1-byte successful boot flags
000000r 2               DOSVEC	=	$000A	;2-byte disk program start vector
000000r 2               DOSINI	=	$000C	;2-byte disk program initialization address
000000r 2               ;APPMHI	=	$000E	;2-byte applications memory high limit
000000r 2               
000000r 2               ;	Cleared upon Coldstart or Warmstart
000000r 2               
000000r 2               ;INTZBS	=	$0010	;first page zero location to clear
000000r 2               
000000r 2               ;POKMSK	=	$0010	;1-byte IRQEN shadow
000000r 2               ;BRKKEY	=	$0011	;1-byte BREAK key flag (0 = no BREAK)
000000r 2               ;RTCLOK	=	$0012	;3-byte real time clock (16 millisecond units)
000000r 2               ;BUFADR	=	$0015	;2-byte disk interface buffer address
000000r 2               ICCOMT	=	$0017	;1-byte CIO command table index
000000r 2               ;DSKFMS	=	$0018	;2-byte DOS File Management System pointer
000000r 2               ;DSKUTL	=	$001A	;2-byte DOS utility pointer
000000r 2               ;ABUFPT	=	$001C	;4-byte ACMI buffer pointer area
000000r 2               
000000r 2               ZIOCB	=	$0020	;address of page zero IOCB
000000r 2               IOCBAS	=	$0020	;16-byte page zero IOCB
000000r 2               ICHIDZ	=	$0020	;1-byte handler ID ($FF = IOCB free)
000000r 2               ICDNOZ	=	$0021	;1-byte device number
000000r 2               ICCOMZ	=	$0022	;1-byte command code
000000r 2               ICSTAZ	=	$0023	;1-byte status of last action
000000r 2               ICBALZ	=	$0024	;1-byte low buffer address
000000r 2               ICBAHZ	=	$0025	;1-byte high buffer address
000000r 2               ICPTLZ	=	$0026	;1-byte low PUT-BYTE routine address-1
000000r 2               ICPTHZ	=	$0027	;1-byte high PUT-BYTE routine address-1
000000r 2               ICBLLZ	=	$0028	;1-byte low buffer length
000000r 2               ICBLHZ	=	$0029	;1-byte high buffer length
000000r 2               ICAX1Z	=	$002A	;1-byte first auxiliary information
000000r 2               ICAX2Z	=	$002B	;1-byte second auxiliary information
000000r 2               ICSPRZ	=	$002C	;4-byte spares
000000r 2               
000000r 2               ENTVEC	=	$002C	;2-byte (not used)
000000r 2               ICIDNO	=	$002E	;1-byte IOCB index (IOCB number times IOCBSZ)
000000r 2               CIOCHR	=	$002F	;1-byte character for current CIO operation
000000r 2               
000000r 2               STATUS	=	$0030	;1-byte SIO operation status
000000r 2               CHKSUM	=	$0031	;1-byte checksum (single byte sum with carry)
000000r 2               BUFRLO	=	$0032	;1-byte low data buffer address
000000r 2               BUFRHI	=	$0033	;1-byte high data buffer address
000000r 2               BFENLO	=	$0034	;1-byte low data buffer end address
000000r 2               BFENHI	=	$0035	;1-byte high data buffer end address
000000r 2               LTEMP	=	$0036	;2-byte relocating loader temporary
000000r 2               BUFRFL	=	$0038	;1-byte data buffer full flag (0 = not full)
000000r 2               RECVDN	=	$0039	;1-byte receive-frame done flag (0 = not done)
000000r 2               XMTDON	=	$003A	;1-byte transmit-frame done flag (0 = not done)
000000r 2               CHKSNT	=	$003B	;1-byte checksum sent flag (0 = not sent)
000000r 2               NOCKSM	=	$003C	;1-byte no checksum follows data flag (0 = does)
000000r 2               BPTR	=	$003D	;1-byte cassette buffer pointer
000000r 2               FTYPE	=	$003E	;1-byte cassette IRG type (neg. = continuous)
000000r 2               FEOF	=	$003F	;1-byte cassette EOF flag (0 = no EOF)
000000r 2               FREQ	=	$0040	;1-byte cassette beep counter
000000r 2               SOUNDR	=	$0041	;1-byte noisy I/O flag (0 = quiet)
000000r 2               
000000r 2               CRITIC	=	$0042	;1-byte critical section flag (0 = not critical)
000000r 2               
000000r 2               FMSZPG	=	$0043	;7-byte reserved for DOS File Management System
000000r 2               
000000r 2               ZCHAIN	=	$004A	;2-byte handler linkage chain point:
000000r 2               DSTAT	=	$004C	;1-byte display status
000000r 2               ATRACT	=	$004D	;1-byte attract-mode timer and flag
000000r 2               DRKMSK	=	$004E	;1-byte attract-mode dark (luminance) mask
000000r 2               COLRSH	=	$004F	;1-byte attract-mode color shift
000000r 2               TMPCHR	=	$0050	;1-byte	temporary character
000000r 2               HOLD1	=	$0051	;1-byte	temporary
000000r 2               LMARGN	=	$0052	;1-byte text column left margin
000000r 2               RMARGN	=	$0053	;1-byte text column right margin
000000r 2               ROWCRS	=	$0054	;1-byte cursor row
000000r 2               COLCRS	=	$0055	;2-byte cursor column
000000r 2               DINDEX	=	$0057	;1-byte display mode
000000r 2               SAVMSC	=	$0058	;2-byte saved memory scan counter
000000r 2               OLDROW	=	$005A	;1-byte prior row
000000r 2               OLDCOL	=	$005B	;2-byte prior column
000000r 2               OLDCHR	=	$005D	;1-byte saved character under cursor
000000r 2               OLDADR	=	$005E	;2-byte saved cursor memory address
000000r 2               FKDEF	=	$0060	;2-byte function key definition tab:
000000r 2               PALNTS	=	$0062	;1-byte PAL/NTSC indicator (0 = NTS:
000000r 2               LOGCOL	=	$0063	;1-byte logical line cursor column
000000r 2               ADRESS	=	$0064	;2-byte temporary address
000000r 2               
000000r 2               MLTTMP	=	$0066	;1-byte temporary
000000r 2               OPNTMP	=	$0066	;1-byte open temporary
000000r 2               TOADR	=	$0066	;2-byte destination address
000000r 2               
000000r 2               SAVADR	=	$0068	;2-byte saved address
000000r 2               FRMADR	=	$0068	;2-byte source address
000000r 2               
000000r 2               RAMTOP	=	$006A	;1-byte RAM size
000000r 2               BUFCNT	=	$006B	;1-byte buffer count (logical line size)
000000r 2               BUFSTR	=	$006C	;2-byte buffer start pointer
000000r 2               BITMSK	=	$006E	;1-byte bit mask for bit map operation
000000r 2               SHFAMT	=	$006F	;1-byte shift amount for pixel justification
000000r 2               ROWAC	=	$0070	;2-byte draw working row
000000r 2               COLAC	=	$0072	;2-byte draw working column
000000r 2               ENDPT	=	$0074	;2-byte end point
000000r 2               DELTAR	=	$0076	;1-byte row difference
000000r 2               DELTAC	=	$0077	;2-byte column difference
000000r 2               KEYDEF	=	$0079	;2-byte key definition table addres:
000000r 2               SWPFLG	=	$007B	;1-byte split screen swap flag (0 = not swapped)
000000r 2               HOLDCH	=	$007C	;1-byte temporary character
000000r 2               INSDAT	=	$007D	;1-byte temporary
000000r 2               COUNTR	=	$007E	;2-byte draw iteration count
000000r 2               
000000r 2               ;	Reserved for Application and Floating Point Package
000000r 2               
000000r 2               ;	=	$0080	;128 bytes reserved for application and FPP
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Page Zero Address Equates
000000r 2               
000000r 2               
000000r 2               FR0	=	$00D4	;6-byte register 0
000000r 2               FR0M	=	$00D5	;5-byte register 0 mantissa
000000r 2               QTEMP	=	$00D9	;1-byte temporary
000000r 2               
000000r 2               FRE	=	$00DA	;6-byte (internal) register E
000000r 2               
000000r 2               FR1	=	$00E0	;6-byte register 1
000000r 2               FR1M	=	$00E1	;5-byte register 1 mantissa
000000r 2               
000000r 2               FR2	=	$00E6	;6-byte (internal) register 2
000000r 2               
000000r 2               FRX	=	$00EC	;1-byte temporary
000000r 2               
000000r 2               EEXP	=	$00ED	;1-byte value of exponent
000000r 2               
000000r 2               FRSIGN	=	$00EE	;1-byte floating point sign
000000r 2               NSIGN	=	$00EE	;1-byte sign of number
000000r 2               
000000r 2               PLYCNT	=	$00EF	;1-byte polynomial degree
000000r 2               ESIGN	=	$00EF	;1-byte sign of exponent
000000r 2               
000000r 2               SGNFLG	=	$00F0	;1-byte sign flag
000000r 2               FCHFLG	=	$00F0	;1-byte first character flag
000000r 2               
000000r 2               XFMFLG	=	$00F1	;1-byte transform flag
000000r 2               DIGRT	=	$00F1	;1-byte number of digits after decimal point
000000r 2               
000000r 2               CIX	=	$00F2	;1-byte current input index
000000r 2               INBUFF	=	$00F3	;2-byte line input buffer
000000r 2               
000000r 2               ZTEMP1	=	$00F5	;2-byte temporary
000000r 2               ZTEMP4	=	$00F7	;2-byte temporary
000000r 2               ZTEMP3	=	$00F9	;2-byte temporary
000000r 2               
000000r 2               FLPTR	=	$00FC	;2-byte floating point number pointer
000000r 2               FPTR2	=	$00FE	;2-byte floating point number pointer
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page One (Stack) Address Equates
000000r 2               
000000r 2               
000000r 2               ;	=	$0100	;256-byte stack
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Two Address Equates
000000r 2               
000000r 2               
000000r 2               INTABS	=	$0200	;42-byte interrupt handler table
000000r 2               
000000r 2               VDSLST	=	$0200	;2-byte display list NMI vector
000000r 2               VPRCED	=	$0202	;2-byte serial I/O proceed line IRQ vector
000000r 2               VINTER	=	$0204	;2-byte serial I/O interrupt line IRQ vector
000000r 2               VBREAK	=	$0206	;2-byte BRK instruction IRQ vector
000000r 2               VKEYBD	=	$0208	;2-byte keyboard IRQ vector
000000r 2               VSERIN	=	$020A	;2-byte serial input ready IRQ vector
000000r 2               VSEROR	=	$020C	;2-byte serial output ready IRQ vector
000000r 2               VSEROC	=	$020E	;2-byte serial output complete IRQ vector
000000r 2               VTIMR1	=	$0210	;2-byte POKEY timer 1 IRQ vector
000000r 2               VTIMR2	=	$0212	;2-byte POKEY timer 2 IRQ vector
000000r 2               VTIMR4	=	$0214	;2-byte POKEY timer 4 IRQ vector
000000r 2               VIMIRQ	=	$0216	;2-byte immediate IRQ vector
000000r 2               CDTMV1	=	$0218	;2-byte countdown timer 1 value
000000r 2               CDTMV2	=	$021A	;2-byte countdown timer 2 value
000000r 2               CDTMV3	=	$021C	;2-byte countdown timer 3 value
000000r 2               CDTMV4	=	$021E	;2-byte countdown timer 4 value
000000r 2               CDTMV5	=	$0220	;2-byte countdown timer 5 value
000000r 2               VVBLKI	=	$0222	;2-byte immediate VBLANK NMI vector
000000r 2               VVBLKD	=	$0224	;2-byte deferred VBLANK NMI vector
000000r 2               CDTMA1	=	$0226	;2-byte countdown timer 1 vector
000000r 2               CDTMA2	=	$0228	;2-byte countdown timer 2 vector
000000r 2               
000000r 2               CDTMF3	=	$022A	;1-byte countdown timer 3 flag (0 = expired)
000000r 2               SRTIMR	=	$022B	;1-byte software key repeat timer
000000r 2               CDTMF4	=	$022C	;1-byte countdown timer 4 flag (0 = expired)
000000r 2               INTEMP	=	$022D	;1-byte temporary
000000r 2               CDTMF5	=	$022E	;1-byte countdown timer 5 flag (0 = expired)
000000r 2               SDMCTL	=	$022F	;1-byte DMACTL shadow
000000r 2               SDLSTL	=	$0230	;1-byte DLISTL shadow
000000r 2               SDLSTH	=	$0231	;1-byte DLISTH shadow
000000r 2               SSKCTL	=	$0232	;1-byte SKCTL shadow
000000r 2               LCOUNT	=	$0233	;1-byte relocating loader record le:
000000r 2               LPENH	=	$0234	;1-byte light pen horizontal value
000000r 2               LPENV	=	$0235	;1-byte light pen vertical value
000000r 2               BRKKY	=	$0236	;2-byte BREAK key vector
000000r 2               VPIRQ	=	$0238	;2-byte parallel device IRQ vector
000000r 2               CDEVIC	=	$023A	;1-byte command frame device ID
000000r 2               CCOMND	=	$023B	;1-byte command frame command
000000r 2               CAUX1	=	$023C	;1-byte command auxiliary 1
000000r 2               CAUX2	=	$023D	;1-byte command auxiliary 2
000000r 2               
000000r 2               TEMP	=	$023E	;1-byte temporary
000000r 2               
000000r 2               ;	ASSERT	low TEMP<>$FF	;may not be the last word on a page
000000r 2               
000000r 2               ERRFLG	=	$023F	;1-byte I/O error flag (0 = no error)
000000r 2               
000000r 2               ;	ASSERT	low ERRFLG<>$FF ;may not be the last word on a page
000000r 2               
000000r 2               DFLAGS	=	$0240	;1-byte disk flags from sector 1
000000r 2               DBSECT	=	$0241	;1-byte disk boot sector count
000000r 2               BOOTAD	=	$0242	;2-byte disk boot memory address
000000r 2               COLDST	=	$0244	;1-byte coldstart flag (0 = complete)
000000r 2               RECLEN	=	$0245	;1-byte relocating loader record le:
000000r 2               DSKTIM	=	$0246	;1-byte disk format timeout
000000r 2               PDVMSK	=	$0247	;1-byte parallel device selection mask
000000r 2               SHPDVS	=	$0248	;1-byte PDVS (parallel device selec:
000000r 2               PDIMSK	=	$0249	;1-byte parallel device IRQ selection mask
000000r 2               RELADR	=	$024A	;2-byte relocating loader relative :
000000r 2               PPTMPA	=	$024C	;1-byte parallel device handler tem:
000000r 2               PPTMPX	=	$024D	;1-byte parallel device handler tem:
000000r 2               
000000r 2               ;	=	$024E	;6 bytes reserved for Atari
000000r 2               
000000r 2               ;	=	$0254	;23 bytes reserved for Atari
000000r 2               
000000r 2               CHSALT	=	$026B	;1-byte character set alternate
000000r 2               VSFLAG	=	$026C	;1-byte fine vertical scroll count
000000r 2               KEYDIS	=	$026D	;1-byte keyboard disable
000000r 2               FINE	=	$026E	;1-byte fine scrolling mode
000000r 2               GPRIOR	=	$026F	;1-byte PRIOR shadow
000000r 2               
000000r 2               PADDL0	=	$0270	;1-byte potentiometer 0
000000r 2               PADDL1	=	$0271	;1-byte potentiometer 1
000000r 2               PADDL2	=	$0272	;1-byte potentiometer 2
000000r 2               PADDL3	=	$0273	;1-byte potentiometer 3
000000r 2               PADDL4	=	$0274	;1-byte potentiometer 4
000000r 2               PADDL5	=	$0275	;1-byte potentiometer 5
000000r 2               PADDL6	=	$0276	;1-byte potentiometer 6
000000r 2               PADDL7	=	$0277	;1-byte potentiometer 7
000000r 2               
000000r 2               STICK0	=	$0278	;1-byte joystick 0
000000r 2               STICK1	=	$0279	;1-byte joystick 1
000000r 2               STICK2	=	$027A	;1-byte joystick 2
000000r 2               STICK3	=	$027B	;1-byte joystick 3
000000r 2               
000000r 2               PTRIG0	=	$027C	;1-byte paddle trigger 0
000000r 2               PTRIG1	=	$027D	;1-byte paddle trigger 1
000000r 2               PTRIG2	=	$027E	;1-byte paddle trigger 2
000000r 2               PTRIG3	=	$027F	;1-byte paddle trigger 3
000000r 2               PTRIG4	=	$0280	;1-byte paddle trigger 4
000000r 2               PTRIG5	=	$0281	;1-byte paddle trigger 5
000000r 2               PTRIG6	=	$0282	;1-byte paddle trigger 6
000000r 2               PTRIG7	=	$0283	;1-byte paddle trigger 7
000000r 2               
000000r 2               STRIG0	=	$0284	;1-byte joystick trigger 0
000000r 2               STRIG1	=	$0285	;1-byte joystick trigger 1
000000r 2               STRIG2	=	$0286	;1-byte joystick trigger 2
000000r 2               STRIG3	=	$0287	;1-byte joystick trigger 3
000000r 2               
000000r 2               HIBYTE	=	$0288	;1-byte relocating loader high byte:
000000r 2               WMODE	=	$0289	;1-byte cassette WRITE mode ($80 = writing)
000000r 2               BLIM	=	$028A	;1-byte cassette buffer limit
000000r 2               IMASK	=	$028B	;1-byte (not used)
000000r 2               JVECK	=	$028C	;2-byte jump vector or temporary
000000r 2               NEWADR	=	$028E	;2-byte relocating address
000000r 2               TXTROW	=	$0290	;1-byte split screen text cursor row
000000r 2               TXTCOL	=	$0291	;2-byte split screen text cursor column
000000r 2               TINDEX	=	$0293	;1-byte split scree text mode
000000r 2               TXTMSC	=	$0294	;2-byte split screen memory scan counter
000000r 2               TXTOLD	=	$0296	;6-byte OLDROW, OLDCOL, OLDCHR, OLDADR for text
000000r 2               CRETRY	=	$029C	;1-byte number of command frame ret:
000000r 2               HOLD3	=	$029D	;1-byte temporary
000000r 2               SUBTMP	=	$029E	;1-byte temporary
000000r 2               HOLD2	=	$029F	;1-byte (not used)
000000r 2               DMASK	=	$02A0	;1-byte display (pixel location) mask
000000r 2               TMPLBT	=	$02A1	;1-byte (not used)
000000r 2               ESCFLG	=	$02A2	;1-byte escape flag ($80 = ESC detected)
000000r 2               TABMAP	=	$02A3	;15-byte (120-bit) tab stop bit map
000000r 2               LOGMAP	=	$02B2	;8-byte (32-bit) logical line bit map
000000r 2               INVFLG	=	$02B6	;1-byte inverse video flag ($80 = inverse)
000000r 2               FILFLG	=	$02B7	;1-byte right fill flag (0 = no fill)
000000r 2               TMPROW	=	$02B8	;1-byte temporary row
000000r 2               TMPCOL	=	$02B9	;2-byte temporary column
000000r 2               SCRFLG	=	$02BB	;1-byte scroll occurence flag (0 = not occurred)
000000r 2               HOLD4	=	$02BC	;1-byte temporary
000000r 2               DRETRY	=	$02BD	;1-byte number of device retries
000000r 2               SHFLOK	=	$02BE	;1-byte shift/control lock flags
000000r 2               BOTSCR	=	$02BF	;1-byte screen bottom (24 = normal, 4 = split)
000000r 2               
000000r 2               PCOLR0	=	$02C0	;1-byte player-missle 0 color/luminance
000000r 2               PCOLR1	=	$02C1	;1-byte player-missle 1 color/luminance
000000r 2               PCOLR2	=	$02C2	;1-byte player-missle 2 color/luminance
000000r 2               PCOLR3	=	$02C3	;1-byte player-missle 3 color/luminance
000000r 2               
000000r 2               COLOR0	=	$02C4	;1-byte playfield 0 color/luminance
000000r 2               COLOR1	=	$02C5	;1-byte playfield 1 color/luminance
000000r 2               COLOR2	=	$02C6	;1-byte playfield 2 color/luminance
000000r 2               COLOR3	=	$02C7	;1-byte playfield 3 color/luminance
000000r 2               
000000r 2               COLOR4	=	$02C8	;1-byte background color/luminance
000000r 2               
000000r 2               PARMBL	=	$02C9	;6-byte relocating loader parameter:
000000r 2               RUNADR	=	$02C9	;2-byte run address
000000r 2               HIUSED	=	$02CB	;2-byte highest non-zero page addre:
000000r 2               ZHIUSE	=	$02CD	;2-byte highest zero page address
000000r 2               
000000r 2               OLDPAR	=	$02CF	;6-byte relocating loader parameter:
000000r 2               GBYTEA	=	$02CF	;2-byte GET-BYTE routine address
000000r 2               LOADAD	=	$02D1	;2-byte non-zero page load address
000000r 2               ZLOADA	=	$02D3	;2-byte zero page load address
000000r 2               
000000r 2               DSCTLN	=	$02D5	;2-byte disk sector length
000000r 2               ACMISR	=	$02D7	;2-byte ACMI interrupt service rout:
000000r 2               KRPDEL	=	$02D9	;1-byte auto-repeat delay
000000r 2               KEYREP	=	$02DA	;1-byte auto-repeat rate
000000r 2               NOCLIK	=	$02DB	;1-byte key click disable
000000r 2               HELPFG	=	$02DC	;1-byte HELP key flag (0 = no HELP)
000000r 2               DMASAV	=	$02DD	;1-byte SDMCTL save/restore
000000r 2               PBPNT	=	$02DE	;1-byte printer buffer pointer
000000r 2               PBUFSZ	=	$02DF	;1-byte printer buffer size
000000r 2               
000000r 2               ;	=	$02E0	;4 bytes reserved for DOS
000000r 2               
000000r 2               RAMSIZ	=	$02E4	;1-byte high RAM size
000000r 2               MEMTOP	=	$02E5	;2-byte top of available user memory
000000r 2               MEMLO	=	$02E7	;2-byte bottom of available user memory
000000r 2               HNDLOD	=	$02E9	;1-byte user load flag (0 = no hand:
000000r 2               DVSTAT	=	$02EA	;4-byte device status buffer
000000r 2               CBAUDL	=	$02EE	;1-byte low cassette baud rate
000000r 2               CBAUDH	=	$02EF	;1-byte high cassette baud rate
000000r 2               CRSINH	=	$02F0	;1-byte cursor inhibit (0 = cursor on)
000000r 2               KEYDEL	=	$02F1	;1-byte key debounce delay timer
000000r 2               CH1	=	$02F2	;1-byte prior keyboard character
000000r 2               CHACT	=	$02F3	;1-byte CHACTL shadow
000000r 2               CHBAS	=	$02F4	;1-byte CHBASE shadow
000000r 2               
000000r 2               NEWROW	=	$02F5	;1-byte draw destination row
000000r 2               NEWCOL	=	$02F6	;2-byte draw destination column
000000r 2               ROWINC	=	$02F8	;1-byte draw row increment
000000r 2               COLINC	=	$02F9	;1-byte	draw column increment
000000r 2               
000000r 2               CHAR	=	$02FA	;1-byte internal character
000000r 2               ATACHR	=	$02FB	;1-byte ATASCII character or plot point
000000r 2               CH	=	$02FC	;1-byte keyboard code (buffer)
000000r 2               FILDAT	=	$02FD	;1-byte right fill data
000000r 2               DSPFLG	=	$02FE	;1-byte control character display flag (0 = no)
000000r 2               SSFLAG	=	$02FF	;1-byte start/stop flag (0 = not stopped)
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Three Address Equates
000000r 2               
000000r 2               
000000r 2               DCB	=	$0300	;12-byte device control block
000000r 2               DDEVIC	=	$0300	;1-byte unit 1 bus ID
000000r 2               DUNIT	=	$0301	;1-byte unit number
000000r 2               DCOMND	=	$0302	;1-byte bus command
000000r 2               DSTATS	=	$0303	;1-byte command type/status return
000000r 2               DBUFLO	=	$0304	;1-byte low data buffer address
000000r 2               DBUFHI	=	$0305	;1-byte high data buffer address
000000r 2               DTIMLO	=	$0306	;1-byte timeout (seconds)
000000r 2               DUNUSE	=	$0307	;1-byte (not used)
000000r 2               DBYTLO	=	$0308	;1-byte low number of bytes to transfer
000000r 2               DBYTHI	=	$0309	;1-byte high number of bytes to transfer
000000r 2               DAUX1	=	$030A	;1-byte first command auxiliary
000000r 2               DAUX2	=	$030B	;1-byte second command auxiliary
000000r 2               
000000r 2               TIMER1	=	$030C	;2-byte initial baud rate timer value
000000r 2               JMPERS	=	$030E	;1-byte jumper options
000000r 2               CASFLG	=	$030F	;1-byte cassette I/O flag (0 = not cassette I/O)
000000r 2               TIMER2	=	$0310	;2-byte final baud rate timer value
000000r 2               TEMP1	=	$0312	;2-byte temporary
000000r 2               TEMP2	=	$0313	;1-byte temporary
000000r 2               PTIMOT	=	$0314	;1-byte printer timeout
000000r 2               TEMP3	=	$0315	;1-byte temporary
000000r 2               SAVIO	=	$0316	;1-byte saved serial data input indicator
000000r 2               TIMFLG	=	$0317	;1-byte timeout flag (0 = timeout)
000000r 2               STACKP	=	$0318	;1-byte SIO saved stack pointer
000000r 2               TSTAT	=	$0319	;1-byte temporary status
000000r 2               
000000r 2               HATABS	=	$031A	;35-byte handler address table
000000r 2               
000000r 2               PUPBT1	=	$033D	;1-byte power-up validation byte 1
000000r 2               PUPBT2	=	$033E	;1-byte power-up validation byte 2
000000r 2               PUPBT3	=	$033F	;1-byte power-up validation byte 3
000000r 2               
000000r 2               IOCB	=	$0340	;128-byte I/O control blocks area
000000r 2               ICHID	=	$0340	;1-byte handler ID ($FF = free)
000000r 2               ICDNO	=	$0341	;1-byte device number
000000r 2               ICCOM	=	$0342	;1-byte command code
000000r 2               ICSTA	=	$0343	;1-byte status of last action
000000r 2               ICBAL	=	$0344	;1-byte low buffer address
000000r 2               ICBAH	=	$0345	;1-byte high buffer address
000000r 2               ICPTL	=	$0346	;1-byte low PUT-BYTE routine address-1
000000r 2               ICPTH	=	$0347	;1-byte high PUT-BYTE routine address-1
000000r 2               ICBLL	=	$0348	;1-byte low buffer length
000000r 2               ICBLH	=	$0349	;1-byte high buffer length
000000r 2               ICAX1	=	$034A	;1-byte first auxiliary information
000000r 2               ICAX2	=	$034B	;1-byte second auxiliary information
000000r 2               ICSPR	=	$034C	;4-byte work area
000000r 2               
000000r 2               PRNBUF	=	$03C0	;40-byte printer buffer
000000r 2               SUPERF	=	$03E8	;1-byte editor super function flag :
000000r 2               CKEY	=	$03E9	;1-byte cassette boot r=est flag :
000000r 2               CASSBT	=	$03EA	;1-byte cassette boot flag (0 = not:
000000r 2               CARTCK	=	$03EB	;1-byte cartridge =ivalence checksum
000000r 2               DERRF	=	$03EC	;1-byte screen OPEN error flag (0 = not)
000000r 2               
000000r 2               ;	Remainder of Page Three Not Cleared upon Reset
000000r 2               
000000r 2               ACMVAR	=	$03ED	;11 bytes reserved for ACMI
000000r 2               BASICF	=	$03F8	;1-byte BASIC switch flag (0 = BASIC enabled)
000000r 2               MINTLK	=	$03F9	;1-byte ACMI module interlock
000000r 2               GINTLK	=	$03FA	;1-byte cartridge interlock
000000r 2               CHLINK	=	$03FB	;2-byte loaded handler chain link
000000r 2               CASBUF	=	$03FD	;3-byte first 3 bytes of cassette buffer
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Four Address Equates
000000r 2               
000000r 2               
000000r 2               ;	=	$0400	;128-byte remainder of cassette buffer
000000r 2               
000000r 2               ;	Reserved for Application
000000r 2               
000000r 2               	.IF PLATFORM<>1
000000r 2               
000000r 2               USAREA	=	$0480	;128 bytes reserved for application
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Five Address Equates
000000r 2               
000000r 2               
000000r 2               ;	Reserved for Application and Floating Point Package
000000r 2               
000000r 2               ;	=	$0500	;256 bytes reserved for application and FPP
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Address Equates
000000r 2               
000000r 2               
000000r 2               LBPR1	=	$057E	;1-byte LBUFF preamble
000000r 2               LBPR2	=	$057F	;1-byte LBUFF preamble
000000r 2               LBUFF	=	$0580	;128-byte line buffer
000000r 2               
000000r 2               PLYARG	=	$05E0	;6-byte floating point polynomial argument
000000r 2               FPSCR	=	$05E6	;6-byte floating point temporary
000000r 2               FPSCR1	=	$05EC	;6-byte floating point temporary
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Page Six Address Equates
000000r 2               
000000r 2               
000000r 2               ;	Reserved for Application
000000r 2               
000000r 2               ;	=	$0600	;256 bytes reserved for application
000000r 2               ;	SPACE	4,10
000000r 2               ;**	LNBUG Address Equates
000000r 2               
000000r 2               
000000r 2               ;	IF	LNBUG
000000r 2               ;LNORG	=	$6000	;LNBUG origin
000000r 2               ;LNIRQ	=	$6033	;LNBUG IRQ entry
000000r 2               ;LNNMI	=	$8351	;LNBUG NMI vector
000000r 2               ;	ENDIF	;LNBUG
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Cartridge Address Equates
000000r 2               
000000r 2               
000000r 2               CARTCS	=	$BFFA	;2-byte cartridge coldstart address
000000r 2               CART	=	$BFFC	;1-byte cartridge present indicator
000000r 2               CARTFG	=	$BFFD	;1-byte cartridge flags
000000r 2               CARTAD	=	$BFFE	;2-byte cartridge start vector
000000r 2               ;	SPACE	4,10
000000r 2               ;**	CTIA/GTIA Address Equates
000000r 2               
000000r 2               
000000r 2               CTIA	=	$D000	;CTIA/GTIA area
000000r 2               
000000r 2               ;	Read/Write Addresses
000000r 2               
000000r 2               CONSOL	=	$D01F	;console switches and speaker control
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               M0PF	=	$D000	;missle 0 and playfield collision
000000r 2               M1PF	=	$D001	;missle 1 and playfield collision
000000r 2               M2PF	=	$D002	;missle 2 and playfield collision
000000r 2               M3PF	=	$D003	;missle 3 and playfield collision
000000r 2               
000000r 2               P0PF	=	$D004	;player 0 and playfield collision
000000r 2               P1PF	=	$D005	;player 1 and playfield collision
000000r 2               P2PF	=	$D006	;player 2 and playfield collision
000000r 2               P3PF	=	$D007	;player 3 and playfield collision
000000r 2               
000000r 2               M0PL	=	$D008	;missle 0 and player collision
000000r 2               M1PL	=	$D009	;missle 1 and player collision
000000r 2               M2PL	=	$D00A	;missle 2 and player collision
000000r 2               M3PL	=	$D00B	;missle 3 and player collision
000000r 2               
000000r 2               P0PL	=	$D00C	;player 0 and player collision
000000r 2               P1PL	=	$D00D	;player 1 and player collision
000000r 2               P2PL	=	$D00E	;player 2 and player collision
000000r 2               P3PL	=	$D00F	;player 3 and player collision
000000r 2               
000000r 2               TRIG0	=	$D010	;joystick trigger 0
000000r 2               TRIG1	=	$D011	;joystick trigger 1
000000r 2               
000000r 2               TRIG2	=	$D012	;cartridge interlock
000000r 2               TRIG3	=	$D013	;ACMI module interlock
000000r 2               
000000r 2               PAL	=	$D014	;PAL/NTSC indicator
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               HPOSP0	=	$D000	;player 0 horizontal position
000000r 2               HPOSP1	=	$D001	;player 1 horizontal position
000000r 2               HPOSP2	=	$D002	;player 2 horizontal position
000000r 2               HPOSP3	=	$D003	;player 3 horizontal position
000000r 2               
000000r 2               HPOSM0	=	$D004	;missle 0 horizontal position
000000r 2               HPOSM1	=	$D005	;missle 1 horizontal position
000000r 2               HPOSM2	=	$D006	;missle 2 horizontal position
000000r 2               HPOSM3	=	$D007	;missle 3 horizontal position
000000r 2               
000000r 2               SIZEP0	=	$D008	;player 0 size
000000r 2               SIZEP1	=	$D009	;player 1 size
000000r 2               SIZEP2	=	$D00A	;player 2 size
000000r 2               SIZEP3	=	$D00B	;player 3 size
000000r 2               
000000r 2               SIZEM	=	$D00C	;missle sizes
000000r 2               
000000r 2               GRAFP0	=	$D00D	;player 0 graphics
000000r 2               GRAFP1	=	$D00E	;player 1 graphics
000000r 2               GRAFP2	=	$D00F	;player 2 graphics
000000r 2               GRAFP3	=	$D010	;player 3 graphics
000000r 2               
000000r 2               GRAFM	=	$D011	;missle graphics
000000r 2               
000000r 2               COLPM0	=	$D012	;player-missle 0 color/luminance
000000r 2               COLPM1	=	$D013	;player-missle 1 color/luminance
000000r 2               COLPM2	=	$D014	;player-missle 2 color/luminance
000000r 2               COLPM3	=	$D015	;player-missle 3 color/luminance
000000r 2               
000000r 2               COLPF0	=	$D016	;playfield 0 color/luminance
000000r 2               COLPF1	=	$D017	;playfield 1 color/luminance
000000r 2               COLPF2	=	$D018	;playfield 2 color/luminance
000000r 2               COLPF3	=	$D019	;playfield 3 color/luminance
000000r 2               
000000r 2               COLBK	=	$D01A	;background color/luminance
000000r 2               
000000r 2               PRIOR	=	$D01B	;priority select
000000r 2               VDELAY	=	$D01C	;vertical delay
000000r 2               GRACTL	=	$D01D	;graphic control
000000r 2               HITCLR	=	$D01E	;collision clear
000000r 2               ;	SPACE	4,10
000000r 2               ;**	PBI Address Equates
000000r 2               
000000r 2               
000000r 2               PBI	=	$D100	;parallel bus interface area
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               PDVI	=	$D1FF	;parallel device IRQ status
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               PDVS	=	$D1FF	;parallel device select
000000r 2               ;	SPACE	4,10
000000r 2               ;**	POKEY Address Equates
000000r 2               
000000r 2               
000000r 2               POKEY	=	$D200	;POKEY area
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               POT0	=	$D200	;potentiometer 0
000000r 2               POT1	=	$D201	;potentiometer 1
000000r 2               POT2	=	$D202	;potentiometer 2
000000r 2               POT3	=	$D203	;potentiometer 3
000000r 2               POT4	=	$D204	;potentiometer 4
000000r 2               POT5	=	$D205	;potentiometer 5
000000r 2               POT6	=	$D206	;potentiometer 6
000000r 2               POT7	=	$D207	;potentiometer 7
000000r 2               
000000r 2               ALLPOT	=	$D208	;potentiometer port state
000000r 2               KBCODE	=	$D209	;keyboard code
000000r 2               RANDOM	=	$D20A	;random number generator
000000r 2               SERIN	=	$D20D	;serial port input
000000r 2               IRQST	=	$D20E	;IRQ interrupt status
000000r 2               SKSTAT	=	$D20F	;serial port and keyboard status
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               AUDF1	=	$D200	;channel 1 audio fr=ency
000000r 2               AUDC1	=	$D201	;channel 1 audio control
000000r 2               
000000r 2               AUDF2	=	$D202	;channel 2 audio fr=ency
000000r 2               AUDC2	=	$D203	;channel 2 audio control
000000r 2               
000000r 2               AUDF3	=	$D204	;channel 3 audio fr=ency
000000r 2               AUDC3	=	$D205	;channel 3 audio control
000000r 2               
000000r 2               AUDF4	=	$D206	;channel 4 audio fr=ency
000000r 2               AUDC4	=	$D207	;channel 4 audio control
000000r 2               
000000r 2               AUDCTL	=	$D208	;audio control
000000r 2               STIMER	=	$D209	;start timers
000000r 2               SKRES	=	$D20A	;reset SKSTAT status
000000r 2               POTGO	=	$D20B	;start potentiometer scan s=ence
000000r 2               SEROUT	=	$D20D	;serial port output
000000r 2               IRQEN	=	$D20E	;IRQ interrupt enable
000000r 2               SKCTL	=	$D20F	;serial port and keyboard control
000000r 2               ;	SPACE	4,10
000000r 2               ;**	PIA Address Equates
000000r 2               
000000r 2               
000000r 2               PIA	=	$D300	;PIA area
000000r 2               
000000r 2               ;	Read/Write Addresses
000000r 2               
000000r 2               PORTA	=	$D300	;port A direction register or jacks 0 and 1
000000r 2               PORTB	=	$D301	;port B direction register or memory control
000000r 2               
000000r 2               PACTL	=	$D302	;port A control
000000r 2               PBCTL	=	$D303	;port B control
000000r 2               ;	SPACE	4,10
000000r 2               ;**	ANTIC Address Equates
000000r 2               
000000r 2               
000000r 2               ANTIC	=	$D400	;ANTIC area
000000r 2               
000000r 2               ;	Read Addresses
000000r 2               
000000r 2               VCOUNT	=	$D40B	;vertical line counter
000000r 2               PENH	=	$D40C	;light pen horizontal position
000000r 2               PENV	=	$D40D	;light pen vertical position
000000r 2               NMIST	=	$D40F	;NMI interrupt status
000000r 2               
000000r 2               ;	Write Addresses
000000r 2               
000000r 2               DMACTL	=	$D400	;DMA control
000000r 2               CHACTL	=	$D401	;character control
000000r 2               DLISTL	=	$D402	;low display list address
000000r 2               DLISTH	=	$D403	;high disply list address
000000r 2               HSCROL	=	$D404	;horizontal scroll
000000r 2               VSCROL	=	$D405	;vertical scroll
000000r 2               PMBASE	=	$D407	;player-missle base address
000000r 2               CHBASE	=	$D409	;character base address
000000r 2               WSYNC	=	$D40A	;wait for HBLANK synchronization
000000r 2               NMIEN	=	$D40E	;NMI enable
000000r 2               NMIRES	=	$D40F	;NMI interrupt status reset
000000r 2               ;	SPACE	4,10
000000r 2               ;**	PBI RAM Address Equates
000000r 2               
000000r 2               
000000r 2               PBIRAM	=	$D600	;parallel bus interface RAM area
000000r 2               ;	SPACE	4,10
000000r 2               ;**	ACMI Address Equates
000000r 2               
000000r 2               
000000r 2               ;	IF	ACMI
000000r 2               ;	ENDIF	;ACMI
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Floating Point Package Address Equates
000000r 2               
000000r 2               
000000r 2               AFP	=	$D800	;convert ASCII to floating point
000000r 2               FASC	=	$D8E6	;convert floating point to ASCII
000000r 2               IFP	=	$D9AA	;convert integer to floating point
000000r 2               FPI	=	$D9D2	;convert floating point to integer
000000r 2               ZFR0	=	$DA44	;zero FR0
000000r 2               ZF1	=	$DA46	;zero floating point number
000000r 2               FSUB	=	$DA60	;subtract floating point numbers
000000r 2               FADD	=	$DA66	;add floating point numbers
000000r 2               FMUL	=	$DADB	;multiply floating point numbers
000000r 2               FDIV	=	$DB28	;divide floating point numbers
000000r 2               PLYEVL	=	$DD40	;evaluate floating point polynomial
000000r 2               FLD0R	=	$DD89	;load floating point number
000000r 2               FLD0P	=	$DD8D	;load floating point number
000000r 2               FLD1R	=	$DD98	;load floating point number
000000r 2               FLD1P	=	$DD9C	;load floating point number
000000r 2               FST0R	=	$DDA7	;store floating point number
000000r 2               FST0P	=	$DDAB	;store floating point number
000000r 2               FMOVE	=	$DDB6	;move floating point number
000000r 2               LOG	=	$DECD	;calculate floating point logarithm
000000r 2               LOG10	=	$DED1	;calculate floating point base 10 logarithm
000000r 2               EXP	=	$DDC0	;calculate floating point exponentiation
000000r 2               EXP10	=	$DDCC	;calculate floating point base 10 exponentiation
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Parallel Device Address Equates
000000r 2               
000000r 2               
000000r 2               PDID1	=	$D803	;parallel device ID 1
000000r 2               PDIOV	=	$D805	;parallel device I/O vector
000000r 2               PDIRQV	=	$D808	;parallel device IRQ vector
000000r 2               PDID2	=	$D80B	;parallel device ID 2
000000r 2               PDVV	=	$D80D	;parallel device vector table
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Device Handler Vector Table Address Equates
000000r 2               
000000r 2               
000000r 2               EDITRV	=	$E400	;editor handler vector table
000000r 2               SCRENV	=	$E410	;screen handler vector table
000000r 2               KEYBDV	=	$E420	;keyboard handler vector table
000000r 2               PRINTV	=	$E430	;printer handler vector table
000000r 2               CASETV	=	$E440	;cassette handler vector table
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Jump Vector Address Equates
000000r 2               
000000r 2               
000000r 2               DINITV	=	$E450	;vector to initialize DIO
000000r 2               DSKINV	=	$E453	;vector to DIO
000000r 2               CIOV	=	$E456	;vector to CIO
000000r 2               SIOV	=	$E459	;vector to SIO
000000r 2               SETVBV	=	$E45C	;vector to set VBLANK parameters
000000r 2               SYSVBV	=	$E45F	;vector to process immediate VBLANK NMI
000000r 2               XITVBV	=	$E462	;vector to process deferred VBLANK NMI
000000r 2               SIOINV	=	$E465	;vector to initialize SIO
000000r 2               SENDEV	=	$E468	;vector to enable SEND
000000r 2               INTINV	=	$E46B	;vector to initialize interrupt handler
000000r 2               CIOINV	=	$E46E	;vector to initialize CIO
000000r 2               BLKBDV	=	$E471	;vector to power-up display (formerly memo pad)
000000r 2               WARMSV	=	$E474	;vector to warmstart
000000r 2               COLDSV	=	$E477	;vector to coldstart
000000r 2               RBLOKV	=	$E47A	;vector to read cassette block
000000r 2               CSOPIV	=	$E47D	;vector to open cassette for input
000000r 2               PUPDIV	=	$E480	;vector to power-up display
000000r 2               SLFTSV	=	$E483	;vector to self-test
000000r 2               PHENTV	=	$E486	;vector to enter peripheral handler
000000r 2               PHUNLV	=	$E489	;vector to unlink peripheral handler
000000r 2               PHINIV	=	$E48C	;vector to initialize peripheral handler
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Generic Parallel Device Handler Vector Table Address Equates
000000r 2               
000000r 2               
000000r 2               GPDVV	=	$E48F	;generic parallel device handler vector table
000000r 2               ;	SUBTTL	'Miscellaneous Address Equates'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Self-test Page Zero Address Equates
000000r 2               
000000r 2               
000000r 2               STTIME	=	$0080	;2-byte main screen timeout timer
000000r 2               STAUT	=	$0082	;1-byte auto-mode flag
000000r 2               STJMP	=	$0083	;3-byte ANTIC jump instruction
000000r 2               STSEL	=	$0086	;1-byte selection
000000r 2               STPASS	=	$0087	;1-byte pass
000000r 2               STSPP	=	$0088	;1-byte SELECT previously pressed flag
000000r 2               ;	=	$0089	;1-byte (not used)
000000r 2               STKST	=	$008A	;1-byte keyboard self-test flag (0 = not)
000000r 2               STCHK	=	$008B	;2-byte checksum
000000r 2               STSMM	=	$008D	;1-byte screen memory mask
000000r 2               STSMP	=	$008E	;1-byte screen memory pointer
000000r 2               ST1K	=	$008F	;1-byte current 1K of memory to test
000000r 2               STPAG	=	$0090	;2-byte current page to test
000000r 2               STPC	=	$0092	;1-byte page count
000000r 2               STMVAL	=	$0093	;1-byte correct value for memory test
000000r 2               STSKP	=	$0094	;1-byte simulated keypress index
000000r 2               STTMP1	=	$0095	;2-byte temporary
000000r 2               STVOC	=	$0097	;1-byte current voice indicator
000000r 2               STNOT	=	$0098	;1-byte current note counter
000000r 2               STCDI	=	$0099	;1-byte cleft display pointer
000000r 2               STCDA	=	$009A	;1-byte cleft data pointer
000000r 2               STTMP2	=	$009B	;2-byte temporary
000000r 2               STTMP3	=	$009D	;1-byte temporary
000000r 2               STADR1	=	$009E	;2-byte temporary address
000000r 2               STADR2	=	$00A0	;2-byte temporary address
000000r 2               STBL	=	$00A2	;1-byte blink counter
000000r 2               STTMP4	=	$00A3	;1-byte temporary
000000r 2               STLM	=	$00A4	;1-byte LED mask
000000r 2               STTMP5	=	$00A5	;1-byte temporary
000000r 2               ;	SPACE	4,10
000000r 2               ;**	Self-test Address Equates
000000r 2               
000000r 2               
000000r 2               ST3000	=	$3000	;screen memory
000000r 2               ST3002	=	$3002	;cleft display
000000r 2               ST3004	=	$3004	;"VOICE #" text display
000000r 2               ST300B	=	$300B	;voice number display
000000r 2               ST301C	=	$301C	;START key display
000000r 2               ST301E	=	$301E	;SELECT key display
000000r 2               ST3020	=	$3020	;OPTION key display, first 8K ROM display
000000r 2               ST3021	=	$3021	;keyboard character display
000000r 2               ST3022	=	$3022	;keyboard text display
000000r 2               ST3024	=	$3024	;second 8K ROM display
000000r 2               ST3028	=	$3028	;"RAM" text display
000000r 2               ST3038	=	$3038	;RAM display
000000r 2               ST303C	=	$303C	;fifth note display
000000r 2               ST304C	=	$304C	;"B S" text display
000000r 2               ST3052	=	$3052	;tab key display
000000r 2               ST3062	=	$3062	;cleft display
000000r 2               ST306D	=	$306D	;return key display
000000r 2               ST3072	=	$3072	;control key display
000000r 2               ST3092	=	$3092	;"SH" text display
000000r 2               ST309E	=	$309E	;sixth note display
000000r 2               ST30AB	=	$30AB	;"SH" text display
000000r 2               ST30B7	=	$30B7	;"S P A C E   B A R" text display
000000r 2               ST30C1	=	$30C1	;cleft display
000000r 2               ST30C2	=	$30C2	;cleft display
000000r 2               ST30C7	=	$30C7	;third note display
000000r 2               ST30CA	=	$30CA	;fourth note display
000000r 2               ST30F8	=	$30F8	;third note display
000000r 2               ST3100	=	$3100	;screen memory
000000r 2               ST3121	=	$3121	;cleft display
000000r 2               ST3122	=	$3122	;cleft display
000000r 2               ST313C	=	$313C	;fifth note display
000000r 2               ST3150	=	$3150	;first line of staff display
000000r 2               ST3154	=	$3154	;first note display
000000r 2               ST3181	=	$3181	;cleft display
000000r 2               ST3182	=	$3182	;cleft display
000000r 2               ST3186	=	$3186	;second note display
000000r 2               ST318C	=	$318C	;fifth note display
000000r 2               ST31B0	=	$31B0	;second line of staff display
000000r 2               ST31C2	=	$31C2	;cleft display
000000r 2               ST31CA	=	$31CA	;fourth note display
000000r 2               ST31EE	=	$31EE	;sixth note display
000000r 2               ST31F1	=	$31F1	;cleft display
000000r 2               ST3210	=	$3210	;third line of staff display
000000r 2               ST321A	=	$321A	;fourth note display
000000r 2               ST3248	=	$3248	;third note display
000000r 2               ST3270	=	$3270	;fourth line of staff display
000000r 2               ST32D0	=	$32D0	;fifth line of staff display
000000r 2               
000000r 2               	.ENDIF
000000r 2               
000000r 2               ;	SUBTTL	'Macro Definitions'
000000r 2               ;	SPACE	4,10
000000r 2               ;**	FIX - Fix Address
000000r 2               ;*
000000r 2               ;*	FIX sets the origin counter to the value specified as an
000000r 2               ;*	argument.  If the current origin counter is less than the
000000r 2               ;*	argument, FIX fills the intervening bytes with zero and
000000r 2               ;*	issues a message to document the location and number of
000000r 2               ;*	bytes that are zero filled.
000000r 2               ;*
000000r 2               ;*	ENTRY	FIX	address
000000r 2               ;*
000000r 2               ;*
000000r 2               ;*	EXIT
000000r 2               ;*		Origin counter set to specified address.
000000r 2               ;*		Message issued if zero fill r=ired.
000000r 2               ;*
000000r 2               ;*	CHANGES
000000r 2               ;*		-none-
000000r 2               ;*
000000r 2               ;*	CALLS
000000r 2               ;*		-none-
000000r 2               ;*
000000r 2               ;*	NOTES
000000r 2               ;*		Due to ECHO limitiation of 255 iterations, FIX is
000000r 2               ;*		recursive.
000000r 2               ;*		If the current origin counter value is beyond the
000000r 2               ;*		argument, FIX generates an error.
000000r 2               ;*
000000r 2               ;*	MODS
000000r 2               ;*		R. K. Nordin	11/01/83
000000r 2               
000000r 2               
000000r 2               
000000r 2               .macro	FIX	address
000000r 2               	.if	* > address
000000r 2               	.error	.sprintf("$%04x precedes current origin counter of $%04x", address, *)
000000r 2               	.elseif * < address
000000r 2               	.out	.sprintf("$%04x free bytes from $%04x to $%04x", address-*, *, address-1)
000000r 2               	.res	address-*, $00
000000r 2               	.endif
000000r 2               .endmacro
000000r 2               ;	SUBTTL	'First 8K ROM Identification and Checksum'
000000r 2               ;	SPACE	4,10
000000r 2               ;	ORG	$C000
000000r 2               ;	SPACE	4,10
000000r 2               ;**	First 8K ROM Identification and Checksum
000000r 2               
000000r 2               
000000r 2               ;	DW	$0000				;reserved for checksum
000000r 2               ;	DB	IDDAY,IDMON,IDYEAR		;date (day, month, year)
000000r 2               ;	DB	$00				;not used
000000r 2               ;	DB	IDPN1,IDPN2,IDPN3,IDPN4,IDPN5	;part number
000000r 2               ;	DB	IDREV				;revision number
000000r 2               
000000r 2               
000000r 1               		.include "fat16.inc"
000000r 2               ;
000000r 2               ; PLATFORM = 0 : Homebrew FPGA
000000r 2               ; PLATFORM = 1 : Homebrew Hardware
000000r 2               ; PLATFORM = 2 : Atari XL/XE
000000r 2               ;
000000r 2               ;
000000r 2               ; FAT-16 defines
000000r 2               ;
000000r 2               DRVCHAR		= 'D'
000000r 2               
000000r 2               	.IF PLATFORM <= 1
000000r 2               FATPTRS		= $0006
000000r 2               FATPTRD		= $0008
000000r 2               	.ELSE
000000r 2               FATPTRS		= $0000
000000r 2               FATPTRD		= $0002
000000r 2               	.ENDIF
000000r 2               
000000r 2               ;--------------------------------------------------------------
000000r 2               ; Memory Setup
000000r 2               ;--------------------------------------------------------------
000000r 2               	.IF PLATFORM <= 1
000000r 2               VBASE		= $400
000000r 2               	.ENDIF
000000r 2               
000000r 2               ;	.IF PLATFORM = 3
000000r 2               ;VBASE		= $400
000000r 2               ;	.ENDIF
000000r 2               
000000r 2               	.IF PLATFORM = 2
000000r 2               VBASE		= $700
000000r 2               FATCODE		= VBASE+$600
000000r 2               DUPCODE		= $1C00
000000r 2               
000000r 2               JSTARTUP	= FATCODE
000000r 2               JPRINT		= FATCODE+3
000000r 2               JPUTHEX		= FATCODE+6
000000r 2               JPRINTSTR	= FATCODE+9
000000r 2               JINITFAT	= FATCODE+12
000000r 2               	.ENDIF
000000r 2               
000000r 2               V		= VBASE
000000r 2               BUFFER		= VBASE+$200
000000r 2               FATBUF		= VBASE+$400
000000r 2               
000000r 2               CRENAME		= 32
000000r 2               CDELETE		= 33
000000r 2               CCREDIR		= 34
000000r 2               CFSTAT		= 40
000000r 2               CCHADIR		= 41
000000r 2               
000000r 2               DEL		= $E5
000000r 2               EOF		= $88
000000r 2               
000000r 2               SECCLUS		= V+0		;1
000000r 2               RESSEC		= V+1		;2
000000r 2               NUMFATS		= V+3		;1
000000r 2               NUMDIR		= V+4		;2
000000r 2               NUMSECS		= V+6		;2
000000r 2               MEDIA		= V+8		;1
000000r 2               SECSFAT		= V+9		;2
000000r 2               FCBCODE		= V+11 		;1
000000r 2               
000000r 2               SECTOR		= V+12		;4
000000r 2               FATBASE		= V+16		;4
000000r 2               DIRBASE		= V+20		;4
000000r 2               DATBASE		= V+24		;4
000000r 2               LASTSEC		= V+28		;4
000000r 2               LASTFAT		= V+32		;4
000000r 2               BYTCLUS		= V+36 		;4
000000r 2               
000000r 2               BIN		= V+40 		;4
000000r 2               BCD		= V+44 		;5
000000r 2               DECIMAL		= V+49 		;10
000000r 2               
000000r 2               NEWCLUS		= V+59		;2
000000r 2               DDIRTY		= V+61 		;1
000000r 2               FDIRTY		= V+62 		;1
000000r 2               BUFADRL		= V+63 		;1
000000r 2               BUFADRH		= V+64 		;1
000000r 2               
000000r 2               DIRCLUS		= V+65		;2
000000r 2               DIRRENA		= V+67 		;11
000000r 2               
000000r 2               NODISPL		= V+78 		;1
000000r 2               WILD		= V+79 		;1
000000r 2               DIRLINE		= V+80 		;13
000000r 2               DIRLENG		= V+93 		;10
000000r 2               DIREOF		= V+103 	;1
000000r 2               SAVEY		= V+104		;1
000000r 2               VALIDS		= V+105		;1-byte number of specials chars to check for
000000r 2               HILF		= V+106		;1-byte aux usage
000000r 2               ASTART		= V+107		;2-byte file load start vector
000000r 2               AEND		= V+109		;2-byte file load end vector
000000r 2               CNT		= V+111		;1-byte adress enter counter DUP
000000r 2               FHEADER		= V+112		;2-byte save file header ($FF)
000000r 2               FSTART		= V+114		;2-byte file load start vector save
000000r 2               FEND		= V+116		;2-byte file load end vector save
000000r 2               FSTARTS		= V+118		;2-byte file load start vector save
000000r 2               FENDS		= V+120		;2-byte file load end vector save
000000r 2               FDIFF		= V+122		;2-byte "into" difference save
000000r 2               JMPIND		= V+124		;1-byte holding $4C for JMP
000000r 2               JMPPTR		= V+125		;2-byte jmp address
000000r 2               
000000r 2               F		= V+127
000000r 2               
000000r 2               FIOCBNR		= F		;1-byte FCB is assigned to this IOCB
000000r 2               FFCBOFF		= F+1		;1-byte Offset of this FCB from FCB0
000000r 2               FSTRTCL		= F+2		;2-byte Start cluster of file
000000r 2               FILELEN		= F+4		;4-byte length of file
000000r 2               FWBURST		= F+8		;1-byte write burst 0=OFF, other=ON
000000r 2               FBURST		= F+9		;1-byte flag indicating burst read ($FF = slow)
000000r 2               FRPOS		= F+10		;4-byte bytes already read
000000r 2               FVAR32		= F+14		;4-byte 32-bit general var
000000r 2               FCURCLUS	= F+18		;4-byte current cluster
000000r 2               FCURSEC		= F+22		;1-byte current sector
000000r 2               FCURPTR		= F+23 		;2-byte current pointer into sector buffer
000000r 2               FSECTOR		= F+25 		;4-byte last sector read
000000r 2               
000000r 2               DIRTEXT		= F+29		;11-byte directory text 8 + 3
000000r 2               DIRPTR		= F+40		;2-byte pointer into directory sector
000000r 2               DIRSEC		= F+42		;4-byte directory sector
000000r 2               DIRFILE		= F+46		;1-byte dir or file to search for
000000r 2               FBLKEND		= F+46
000000r 2               
000000r 2               FCB0		= V+256
000000r 2               FCB1		= FCB0+64
000000r 2               FCB2		= FCB1+64
000000r 2               FCB3		= FCB2+64
000000r 2               
000000r 2               DNAME		= 0
000000r 2               DEXT		= 8
000000r 2               DATTRIB		= 11
000000r 2               DCLUS		= $1A
000000r 2               DLEN		= $1C
000000r 2               PART1		= $1C6
000000r 2               
000000r 1               
000000r 1               EPB	=	$F2B0		;putbyte
000000r 1               
000000r 1               		.ORG FATCODE
000D00  1               
000D00  1  4C 0F 0D     		JMP STARTUP	;0
000D03  1  4C B1 1A     		JMP PRINT	;3
000D06  1  4C 89 1A     		JMP PUTHEX	;6
000D09  1  4C D1 1A     		JMP PRINTSTR	;9
000D0C  1  4C AA 16     		JMP INITFAT
000D0F  1               	.ENDIF
000D0F  1               ;
000D0F  1               ;
000D0F  1               ;
000D0F  1               STARTUP:
000D0F  1               	.IF PLATFORM = 2
000D0F  1  A9 1F        		LDA #<INIT
000D11  1  85 0C        		STA DOSINI
000D13  1  A9 0D        		LDA #>INIT
000D15  1  85 0D        		STA DOSINI+1
000D17  1               
000D17  1  A9 00        		LDA #<DUPCODE
000D19  1  85 0A        		STA DOSVEC
000D1B  1  A9 1C        		LDA #>DUPCODE
000D1D  1  85 0B        		STA DOSVEC+1
000D1F  1               
000D1F  1               ;		LDA #25		; ATMAS-II patches
000D1F  1               ;		STA $329F
000D1F  1               ;		STA $32BF
000D1F  1               ;		LDA #'B'
000D1F  1               ;		STA $2A11
000D1F  1               
000D1F  1  A0 35        INIT:		LDY #<HANDTAB
000D21  1  A9 0D        		LDA #>HANDTAB
000D23  1  A2 44        		LDX #DRVCHAR
000D25  1  20 86 E4     		JSR $E486
000D28  1               
000D28  1  A9 50        		LDA #<$2150
000D2A  1  8D E7 02     		STA MEMLO
000D2D  1  A9 21        		LDA #>$2150
000D2F  1  8D E8 02     		STA MEMLO+1
000D32  1               
000D32  1               	.ELSE
000D32  1               ;		ldx #0
000D32  1               ;HAFIND:		lda HATABS,x
000D32  1               ;		beq HAFOUND
000D32  1               ;		cmp #DRVCHAR
000D32  1               ;		beq HAFOUND
000D32  1               ;		inx
000D32  1               ;		inx
000D32  1               ;		inx
000D32  1               ;		cpx #MAXDEV
000D32  1               ;		bcc HAFIND
000D32  1               ;		rts
000D32  1               ;HAFOUND:	lda #DRVCHAR
000D32  1               ;		sta HATABS,x
000D32  1               ;		lda #<HANDTAB
000D32  1               ;		sta HATABS+1,x
000D32  1               ;		lda #>HANDTAB
000D32  1               ;		sta HATABS+2,x
000D32  1               	.ENDIF
000D32  1  4C AA 16     		JMP INITFAT
000D35  1               
000D35  1  BB 0E        HANDTAB:	.word OPENCHA-1		; open channel
000D37  1  F4 0F        		.word CLOSECHA-1	; close ...
000D39  1  C2 10        		.word GETCHA-1		; get channel
000D3B  1  31 10        		.word PUTCHA-1		; put channel
000D3D  1  8F 11        		.word STATUSCHA-1	; status of channel
000D3F  1  92 11        		.word SPECIAL-1
000D41  1               		;jmp INITFAT
000D41  1  60           		rts
000D42  1  00 00        		.byte 0,0
000D44  1  00           		.byte 0
000D45  1               
000D45  1               ;
000D45  1               ; 		DIRFILE	0=ALL, 1=FILES, 2=FREE DIR,
000D45  1               ;			3=DIR
000D45  1               ;
000D45  1  8D AD 07     DIRSTART:	STA DIRFILE
000D48  1               
000D48  1  AD 41 07     		LDA DIRCLUS
000D4B  1  8D 81 07     		STA FSTRTCL
000D4E  1  AD 42 07     		LDA DIRCLUS+1
000D51  1  8D 82 07     		STA FSTRTCL+1
000D54  1  60           		RTS
000D55  1               ;
000D55  1               ;
000D55  1               ;
000D55  1  A0 01        CHECKHAN:	LDY #1
000D57  1  A9 3A        		LDA #':'
000D59  1  D1 24        		cmp_icbalz_y
000D5B  1               ;		CMP (ICBALZ),Y
000D5B  1  F0 0A        		BEQ CHECKHA1
000D5D  1  C8           		INY
000D5E  1  D1 24        		cmp_icbalz_y
000D60  1               ;		CMP (ICBALZ),Y
000D60  1  F0 05        		BEQ CHECKHA1
000D62  1  20 C4 0D     ERR165:		JSR CLOSEFCB
000D65  1  A0 A5        		LDY #165
000D67  1  60           CHECKHA1:	RTS
000D68  1               
000D68  1               ;
000D68  1               ;
000D68  1               ;
000D68  1  20 45 0D     GETFILE:	JSR DIRSTART
000D6B  1  20 55 0D     		JSR CHECKHAN
000D6E  1  30 23        		BMI FINDFILEND
000D70  1               
000D70  1  C8           		INY
000D71  1  20 6F 0F     		JSR STR2RAW
000D74  1  20 51 13     		JSR OPENDIR
000D77  1               
000D77  1               FINDFIL1:	;lda #'F'
000D77  1               		;jsr PRINT
000D77  1               
000D77  1  A0 00        		LDY #0
000D79  1               FINDFIL3:
000D79  1               ;		lda (FATPTRS),y
000D79  1  B9 9C 07     		LDA DIRTEXT,Y
000D7C  1               ;		jsr PRINT
000D7C  1  C9 3F        		CMP #'?'
000D7E  1  F0 0C        		BEQ FINDFIL2
000D80  1  D1 00        		CMP (FATPTRS),Y
000D82  1  F0 08        		BEQ FINDFIL2
000D84  1               
000D84  1  20 4C 11     NEXTFILE:	JSR NEXTDIR
000D87  1  90 EE        		BCC FINDFIL1
000D89  1  A0 AA        		LDY #170
000D8B  1  60           		RTS
000D8C  1               
000D8C  1  C8           FINDFIL2:	INY
000D8D  1  C0 0B        		CPY #11
000D8F  1  D0 E8        		BNE FINDFIL3
000D91  1  A0 01        		LDY #1
000D93  1  60           FINDFILEND:	RTS
000D94  1               ;
000D94  1               ;
000D94  1               ;
000D94  1               
000D94  1  A5 00        SAVEDIR:	LDA FATPTRS
000D96  1  8D A7 07     		STA DIRPTR
000D99  1  A5 01        		LDA FATPTRS+1
000D9B  1  8D A8 07     		STA DIRPTR+1
000D9E  1  A2 03        		LDX #3
000DA0  1               SAVEDIR1:
000DA0  1  BD 0C 07     		LDA SECTOR,X
000DA3  1  9D A9 07     		STA DIRSEC,X
000DA6  1  CA           		DEX
000DA7  1  10 F7        		BPL SAVEDIR1
000DA9  1  60           		RTS
000DAA  1               
000DAA  1  8D 0B 07     GETFCB:		STA FCBCODE
000DAD  1  A2 00        		LDX #0
000DAF  1  AD 0B 07     GETFCB0:	LDA FCBCODE
000DB2  1  DD 00 08     		CMP FCB0,X
000DB5  1  F0 0A        		BEQ GETFCB9
000DB7  1  8A           		TXA
000DB8  1  18           		CLC
000DB9  1  69 40        		ADC #64
000DBB  1  AA           		TAX
000DBC  1  D0 F1        		BNE GETFCB0
000DBE  1  A0 A1        		LDY #161		;TOO MANY
000DC0  1  60           		RTS
000DC1  1  A0 01        GETFCB9:	LDY #1
000DC3  1  60           		RTS			;OPEN FILES
000DC4  1               
000DC4  1               CLOSEFCB:
000DC4  1  AE 80 07     		LDX FFCBOFF
000DC7  1               
000DC7  1               ;		stz DEVICNO
000DC7  1               ;		txa
000DC7  1               ;		jsr jprinthex
000DC7  1               ;		inc DEVICNO
000DC7  1               
000DC7  1  A9 FF        		LDA #$FF
000DC9  1  8D 7F 07     		STA FIOCBNR
000DCC  1  9D 00 08     		STA FCB0,X
000DCF  1  60           		RTS
000DD0  1               
000DD0  1               
000DD0  1               SETFCB:
000DD0  1               ;		stz DEVICNO
000DD0  1               ;		lda FIOCBNR
000DD0  1               ;		jsr jprinthex
000DD0  1               ;		lda ICIDNO
000DD0  1               ;		jsr jprinthex
000DD0  1               ;		inc DEVICNO
000DD0  1               
000DD0  1  AD 7F 07     		LDA FIOCBNR		;RIGHT FCB
000DD3  1  C5 2E        		CMP ICIDNO		;ACTIVE?
000DD5  1  F0 37        		BEQ SETFCB9		;YES
000DD7  1               
000DD7  1               ;		stz DEVICNO
000DD7  1               ;		lda #'*'
000DD7  1               ;		jsr jprinthex
000DD7  1               ;		inc DEVICNO
000DD7  1               ;		lda FIOCBNR
000DD7  1               
000DD7  1  C9 FF        SWAPFCB:	CMP #$FF
000DD9  1  F0 14        		BEQ SWAPIN
000DDB  1               
000DDB  1  20 23 16     		JSR SEC2FSEC
000DDE  1               
000DDE  1  A0 00        		LDY #0
000DE0  1  AE 80 07     		LDX FFCBOFF
000DE3  1               SWAPFCB0:
000DE3  1  B9 7F 07     		LDA FIOCBNR,Y
000DE6  1  9D 00 08     		STA FCB0,X
000DE9  1  E8           		INX
000DEA  1  C8           		INY
000DEB  1  C0 2F        		CPY #FBLKEND-F+1
000DED  1  D0 F4        		BNE SWAPFCB0
000DEF  1               
000DEF  1               SWAPIN:
000DEF  1  A5 2E        		LDA ICIDNO
000DF1  1  20 AA 0D     		JSR GETFCB
000DF4  1               
000DF4  1  A0 00        		LDY #0
000DF6  1  BD 00 08     SWAPIN0:	LDA FCB0,X
000DF9  1  99 7F 07     		STA FIOCBNR,Y
000DFC  1  E8           		INX
000DFD  1  C8           		INY
000DFE  1  C0 2F        		CPY #FBLKEND-F+1
000E00  1  D0 F4        		BNE SWAPIN0
000E02  1               
000E02  1  A5 22        		LDA ICCOMZ
000E04  1  C9 03        		CMP #OPEN
000E06  1  F0 06        		BEQ SETFCB9
000E08  1               
000E08  1  20 39 16     		JSR FSEC2SEC
000E0B  1  20 F1 19     		JSR READSEC
000E0E  1               
000E0E  1  60           SETFCB9:	RTS
000E0F  1               ;
000E0F  1               ;
000E0F  1               ;
000E0F  1               
000E0F  1  A9 FF        OPENFCB:	LDA #$FF
000E11  1  20 AA 0D     		JSR GETFCB		;get FREE FCB
000E14  1  10 01        		BPL OPENFCB1
000E16  1  60           		RTS
000E17  1               
000E17  1  A5 2E        OPENFCB1:	LDA ICIDNO
000E19  1  9D 00 08     		STA FCB0,X
000E1C  1               
000E1C  1  A9 00        		LDA #0			;CLEAR FCB
000E1E  1  A0 2D        		LDY #FBLKEND-F-1
000E20  1               OPENFCB0:
000E20  1  9D 02 08     		STA FCB0+2,X
000E23  1  E8           		INX
000E24  1  88           		DEY
000E25  1  D0 F9        		BNE OPENFCB0
000E27  1               
000E27  1  20 D0 0D     		JSR SETFCB
000E2A  1  A0 01        		LDY #1
000E2C  1  60           		RTS
000E2D  1               ;
000E2D  1               ;
000E2D  1               ;
000E2D  1               VALIDNAM:
000E2D  1               ;		ldx #0
000E2D  1               ;v1:		lda DIRTEXT,x
000E2D  1               ;		jsr PUTHEX
000E2D  1               ;		lda #32
000E2D  1               ;		jsr PRINT
000E2D  1               ;		inx
000E2D  1               ;		cpx #11
000E2D  1               ;		bne v1
000E2D  1               
000E2D  1  A2 0A        		LDX #10
000E2F  1  BD 9C 07     VALIDNA1:	LDA DIRTEXT,X	;CARD
000E32  1  C9 30        		CMP #'0'
000E34  1  90 0C        		BCC VALIDNA3	;< 0? => check special chars
000E36  1  C9 3A        		CMP #'9'+1	;<= 9?
000E38  1  90 21        		BCC VALIDNA2	;yes OK, next char
000E3A  1  C9 41        		CMP #'A'	;
000E3C  1  90 04        		BCC VALIDNA3	;< A? => check special chars
000E3E  1  C9 5B        		CMP #'Z'+1	;<= Z?
000E40  1  90 19        		BCC VALIDNA2	;yes OK, next char
000E42  1               
000E42  1  AC 69 07     VALIDNA3:	LDY VALIDS
000E45  1  D9 4E 0E     VALIDNA4:	CMP VALIDCHA,Y
000E48  1  F0 11        		BEQ VALIDNA2
000E4A  1  88           		DEY
000E4B  1  10 F8        		BPL VALIDNA4
000E4D  1  60           		RTS		;no valid char found, return N=1
000E4E  1               
000E4E  1  20 21 23 24  VALIDCHA:	.byte " !#$%&()-_^|?"	;usually test without "?", so 12+1 bytes!
000E52  1  25 26 28 29  
000E56  1  2D 5F 5E 7C  
000E5B  1               
000E5B  1  CA           VALIDNA2:	DEX
000E5C  1  10 D1        		BPL VALIDNA1	;X=$FF
000E5E  1               
000E5E  1  A9 20        		LDA #32		;check if first char != space
000E60  1  CD 9C 07     		CMP DIRTEXT
000E63  1  F0 02        		BEQ VALIDNA9
000E65  1               
000E65  1               ;		CMP DIRTEXT+8
000E65  1               ;		BEQ VALIDNA9
000E65  1               
000E65  1  E8           		INX		;X=0, make sure N=0
000E66  1  60           		RTS
000E67  1               
000E67  1  CA           VALIDNA9:	DEX		;X=$FE, N=1
000E68  1  60           		RTS
000E69  1               ;
000E69  1               ;
000E69  1               ;
000E69  1  A5 00        DUMPPTR:	LDA FATPTRS
000E6B  1  20 89 1A     		JSR PUTHEX
000E6E  1  A5 01        		LDA FATPTRS+1
000E70  1  4C 89 1A     		JMP PUTHEX
000E73  1               ;
000E73  1               ;
000E73  1               ;
000E73  1  A2 02        INITDIR:	LDX #2
000E75  1  A9 00        		LDA #0
000E77  1  20 4F 16     		JSR GETFCLUS
000E7A  1  AD 3C 07     		LDA NEWCLUS+1
000E7D  1  48           		PHA
000E7E  1  AD 3B 07     		LDA NEWCLUS
000E81  1  48           		PHA
000E82  1               
000E82  1  20 5F 0F     		JSR FINDFDIR
000E85  1  B0 0A        		BCS INITDIR1
000E87  1  68           		PLA
000E88  1  68           		PLA		;NO FREE DIR
000E89  1  68           		PLA
000E8A  1  68           		PLA
000E8B  1  20 C4 0D     ERR169:		JSR CLOSEFCB
000E8E  1  A0 A9        		LDY #169
000E90  1  60           		RTS
000E91  1               
000E91  1               INITDIR1:
000E91  1  A0 00        		LDY #0		;DIRNAME IN
000E93  1  8C AD 07     		STY DIRFILE	;RESET DIRFILE
000E96  1               INITDIR2:
000E96  1  B9 9C 07     		LDA DIRTEXT,Y	;DIR ENTRY
000E99  1  91 00        		STA (FATPTRS),Y
000E9B  1  C8           		INY
000E9C  1  C0 0B        		CPY #11
000E9E  1  D0 F6        		BNE INITDIR2
000EA0  1               
000EA0  1  A9 00        		LDA #0		;INITIALIZE
000EA2  1  91 00        INITDIR3:	STA (FATPTRS),Y	;REST
000EA4  1  C8           		INY
000EA5  1  C0 20        		CPY #32
000EA7  1  D0 F9        		BNE INITDIR3
000EA9  1               
000EA9  1  8C 3D 07     		STY DDIRTY	;PUT START
000EAC  1  A0 1A        		LDY #DCLUS	;CLUSTER
000EAE  1  68           		PLA		;INTO
000EAF  1  8D 91 07     		STA FCURCLUS
000EB2  1               ;		JSR PUTHEX
000EB2  1  91 00        		STA (FATPTRS),Y	;DIR ENTRY
000EB4  1  C8           		INY
000EB5  1  68           		PLA
000EB6  1  8D 92 07     		STA FCURCLUS+1
000EB9  1               ;		JSR PUTHEX
000EB9  1  91 00        		STA (FATPTRS),Y
000EBB  1               
000EBB  1               ;		BRK
000EBB  1  60           		RTS
000EBC  1               
000EBC  1               ;-------------------------------------------------------------------------------
000EBC  1               ; OPENCHA - Open Channel
000EBC  1               ; opens a FCB file control block for IO
000EBC  1               ;-------------------------------------------------------------------------------
000EBC  1  20 0F 0E     OPENCHA:	JSR OPENFCB
000EBF  1  30 27        		BMI OPENERR
000EC1  1               ;		RTS
000EC1  1               
000EC1  1               ;		LDA #$FF
000EC1  1               ;		STA FBURST
000EC1  1               
000EC1  1  A5 2A        		LDA ICAX1Z
000EC3  1  29 06        		AND #6
000EC5  1  C9 06        		CMP #6
000EC7  1  D0 0B        		BNE OPENFILE
000EC9  1               
000EC9  1  20 94 16     OPENDI:		JSR INITLSEC
000ECC  1  A9 00        		LDA #0
000ECE  1  8D 6A 07     		STA HILF
000ED1  1  4C 68 0D     		JMP GETFILE
000ED4  1               
000ED4  1  A9 01        OPENFILE:	LDA #1		;FILE THERE?
000ED6  1  20 68 0D     		JSR GETFILE
000ED9  1  10 19        		BPL OPENEXIS	;YES
000EDB  1               
000EDB  1  A5 2A        OPENNEW:	LDA ICAX1Z	;WRITE FILE?
000EDD  1  29 0D        		AND #1+4+8	;NO READ OR
000EDF  1  C9 08        		CMP #8		;APPEND
000EE1  1  F0 06        		BEQ OPENNEW3
000EE3  1  20 C4 0D     OPEN170:	JSR CLOSEFCB
000EE6  1  A0 AA        		LDY #170
000EE8  1  60           OPENERR:	RTS
000EE9  1               
000EE9  1  20 2D 0E     OPENNEW3:	JSR VALIDNAM
000EEC  1  10 03        		BPL OPENNEW4
000EEE  1  4C 62 0D     		JMP ERR165
000EF1  1               
000EF1  1  20 73 0E     OPENNEW4:	JSR INITDIR
000EF4  1               
000EF4  1  20 94 0D     OPENEXIS:	JSR SAVEDIR
000EF7  1  A2 05        		LDX #5		;GET START
000EF9  1  A0 1F        		LDY #DCLUS+5	;CLUSTER
000EFB  1  B1 00        OPENF1:		LDA (FATPTRS),Y	;AND FILELEN
000EFD  1  9D 81 07     		STA FSTRTCL,X	;FROM
000F00  1  88           		DEY		;DIRENTRY
000F01  1  CA           		DEX
000F02  1  10 F7        		BPL OPENF1
000F04  1               
000F04  1               ;		LDX #15		INITIALIZE
000F04  1               ;		LDA #0		REST
000F04  1               ;		STA FCURSEC
000F04  1               ;OPENF2		STA FBYT2RD,X
000F04  1               ;		DEX
000F04  1               ;		BNE OPENF2
000F04  1               
000F04  1  A5 2A        		LDA ICAX1Z	;IF READ
000F06  1  29 04        		AND #4		;FINISHED
000F08  1  D0 29        		BNE OPENEND
000F0A  1               
000F0A  1               ;		LDA #'*'
000F0A  1               ;		JSR PRINT
000F0A  1               
000F0A  1  A5 2A        		LDA ICAX1Z	;APPEND?
000F0C  1  29 01        		AND #1
000F0E  1  F0 0E        		BEQ OPENWRIT	;NO
000F10  1               
000F10  1  A2 03        		LDX #3		;if append
000F12  1  BD 83 07     OPENF3:		LDA FILELEN,X	;copy filelen
000F15  1  9D 89 07     		STA FRPOS,X	;to file-read-pos
000F18  1  CA           		DEX
000F19  1  10 F7        		BPL OPENF3
000F1B  1               
000F1B  1  4C 33 0F     		JMP OPENEND
000F1E  1               
000F1E  1               OPENWRIT:
000F1E  1  A0 FF        		LDY #$FF
000F20  1  AE 81 07     		LDX FSTRTCL
000F23  1  AD 82 07     		LDA FSTRTCL+1
000F26  1  20 39 0F     		JSR DELCLUS
000F29  1               
000F29  1  A9 00        		LDA #0
000F2B  1  A2 03        		LDX #3
000F2D  1  9D 83 07     OPENW4:		STA FILELEN,X
000F30  1  CA           		DEX
000F31  1  10 FA        		BPL OPENW4
000F33  1               
000F33  1  20 84 15     OPENEND:	JSR FSEEK
000F36  1  A0 01        		LDY #1
000F38  1  60           		RTS
000F39  1               ;
000F39  1               ;
000F39  1               ;
000F39  1  8C 6A 07     DELCLUS:	STY HILF
000F3C  1               
000F3C  1  C9 FF        DELCLUS1:	CMP #$FF
000F3E  1  D0 05        		BNE DELCLUS2
000F40  1  E0 FF        		CPX #$FF
000F42  1  D0 01        		BNE DELCLUS2
000F44  1  60           		RTS
000F45  1               
000F45  1  20 12 19     DELCLUS2:	JSR GETCLUST
000F48  1  48           		PHA
000F49  1  8C 3E 07     		STY FDIRTY
000F4C  1  AD 6A 07     		LDA HILF
000F4F  1  91 00        		STA (FATPTRS),Y
000F51  1  88           		DEY
000F52  1  91 00        		STA (FATPTRS),Y
000F54  1  68           		PLA
000F55  1               
000F55  1  AC 6A 07     		LDY HILF
000F58  1  F0 E2        		BEQ DELCLUS1
000F5A  1  EE 6A 07     		INC HILF
000F5D  1  F0 DD        		BEQ DELCLUS1
000F5F  1               ;
000F5F  1               ;
000F5F  1               ;
000F5F  1  A9 02        FINDFDIR:	LDA #2
000F61  1  20 45 0D     		JSR DIRSTART
000F64  1  20 51 13     		JSR OPENDIR
000F67  1  B0 05        		BCS FINDFDI1
000F69  1               FINDFDI2:
000F69  1  20 4C 11     		JSR NEXTDIR
000F6C  1  90 FB        		BCC FINDFDI2
000F6E  1  60           FINDFDI1:	RTS
000F6F  1               
000F6F  1               
000F6F  1  A2 0A        STR2RAW:	LDX #10			;fill DIRTEXT
000F71  1  A9 20        		LDA #32			;with spaces
000F73  1  9D 9C 07     S2R12:		STA DIRTEXT,X
000F76  1  CA           		DEX
000F77  1  10 FA        		BPL S2R12
000F79  1               
000F79  1  E8           		INX			;x = 0
000F7A  1  8E 4F 07     		STX WILD
000F7D  1               
000F7D  1  A9 2E        		LDA #'.'
000F7F  1  D1 24        		cmp_icbalz_y		;first char '.' (local dir)?
000F81  1               ;		CMP (ICBALZ),Y
000F81  1  D0 0E        		BNE S2R1			;no, goto S2R1
000F83  1  8D 9C 07     		STA DIRTEXT			;save in first char of DIRTEXT
000F86  1  C8           		INY					;examine next input char
000F87  1  D1 24        		cmp_icbalz_y
000F89  1               ;		CMP (ICBALZ),Y		;also '.'?
000F89  1  D0 06        		BNE S2R1			;no, goto S2R1
000F8B  1  8D 9D 07     		STA DIRTEXT+1		;save in 2nd char of DIRTEXT
000F8E  1  C8           		INY					;Y += 2 ?
000F8F  1  C8           		INY
000F90  1  60           		RTS					;return
000F91  1               
000F91  1  20 B3 0F     S2R1:		JSR S2R4		;call S2R4 until 8 chars processed
000F94  1  B0 04        		BCS S2R2
000F96  1  E0 08        		CPX #8
000F98  1  D0 F7        		BNE S2R1
000F9A  1  C9 9B        S2R2:		CMP #EOL
000F9C  1  F0 14        		BEQ S2R6
000F9E  1  C9 2F        		CMP #'/'
000FA0  1  F0 10        		BEQ S2R6
000FA2  1  A2 08        		LDX #8
000FA4  1  A9 00        		LDA #0
000FA6  1  8D 4F 07     		STA WILD
000FA9  1  20 B3 0F     S2R5:		JSR S2R4
000FAC  1  B0 04        		BCS S2R6
000FAE  1  E0 0B        		CPX #11
000FB0  1  D0 F7        		BNE S2R5
000FB2  1  60           S2R6:		RTS
000FB3  1               
000FB3  1  B1 24        S2R4:		lda_icbalz_y
000FB5  1               ;		LDA (ICBALZ),Y
000FB5  1               ;		JSR PRINT
000FB5  1  2C 4F 07     		BIT WILD		;wildcard active?
000FB8  1  30 26        		BMI S2R7		;yes => S2R7
000FBA  1               
000FBA  1  C8           		INY
000FBB  1  C9 2A        		CMP #'*'
000FBD  1  D0 05        		BNE S2R8
000FBF  1  CE 4F 07     		DEC WILD
000FC2  1  30 1C        		BMI S2R7
000FC4  1  C9 2E        S2R8:		CMP #'.'
000FC6  1  D0 06        		BNE S2R11
000FC8  1  E0 08        		CPX #8
000FCA  1  90 26        		BCC S2R3
000FCC  1  18           		CLC
000FCD  1  60           		RTS
000FCE  1  C9 20        S2R11:		CMP #32			;is space?
000FD0  1  F0 20        		BEQ S2R3		;yes => next
000FD2  1  C9 9B        		CMP #EOL
000FD4  1  F0 1C        		BEQ S2R3
000FD6  1  C9 2F        		CMP #'/'
000FD8  1  F0 18        		BEQ S2R3
000FDA  1  C9 00        		CMP #0
000FDC  1  F0 14        		BEQ S2R3
000FDE  1  D0 02        		BNE S2R9
000FE0  1  A9 3F        S2R7:		LDA #'?'
000FE2  1  C9 61        S2R9:		CMP #'a'
000FE4  1  90 06        		BCC S2R10
000FE6  1  C9 7B        		CMP #'z'+1
000FE8  1  B0 02        		BCS S2R10
000FEA  1  E9 1F        		SBC #31
000FEC  1  9D 9C 07     S2R10:		STA DIRTEXT,X		;normal character
000FEF  1  E8           		INX
000FF0  1  18           		CLC
000FF1  1  60           		RTS
000FF2  1  E8           S2R3:		INX
000FF3  1  38           		SEC
000FF4  1  60           		RTS
000FF5  1               
000FF5  1               ;
000FF5  1               ;
000FF5  1               ;
000FF5  1  20 D0 0D     CLOSECHA:	JSR SETFCB
000FF8  1               
000FF8  1  A5 2A        		LDA ICAX1Z
000FFA  1  29 08        		AND #8
000FFC  1  F0 2E        		BEQ CLOSE5
000FFE  1               
000FFE  1  20 87 19     		JSR WRITEFAT
001001  1               
001001  1  A2 03        		LDX #3
001003  1  BD A9 07     CLOSE3:		LDA DIRSEC,X
001006  1  9D 0C 07     		STA SECTOR,X
001009  1  CA           		DEX
00100A  1  10 F7        		BPL CLOSE3
00100C  1  20 F1 19     		JSR READSEC
00100F  1               
00100F  1  AD A7 07     		LDA DIRPTR
001012  1  85 02        		STA FATPTRD
001014  1  AD A8 07     		LDA DIRPTR+1
001017  1  85 03        		STA FATPTRD+1
001019  1               
001019  1  A0 1F        		LDY #DLEN+3
00101B  1  8C 3D 07     		STY DDIRTY
00101E  1  A2 03        		LDX #3
001020  1  BD 83 07     CLOSE4:		LDA FILELEN,X
001023  1               ;		JSR PUTHEX
001023  1  91 02        		STA (FATPTRD),Y
001025  1  88           		DEY
001026  1  CA           		DEX
001027  1  10 F7        		BPL CLOSE4
001029  1               
001029  1  20 D7 19     		JSR WRITESEC
00102C  1               
00102C  1  20 C4 0D     CLOSE5:		JSR CLOSEFCB
00102F  1  4C 4D 13     		JMP OK
001032  1               
001032  1               ;
001032  1               ;
001032  1               ;
001032  1               ;
001032  1               ; PUTCHANNEL
001032  1               ;
001032  1  85 2F        PUTCHA:		STA CIOCHR	; save byte, could have been called via ICPTLZ
001034  1               
001034  1  20 D0 0D     		JSR SETFCB
001037  1               
001037  1  A5 2A        		LDA ICAX1Z	;UPDATE?
001039  1  29 04        		AND #4		;CECK
00103B  1  F0 08        		BEQ PUTCHA1	;FILELEN
00103D  1               
00103D  1  20 CF 13     PUTUPD:		JSR CHECKLEN	;file-pos less than filelen
001040  1  90 5E        		BCC PUTSLOW1	;yes, continue slow
001042  1  A0 88        PUTUPD1:	LDY #EOF	;signal error
001044  1  60           		RTS
001045  1               
001045  1  A5 00        PUTCHA1:	LDA FATPTRS	;points to begin of page?
001047  1  D0 54        		BNE PUTSLOW
001049  1  A5 29        		LDA ICBLHZ	;at least 512 bytes To write?
00104B  1  C9 02        		CMP #2
00104D  1  90 4E        		BCC PUTSLOW
00104F  1  A5 01        		LDA FATPTRS+1	;points to begin of buffer?
001051  1  C9 09        		CMP #>BUFFER
001053  1  D0 48        		BNE PUTSLOW
001055  1  A5 22        		LDA ICCOMZ	;binary put?
001057  1  C9 0B        		CMP #PUTCHR
001059  1  D0 42        		BNE PUTSLOW
00105B  1               
00105B  1  EE 87 07     PUTFAST:	INC FWBURST
00105E  1  A0 00        		LDY #0
001060  1  B1 24        PUTFAST1:	lda_icbalz_y
001062  1               ;		LDA (ICBALZ),Y
001062  1  99 00 09     		STA BUFFER,Y
001065  1  C8           		INY
001066  1  D0 F8        		BNE PUTFAST1
001068  1  E6 25        		INC ICBAHZ
00106A  1  B1 24        PUTFAST2:	lda_icbalz_y
00106C  1               ;		LDA (ICBALZ),Y
00106C  1  99 00 0A     		STA BUFFER+$100,Y
00106F  1  C8           		INY
001070  1  D0 F8        		BNE PUTFAST2
001072  1               
001072  1  C8           		INY
001073  1  8C 3D 07     		STY DDIRTY
001076  1               
001076  1  20 5C 14     		JSR INCRPOS2
001079  1  20 5C 14     		JSR INCRPOS2
00107C  1               
00107C  1  20 B5 10     		JSR INCFILELE2
00107F  1  20 B5 10     		JSR INCFILELE2
001082  1               
001082  1  38           		SEC
001083  1  A5 28        		LDA ICBLLZ
001085  1  E9 FF        		SBC #$FF
001087  1  85 28        		STA ICBLLZ
001089  1  A5 29        		LDA ICBLHZ
00108B  1  E9 01        		SBC #1
00108D  1  85 29        		STA ICBLHZ
00108F  1               	.IF PLATFORM=0
00108F  1               		lda ICBLBZ
00108F  1               		sbc #0
00108F  1               		sta ICBLBZ
00108F  1               	.ENDIF
00108F  1               
00108F  1  18           		CLC
001090  1  A5 24        		LDA ICBALZ
001092  1  69 FF        		ADC #$FF
001094  1  85 24        		STA ICBALZ
001096  1  90 02        		BCC PUTFAST3
001098  1  E6 25        		INC ICBAHZ
00109A  1               	.IF PLATFORM=0
00109A  1               		bne PUTFAST3
00109A  1               		inc ICBABZ
00109A  1               	.ENDIF
00109A  1               
00109A  1  4C E8 14     PUTFAST3:	JMP INCSEC
00109D  1               
00109D  1               
00109D  1  20 B0 10     PUTSLOW:	JSR INCFILELEN
0010A0  1  A5 2F        PUTSLOW1:	LDA CIOCHR
0010A2  1  A0 00        		LDY #0
0010A4  1  91 00        		STA (FATPTRS),Y
0010A6  1  C8           		INY
0010A7  1  8C 3D 07     		STY DDIRTY
0010AA  1               
0010AA  1  20 57 14     		JSR INCRPOS
0010AD  1  4C DC 14     		JMP INCPTR
0010B0  1               
0010B0  1               
0010B0  1  EE 83 07     INCFILELEN:	INC FILELEN
0010B3  1  D0 0D        		BNE INCFILELEX
0010B5  1  EE 84 07     INCFILELE2:	INC FILELEN+1
0010B8  1  D0 08        		BNE INCFILELEX
0010BA  1  EE 85 07     		INC FILELEN+2
0010BD  1  D0 03        		BNE INCFILELEX
0010BF  1  EE 86 07     		INC FILELEN+3
0010C2  1  60           INCFILELEX:	RTS
0010C3  1               ;
0010C3  1               ;
0010C3  1               ;
0010C3  1  20 D0 0D     GETCHA:		JSR SETFCB
0010C6  1  A6 2E        		LDX ICIDNO
0010C8  1  BD 4A 03     		LDA ICAX1,X
0010CB  1  29 02        		AND #2
0010CD  1  D0 03        		BNE GETDIR	;if Bit 1 set, dir access
0010CF  1               
0010CF  1  4C EE 13     GETBYTE:	JMP READBYTE
0010D2  1               
0010D2  1               GETDIR:		;lda #'*'
0010D2  1               		;jsr PRINT
0010D2  1               
0010D2  1  AC 6A 07     		LDY HILF	;each call to GETDIR return just one byte
0010D5  1  10 03        		BPL GETDIR6	;HILF counts the bytes in one dir entry
0010D7  1               		;lda #'E'
0010D7  1               		;jsr PRINT
0010D7  1  A0 88        		LDY #EOF
0010D9  1  60           		RTS
0010DA  1               
0010DA  1  D0 3F        GETDIR6:	BNE GETDIR1		; Y > 0, get next Dir
0010DC  1               
0010DC  1  A9 20        		LDA #32			; Y==0, init DIRLINE
0010DE  1  8D 58 07     		STA DIRLINE+8
0010E1  1  8D 5C 07     		STA DIRLENG-1
0010E4  1  A9 9B        		LDA #EOL
0010E6  1  8D 67 07     		STA DIREOF
0010E9  1               
0010E9  1  A2 00        		LDX #0			; copy DIR-info
0010EB  1  B1 00        GETDIR3:	LDA (FATPTRS),Y		; from sector-buffer
0010ED  1  9D 50 07     		STA DIRLINE,X		; into DIRLINE
0010F0  1  E8           		INX
0010F1  1  C8           		INY
0010F2  1  C0 08        		CPY #8			; 8.3 jump over " "
0010F4  1  D0 01        		BNE GETDIR3A
0010F6  1  E8           		INX
0010F7  1               
0010F7  1  C0 0B        GETDIR3A:	CPY #11
0010F9  1  D0 F0        		BNE GETDIR3
0010FB  1               
0010FB  1  A0 0B        		LDY #DATTRIB
0010FD  1  B1 00        		LDA (FATPTRS),Y
0010FF  1  A0 09        		LDY #9
001101  1  29 10        		AND #16			;ist directory?
001103  1  F0 0B        		BEQ GETDLEN		;no, get file length
001105  1               
001105  1  B9 42 11     GETDTXT:	LDA DIRTXT,Y		;write "DIR" into
001108  1  99 5D 07     		STA DIRLENG,Y		;output length
00110B  1  88           		DEY			;pos 9 downto 0
00110C  1  10 F7        		BPL GETDTXT
00110E  1  30 09        		BMI GETDIR5
001110  1               
001110  1  B9 31 07     GETDLEN:	LDA DECIMAL,Y
001113  1  99 5D 07     		STA DIRLENG,Y
001116  1  88           		DEY
001117  1  10 F7        		BPL GETDLEN
001119  1               
001119  1  A0 00        GETDIR5:	LDY #0
00111B  1               
00111B  1               GETDIR1:	;lda #'1'
00111B  1               		;jsr PRINT
00111B  1               
00111B  1  EE 6A 07     		INC HILF
00111E  1  B9 50 07     		LDA DIRLINE,Y		;if Y points to end in DIRLINE
001121  1  C9 9B        		CMP #EOL		;read next dir entry
001123  1  D0 14        		BNE GETDIR7
001125  1               
001125  1               		;lda #'2'
001125  1               		;jsr PRINT
001125  1               
001125  1  20 84 0D     		JSR NEXTFILE
001128  1  30 09        		BMI GETDIR9
00112A  1               
00112A  1               		;lda #'D'
00112A  1               		;jsr PRINT
00112A  1               
00112A  1  A0 00        		LDY #0
00112C  1  8C 6A 07     		STY HILF
00112F  1               
00112F  1  B1 00        		LDA (FATPTRS),Y
001131  1  D0 04        		BNE GETDIR8
001133  1               
001133  1               GETDIR9:	;lda #'9'
001133  1               		;jsr PRINT
001133  1               
001133  1  88           		DEY
001134  1  8C 6A 07     		STY HILF		;NEG.
001137  1               
001137  1  A9 9B        GETDIR8:	LDA #EOL
001139  1               
001139  1               GETDIR7:
001139  1               	.IF PLATFORM > 0
001139  1  C9 7E        		CMP #$7E		; "~" in "-"
00113B  1  D0 02        		BNE GETDIR2
00113D  1  A9 2D        		LDA #'-'
00113F  1               	.ENDIF
00113F  1               GETDIR2:	;pha
00113F  1               		;lda #'#'
00113F  1               		;jsr PRINT
00113F  1               		;pla
00113F  1  A0 01        		LDY #1
001141  1  60           		RTS
001142  1               
001142  1               ;
001142  1               ;	     1234567890123
001142  1               ;DIRLINE	.byte "             "
001142  1               ;DIRLENG	.byte "           "
001142  1               ;	.byte EOL
001142  1               ;		      "0123456789"
001142  1  20 20 20 20  DIRTXT:		.byte "       DIR"
001146  1  20 20 20 44  
00114A  1  49 52        
00114C  1               ;
00114C  1               NEXTDIR:	;lda #'N'
00114C  1               		;jsr PRINT
00114C  1               
00114C  1  20 78 13     		JSR READDIR
00114F  1  B0 3E        		BCS NEXTDIR9	;No further Dir, RTS
001151  1               
001151  1               CHECKDIR:
001151  1               ;		jsr NEWLINE
001151  1               ;
001151  1               ;		ldy #0
001151  1               ;ch1:		lda (FATPTRS),Y
001151  1               ;		jsr PUTHEX
001151  1               ;		lda #' '
001151  1               ;		jsr PRINT
001151  1               ;		iny
001151  1               ;		cpy #16
001151  1               ;		bne ch1
001151  1               ;
001151  1               ;		lda #' '
001151  1               ;		jsr PRINT
001151  1               ;
001151  1               ;		ldy #0
001151  1               ;ch2:		lda (FATPTRS),Y
001151  1               ;		jsr PRINT
001151  1               ;		iny
001151  1               ;		cpy #8
001151  1               ;		bne ch2
001151  1               ;		jsr NEWLINE
001151  1               
001151  1  A0 00        		LDY #DNAME
001153  1  AE AD 07     		LDX DIRFILE
001156  1  B1 00        		LDA (FATPTRS),Y
001158  1               
001158  1  C9 E5        		CMP #DEL	;ENTRY
00115A  1  D0 06        		BNE NEXTDIR2	;DELETED?
00115C  1  E0 02        		CPX #2		;AND
00115E  1  D0 EC        		BNE NEXTDIR	;DIRFILE=2
001160  1  38           		SEC		;END C=1
001161  1  60           		RTS
001162  1               
001162  1               NEXTDIR2:	;lda #'2'
001162  1               		;jsr PRINT
001162  1               
001162  1  A0 0B        		LDY #DATTRIB
001164  1  B1 00        		LDA (FATPTRS),Y	;SKIP
001166  1  29 08        		AND #8		;VOLUME
001168  1  D0 E2        		BNE NEXTDIR	;LABEL
00116A  1               
00116A  1  B1 00        		LDA (FATPTRS),Y	;DIR?
00116C  1  29 10        		AND #16
00116E  1  E0 00        		CPX #0		;DIRFILE<>0
001170  1  F0 0C        		BEQ NEXTDIR3	;SKIP DIRS
001172  1  E0 03        		CPX #3
001174  1  D0 05        		BNE NEXTDIR4
001176  1  AA           		TAX
001177  1  D0 05        		BNE NEXTDIR3
001179  1  F0 D1        		BEQ NEXTDIR
00117B  1               NEXTDIR4:
00117B  1  AA           		TAX
00117C  1  D0 CE        		BNE NEXTDIR
00117E  1               
00117E  1               NEXTDIR3:
00117E  1               ;		LDY #0
00117E  1               ;ND1:		LDA (FATPTRS),Y
00117E  1               ;		JSR PRINT
00117E  1               ;		INY
00117E  1               ;		CPY #11
00117E  1               ;		BNE ND1
00117E  1               
00117E  1  A0 1F        		LDY #DLEN+3
001180  1  A2 03        		LDX #3
001182  1               NEXTDIR1:
001182  1  B1 00        		LDA (FATPTRS),Y
001184  1  9D 28 07     		STA BIN,X
001187  1  88           		DEY
001188  1  CA           		DEX
001189  1  10 F7        		BPL NEXTDIR1
00118B  1               
00118B  1  20 7D 14     		JSR BIN2DEC
00118E  1               ;		lda #'B'
00118E  1               ;		jsr PRINT
00118E  1  18           		CLC
00118F  1  60           NEXTDIR9:	RTS
001190  1               
001190  1  4C 4D 13     STATUSCHA:	JMP OK
001193  1               
001193  1  A5 22        SPECIAL:	LDA ICCOMZ
001195  1  A2 04        		LDX #(XFUNCEND-XFUNC)
001197  1  DD BE 11     SPECIAL2:	CMP XFUNC,X
00119A  1  F0 06        		BEQ SPECIAL1
00119C  1  CA           		DEX
00119D  1  10 F8        		BPL SPECIAL2
00119F  1  A0 84        		LDY #132
0011A1  1  60           		RTS
0011A2  1               
0011A2  1  8A           SPECIAL1:	TXA
0011A3  1  0A           		ASL			;* 2
0011A4  1  8D 6A 07     		STA HILF		;store found X-pos
0011A7  1               
0011A7  1  A5 22        		LDA ICCOMZ
0011A9  1  C9 28        		CMP #CFSTAT		;no OPENFCB for FSTAT
0011AB  1  F0 05        		BEQ SPECIAL3
0011AD  1               
0011AD  1  20 0F 0E     		JSR OPENFCB
0011B0  1  30 0B        		BMI SPECIAL9		;no free FCB
0011B2  1               SPECIAL3:
0011B2  1               ;		LDA #$FF
0011B2  1               ;		STA FBURST
0011B2  1  AE 6A 07     		LDX HILF		;reload X-pos
0011B5  1  BD C4 11     		LDA XJMPTAB+1,X		;jump to special-function
0011B8  1  48           		PHA
0011B9  1  BD C3 11     		LDA XJMPTAB,X
0011BC  1  48           		PHA
0011BD  1               SPECIAL9:
0011BD  1  60           		RTS
0011BE  1               
0011BE  1  21           XFUNC:		.byte CDELETE
0011BF  1  29           		.byte CCHADIR
0011C0  1  20           		.byte CRENAME
0011C1  1  28           		.byte CFSTAT
0011C2  1  22           XFUNCEND:	.byte CCREDIR
0011C3  1               
0011C3  1               
0011C3  1  15 13        XJMPTAB:	.word DELETE-1
0011C5  1  B1 12        		.word CHADIR-1
0011C7  1  DC 11        		.word RENAME-1
0011C9  1  CC 11        		.word FSTAT-1
0011CB  1  2D 12        		.word CREDIR-1
0011CD  1               ;
0011CD  1               ;
0011CD  1               ;
0011CD  1               
0011CD  1               ;
0011CD  1               ;
0011CD  1               ;
0011CD  1               FSTAT:		;JSR SETFCB
0011CD  1               ;		BPL FSTAT2
0011CD  1               ;		RTS
0011CD  1               
0011CD  1  A0 05        FSTAT2:		LDY #5
0011CF  1  A2 03        		LDX #3
0011D1  1  BD 83 07     FSTAT1:		LDA FILELEN,X
0011D4  1  91 24        		sta_icbalz_y
0011D6  1  88           		DEY
0011D7  1  CA           		DEX
0011D8  1  10 F7        		BPL FSTAT1
0011DA  1  4C 4D 13     		JMP OK
0011DD  1               
0011DD  1  A0 00        RENAME:		LDY #0
0011DF  1  B1 24        RENAME2:	lda_icbalz_y
0011E1  1               ;		LDA (ICBALZ),Y
0011E1  1  C9 2C        		CMP #','
0011E3  1  F0 0A        		BEQ RENAME1	;FOUND
0011E5  1  C9 9B        		CMP #EOL
0011E7  1  F0 03        		BEQ RENAME8
0011E9  1  C8           		INY
0011EA  1  D0 F3        		BNE RENAME2
0011EC  1  4C 62 0D     RENAME8:	JMP ERR165
0011EF  1               
0011EF  1  C8           RENAME1:	INY
0011F0  1  20 6F 0F     		JSR STR2RAW
0011F3  1  EE 69 07     		INC VALIDS
0011F6  1  20 2D 0E     		JSR VALIDNAM
0011F9  1  08           		PHP
0011FA  1  CE 69 07     		DEC VALIDS
0011FD  1  28           		PLP
0011FE  1  10 03        		BPL RENAME4
001200  1  4C 62 0D     		JMP ERR165
001203  1               
001203  1  A2 0A        RENAME4:	LDX #10
001205  1  BD 9C 07     RENAME3:	LDA DIRTEXT,X
001208  1  9D 43 07     		STA DIRRENA,X
00120B  1  CA           		DEX
00120C  1  10 F7        		BPL RENAME3
00120E  1               
00120E  1  A9 01        		LDA #1
001210  1  20 68 0D     		JSR GETFILE
001213  1  30 16        		BMI RENAME9
001215  1               
001215  1  A0 0A        RENAME7:	LDY #10
001217  1  B9 43 07     RENAME6:	LDA DIRRENA,Y
00121A  1  C9 3F        		CMP #'?'
00121C  1  F0 05        		BEQ RENAME5
00121E  1               
00121E  1               ;		TAX
00121E  1               ;		LDA (FATPTRS),Y
00121E  1               ;		JSR PRINT
00121E  1               ;		TXA
00121E  1               
00121E  1  91 00        		STA (FATPTRS),Y
001220  1  8D 3D 07     		STA DDIRTY
001223  1  88           RENAME5:	DEY
001224  1  10 F1        		BPL RENAME6
001226  1               
001226  1  20 84 0D     		JSR NEXTFILE
001229  1  10 EA        		BPL RENAME7
00122B  1               
00122B  1  4C 47 13     RENAME9:	JMP DELETE8
00122E  1               ;
00122E  1               ;
00122E  1               ;
00122E  1  A9 03        CREDIR:		LDA #3
001230  1  20 68 0D     		JSR GETFILE
001233  1  30 03        		BMI CREDIR1
001235  1  4C E3 0E     		JMP OPEN170
001238  1               
001238  1  20 2D 0E     CREDIR1:	JSR VALIDNAM
00123B  1  10 03        		BPL CREDIR3
00123D  1  4C 62 0D     		JMP ERR165
001240  1               
001240  1  A9 08        CREDIR3:	LDA #8
001242  1  85 2A        		STA ICAX1Z
001244  1  20 73 0E     		JSR INITDIR
001247  1               
001247  1  A0 0B        		LDY #DATTRIB
001249  1  A9 10        		LDA #16		;ATTR-DIR
00124B  1  91 00        		STA (FATPTRS),Y
00124D  1               
00124D  1  A9 00        		LDA #0
00124F  1  8D 95 07     		STA FCURSEC
001252  1  20 8C 18     		JSR CLU2SEC
001255  1               
001255  1  20 F1 19     CREDIR2:	JSR READSEC
001258  1  20 53 15     		JSR CLEARBUF
00125B  1               
00125B  1  AD 95 07     		LDA FCURSEC
00125E  1  D0 38        		BNE CREDIR5
001260  1               
001260  1  A2 0A        		LDX #10
001262  1  A9 20        		LDA #32
001264  1  9D 00 09     CREDIR6:	STA BUFFER,X
001267  1  9D 20 09     		STA BUFFER+32,X
00126A  1  CA           		DEX
00126B  1  10 F7        		BPL CREDIR6
00126D  1               
00126D  1  A9 2E        		LDA #'.'
00126F  1  8D 00 09     		STA BUFFER
001272  1  8D 20 09     		STA BUFFER+32
001275  1  8D 21 09     		STA BUFFER+33
001278  1               
001278  1  A9 10        		LDA #16
00127A  1  8D 0B 09     		STA BUFFER+DATTRIB
00127D  1  8D 2B 09     		STA BUFFER+DATTRIB+32
001280  1               
001280  1  AD 91 07     		LDA FCURCLUS
001283  1  8D 1A 09     		STA BUFFER+DCLUS
001286  1  AD 92 07     		LDA FCURCLUS+1
001289  1  8D 1B 09     		STA BUFFER+DCLUS+1
00128C  1               
00128C  1  AD 41 07     		LDA DIRCLUS
00128F  1  8D 3A 09     		STA BUFFER+DCLUS+32
001292  1  AD 42 07     		LDA DIRCLUS+1
001295  1  8D 3B 09     		STA BUFFER+DCLUS+33
001298  1               
001298  1  EE 95 07     CREDIR5:	INC FCURSEC
00129B  1  AD 95 07     		LDA FCURSEC
00129E  1  CD 00 07     		CMP SECCLUS
0012A1  1  F0 06        		BEQ CREDIR4
0012A3  1               
0012A3  1  20 6A 14     		JSR INCSECTO
0012A6  1  4C 55 12     		JMP CREDIR2
0012A9  1               
0012A9  1  20 D7 19     CREDIR4:	JSR WRITESEC
0012AC  1  20 87 19     		JSR WRITEFAT
0012AF  1  4C 47 13     		JMP DELETE8
0012B2  1               ;
0012B2  1               ;
0012B2  1               ;
0012B2  1  20 55 0D     CHADIR:		JSR CHECKHAN
0012B5  1  10 01        		BPL CHADIR2
0012B7  1  60           		RTS
0012B8  1               
0012B8  1  AD 41 07     CHADIR2:	LDA DIRCLUS		;push DIRCLUS to stack
0012BB  1  48           		PHA
0012BC  1  AD 42 07     		LDA DIRCLUS+1
0012BF  1  48           		PHA
0012C0  1  C8           		INY
0012C1  1  B1 24        		lda_icbalz_y		;is '/' access from ROOT?
0012C3  1               ;		LDA (ICBALZ),Y
0012C3  1  C9 2F        		CMP #'/'
0012C5  1  D0 0B        		BNE CHADIR3		;no
0012C7  1               
0012C7  1  A9 00        		LDA #0			;set DIRCLUS to 0
0012C9  1  8D 41 07     		STA DIRCLUS
0012CC  1  8D 42 07     		STA DIRCLUS+1
0012CF  1  C8           		INY			;yes
0012D0  1  B1 24        		lda_icbalz_y		;get next char
0012D2  1               ;		LDA (ICBALZ),Y
0012D2  1               
0012D2  1  C9 9B        CHADIR3:	CMP #EOL		;end of filename?
0012D4  1  D0 05        		BNE CHADIR3C		;no
0012D6  1  68           		PLA			;otherwise pop DIRCLUS from stack
0012D7  1  68           		PLA			;and exit
0012D8  1  4C 4A 13     CHADIREND:	JMP DELETE9		;EXIT
0012DB  1               
0012DB  1  A9 03        CHADIR3C:	LDA #3			;read only dirs
0012DD  1  20 45 0D     		JSR DIRSTART		;copy DIRCLUS to FSTRTCL
0012E0  1  20 6F 0F     		JSR STR2RAW
0012E3  1  88           		DEY
0012E4  1  8C 68 07     		STY SAVEY
0012E7  1               
0012E7  1  20 51 13     		JSR OPENDIR
0012EA  1  90 0B        		BCC CHADIR3A
0012EC  1  68           CHADIR3B:	PLA
0012ED  1  8D 42 07     		STA DIRCLUS+1
0012F0  1  68           		PLA
0012F1  1  8D 41 07     		STA DIRCLUS
0012F4  1  4C E3 0E     		JMP OPEN170
0012F7  1  20 77 0D     CHADIR3A:	JSR FINDFIL1
0012FA  1  30 F0        		BMI CHADIR3B
0012FC  1               
0012FC  1  A0 1A        CHADIR1:	LDY #DCLUS
0012FE  1  B1 00        		LDA (FATPTRS),Y
001300  1               ;		JSR PUTHEX
001300  1  8D 41 07     		STA DIRCLUS
001303  1  C8           		INY
001304  1  B1 00        		LDA (FATPTRS),Y
001306  1               ;		JSR PUTHEX
001306  1  8D 42 07     		STA DIRCLUS+1
001309  1               ;		JSR KBGETC
001309  1               
001309  1  AC 68 07     CHADIR4:	LDY SAVEY
00130C  1  B1 24        CHADIR5:	lda_icbalz_y
00130E  1               ;		LDA (ICBALZ),Y
00130E  1  C9 2F        		CMP #'/'
001310  1  D0 C0        		BNE CHADIR3
001312  1  C8           		INY
001313  1  4C 0C 13     		JMP CHADIR5
001316  1               ;
001316  1               ;
001316  1               ;
001316  1  A9 00        DELETE:		LDA #0
001318  1  20 68 0D     		JSR GETFILE
00131B  1  30 2D        		BMI DELETE9
00131D  1               
00131D  1  A5 00        DELETE2:	LDA FATPTRS
00131F  1  48           		PHA
001320  1  A5 01        		LDA FATPTRS+1
001322  1  48           		PHA
001323  1               
001323  1  A0 1A        		LDY #DCLUS
001325  1  B1 00        		LDA (FATPTRS),Y
001327  1  AA           		TAX
001328  1  C8           		INY
001329  1  B1 00        		LDA (FATPTRS),Y
00132B  1               
00132B  1  A0 00        		LDY #0
00132D  1  20 39 0F     		JSR DELCLUS
001330  1               
001330  1  68           		PLA
001331  1  85 01        		STA FATPTRS+1
001333  1  68           		PLA
001334  1  85 00        		STA FATPTRS
001336  1               
001336  1  A0 00        		LDY #DNAME
001338  1  A9 E5        		LDA #$E5
00133A  1  91 00        		STA (FATPTRS),Y
00133C  1  8D 3D 07     		STA DDIRTY
00133F  1               
00133F  1  20 84 0D     		JSR NEXTFILE
001342  1  10 D9        		BPL DELETE2
001344  1               
001344  1  20 87 19     		JSR WRITEFAT
001347  1  20 D7 19     DELETE8:	JSR WRITESEC
00134A  1               
00134A  1  20 C4 0D     DELETE9:	JSR CLOSEFCB
00134D  1               ;		JMP OK
00134D  1               
00134D  1  A0 01        OK:		LDY #1
00134F  1  18           		CLC
001350  1  60           NOTOK:		RTS
001351  1               
001351  1               ;IODUMP:		LDX ICIDNO
001351  1               ;		LDY #0
001351  1               ;IODUMP1:	LDA IOCB,X
001351  1               ;		JSR PUTHEX
001351  1               ;		INX
001351  1               ;		INY
001351  1               ;		CPY #16
001351  1               ;		BNE IODUMP1
001351  1               ;		LDA #$9B
001351  1               ;		JSR PRINT
001351  1               ;		LDY #EOF
001351  1               ;		RTS
001351  1               
001351  1               ;
001351  1               ;
001351  1               ;
001351  1  AD 81 07     OPENDIR:	LDA FSTRTCL
001354  1  8D 91 07     		STA FCURCLUS
001357  1  0D 82 07     		ORA FSTRTCL+1
00135A  1  D0 06        		BNE OPENDIR1
00135C  1               
00135C  1  20 B2 13     		JSR CROOT
00135F  1  4C 51 11     		JMP CHECKDIR
001362  1               
001362  1  AD 82 07     OPENDIR1:	LDA FSTRTCL+1
001365  1  8D 92 07     		STA FCURCLUS+1
001368  1  A9 00        		LDA #0
00136A  1  A2 03        		LDX #3
00136C  1  9D 8D 07     OPENDIR2:	STA FVAR32,X
00136F  1  CA           		DEX
001370  1  10 FA        		BPL OPENDIR2
001372  1               
001372  1               ;		LDA FSTRTCL
001372  1               ;		JSR PUTHEX
001372  1               ;		LDA FSTRTCL+1
001372  1               ;		JSR PUTHEX
001372  1               ;		JSR KBGETC
001372  1               
001372  1  20 9B 15     		JSR FSEEK1
001375  1  4C 51 11     		JMP CHECKDIR
001378  1               ;
001378  1               ;
001378  1               ;
001378  1               READDIR:	;lda FATPTRS+1
001378  1               		;jsr PUTHEX
001378  1               		;lda FATPTRS
001378  1               		;jsr PUTHEX
001378  1               		;lda #' '
001378  1               		;jsr PRINT
001378  1               
001378  1  A0 00        		LDY #DNAME
00137A  1  B1 00        		LDA (FATPTRS),Y
00137C  1  F0 32        		BEQ READDIR9
00137E  1               
00137E  1  18           CDIR3:		CLC
00137F  1  A5 00        		LDA FATPTRS
001381  1  69 20        		ADC #32
001383  1  85 00        		STA FATPTRS
001385  1  A5 01        		LDA FATPTRS+1
001387  1  69 00        		ADC #0
001389  1  85 01        		STA FATPTRS+1
00138B  1  C9 0B        		CMP #(>BUFFER)+2
00138D  1  D0 1F        		BNE READDIR8		;OK => CLC,RTS
00138F  1               
00138F  1  AD 81 07     		LDA FSTRTCL
001392  1  0D 82 07     		ORA FSTRTCL+1
001395  1  F0 11        		BEQ CDIR4
001397  1               
001397  1  20 E8 14     		JSR INCSEC
00139A  1               
00139A  1               ;		LDA #'I
00139A  1               ;		JSR PRINT
00139A  1               ;		LDA FCURCLUS
00139A  1               ;		JSR PUTHEX
00139A  1               ;		LDA FCURCLUS+1
00139A  1               ;		JSR PUTHEX
00139A  1               
00139A  1  A9 FF        		LDA #$FF
00139C  1  CD 92 07     		CMP FCURCLUS+1
00139F  1  D0 0D        		BNE READDIR8
0013A1  1  CD 91 07     		CMP FCURCLUS
0013A4  1  D0 08        		BNE READDIR8
0013A6  1  F0 08        		BEQ READDIR9
0013A8  1               
0013A8  1  20 6A 14     CDIR4:		JSR INCSECTO
0013AB  1  20 C4 13     		JSR CROOT2
0013AE  1  18           READDIR8:	CLC
0013AF  1  60           		RTS
0013B0  1  38           READDIR9:	SEC
0013B1  1  60           		RTS
0013B2  1               ;
0013B2  1               ;
0013B2  1               ;
0013B2  1  A2 03        CROOT:		LDX #3
0013B4  1  BD 14 07     CROOT1:		LDA DIRBASE,X
0013B7  1  9D 0C 07     		STA SECTOR,X
0013BA  1  CA           		DEX
0013BB  1  10 F7        		BPL CROOT1
0013BD  1  E8           		INX
0013BE  1  8E 81 07     		STX FSTRTCL
0013C1  1  8E 82 07     		STX FSTRTCL+1
0013C4  1  A9 00        CROOT2:		LDA #<BUFFER
0013C6  1  85 00        		STA FATPTRS
0013C8  1  A9 09        		LDA #>BUFFER
0013CA  1  85 01        		STA FATPTRS+1
0013CC  1  4C F1 19     		JMP READSEC
0013CF  1               
0013CF  1               CHECKLEN:
0013CF  1               ;		LDX #3
0013CF  1               ;CL1:		LDA FRPOS,X
0013CF  1               ;		JSR PUTHEX
0013CF  1               ;		DEX
0013CF  1               ;		BPL CL1
0013CF  1               ;		LDA #EOL
0013CF  1               ;		JSR PRINT
0013CF  1               
0013CF  1  A2 03        		LDX #3
0013D1  1  BD 89 07     CHECKL2:	LDA FRPOS,X
0013D4  1  DD 83 07     		CMP FILELEN,X
0013D7  1  90 03        		BCC CHECKL1
0013D9  1  CA           		DEX
0013DA  1  10 F5        		BPL CHECKL2
0013DC  1               CHECKL1:
0013DC  1  60           		RTS
0013DD  1               ;
0013DD  1               ;
0013DD  1               ;
0013DD  1               READSLOW:
0013DD  1               ;		BIT FBURST	;burst off?
0013DD  1               ;		BMI READSLO1	;yes
0013DD  1               ;		DEC FBURST	;turn it off
0013DD  1               
0013DD  1               ;		JSR READSEC	;read sector
0013DD  1               
0013DD  1               READSLO1:
0013DD  1               ;		LDA FATPTRS
0013DD  1               ;		JSR PUTHEX
0013DD  1               ;		LDA FATPTRS+1
0013DD  1               ;		JSR PUTHEX
0013DD  1  A0 00        		LDY #0
0013DF  1  B1 00        		LDA (FATPTRS),Y
0013E1  1  85 2F        		STA CIOCHR
0013E3  1               
0013E3  1  20 57 14     		JSR INCRPOS
0013E6  1  20 DC 14     		JSR INCPTR
0013E9  1               
0013E9  1               READBYT4:
0013E9  1               ;		JSR CHECKLEN
0013E9  1  A5 2F        		LDA CIOCHR
0013EB  1               ;		BCS READBYT3
0013EB  1  A0 01        READBYT5:	LDY #1
0013ED  1  60           		RTS
0013EE  1               ;READBYT3:	LDY #3
0013EE  1               ;		RTS
0013EE  1               
0013EE  1  20 CF 13     READBYTE:	JSR CHECKLEN
0013F1  1  90 03        		BCC READBYT1
0013F3  1               ;		LDX ICIDNO
0013F3  1               ;		LDA FRPOS
0013F3  1               ;		JSR PUTHEX
0013F3  1               ;		STA ICBLLZ
0013F3  1               ;		STA ICBLL,X
0013F3  1               ;		LDA FRPOS+1
0013F3  1               ;		JSR PUTHEX
0013F3  1               ;		STA ICBLHZ
0013F3  1               ;		STA ICBLH,X
0013F3  1               
0013F3  1  A0 88        		LDY #EOF
0013F5  1  60           		RTS
0013F6  1               
0013F6  1  A4 00        READBYT1:	LDY FATPTRS	;FATPTRS must point to begin of buffer, check LO-byte=0
0013F8  1  D0 E3        		BNE READSLOW
0013FA  1               ;		TAY		;Y=0
0013FA  1  A5 29        		LDA ICBLHZ	;still >= 512 bytes to be read?
0013FC  1  C9 02        		CMP #2
0013FE  1  90 DD        		BCC READSLOW
001400  1  A5 22        		LDA ICCOMZ	;only GETCHAR allowed
001402  1  C9 07        		CMP #GETCHR
001404  1  D0 D7        		BNE READSLOW
001406  1  A5 01        		LDA FATPTRS+1
001408  1  C9 09        		CMP #>BUFFER	;FATPTRS must point to begin of buffer
00140A  1  D0 D1        		BNE READSLOW
00140C  1               
00140C  1               ;		SEC		;still more than 512 bytes in the files available?
00140C  1  AD 83 07     		LDA FILELEN	;filelen can't be greater then 64k
00140F  1  ED 89 07     		SBC FRPOS
001412  1  AD 84 07     		LDA FILELEN+1
001415  1  ED 8A 07     		SBC FRPOS+1
001418  1  C9 02        		CMP #2
00141A  1  90 C1        		BCC READSLOW
00141C  1               
00141C  1               ;		JSR IODUMP
00141C  1               
00141C  1               READFAST:
00141C  1               ;		BIT FBURST	;Burst OFF?
00141C  1               ;		BMI READFA2	;yes
00141C  1               
00141C  1               ;		STY FBURST	;Y=0
00141C  1               
00141C  1               ;		JSR INITLSEC
00141C  1               
00141C  1               ;		LDA ICBALZ
00141C  1               ;		STA BUFADRL
00141C  1               ;		LDA ICBAHZ
00141C  1               ;		STA BUFADRH
00141C  1               ;		JSR READSECF
00141C  1               ;		LDA #<BUFFER
00141C  1               ;		STA BUFADRL
00141C  1               ;		LDA #>BUFFER
00141C  1               ;		STA BUFADRH
00141C  1               
00141C  1               ;		INC ICBAHZ
00141C  1               ;		LDY #$FF
00141C  1               ;		LDA (ICBALZ),Y
00141C  1               ;		JMP READFA3
00141C  1               
00141C  1  B9 00 09     READFA2:	LDA BUFFER,Y
00141F  1  91 24        		sta_icbalz_y
001421  1               ;		STA (ICBALZ),Y
001421  1  88           		DEY
001422  1  D0 F8        		BNE READFA2
001424  1  E6 25        		INC ICBAHZ
001426  1               	.IF PLATFORM=0
001426  1               		bne READFA1
001426  1               		inc ICBABZ
001426  1               	.ENDIF
001426  1  B9 00 0A     READFA1:	LDA BUFFER+$100,Y
001429  1  91 24        		sta_icbalz_y
00142B  1               ;		STA (ICBALZ),Y
00142B  1  C8           		INY
00142C  1  D0 F8        		BNE READFA1
00142E  1               
00142E  1  85 2F        READFA3:	STA CIOCHR
001430  1  E6 25        		INC ICBAHZ
001432  1               	.IF PLATFORM=0
001432  1               		bne READFA3A
001432  1               		inc ICBABZ
001432  1               	.ENDIF
001432  1               
001432  1               READFA3A:
001432  1               	.IF PLATFORM=0
001432  1               		lda ICBLHZ
001432  1               		bne READFA3B
001432  1               		dec ICBLBZ
001432  1               READFA3B:	dec ICBLHZ
001432  1               		bne READFA3C
001432  1               		dec ICBLBZ
001432  1               READFA3C:	dec ICBLHZ
001432  1               	.ELSE
001432  1  C6 29        		DEC ICBLHZ
001434  1  C6 29        		DEC ICBLHZ
001436  1               	.ENDIF
001436  1  20 5C 14     		JSR INCRPOS2
001439  1  20 5C 14     		JSR INCRPOS2
00143C  1               
00143C  1  20 E8 14     		JSR INCSEC
00143F  1               
00143F  1  A5 29        		LDA ICBLHZ
001441  1  05 28        		ORA ICBLLZ
001443  1               	.IF PLATFORM=0
001443  1               		ora ICBLBZ
001443  1               	.ENDIF
001443  1  F0 03        		BEQ READFA4
001445  1  4C EE 13     		JMP READBYTE
001448  1               
001448  1  E6 28        READFA4:	INC ICBLLZ	;set buffer length to 1
00144A  1               
00144A  1  A5 24        		LDA ICBALZ	;decrement buffer address
00144C  1  D0 02        		BNE READFA5
00144E  1               
00144E  1               	.IF PLATFORM=0
00144E  1               		lda ICBAHZ
00144E  1               		bne READFA6
00144E  1               		dec ICBABZ
00144E  1               	.ENDIF
00144E  1               
00144E  1  C6 25        READFA6:	DEC ICBAHZ
001450  1  C6 24        READFA5:	DEC ICBALZ
001452  1  A5 2F        		LDA CIOCHR
001454  1  4C EB 13     		JMP READBYT5	;exit success, Y=1
001457  1               
001457  1               
001457  1  EE 89 07     INCRPOS:	INC FRPOS
00145A  1  D0 0D        		BNE INCRPOS1
00145C  1  EE 8A 07     INCRPOS2:	INC FRPOS+1
00145F  1  D0 08        		BNE INCRPOS1
001461  1  EE 8B 07     		INC FRPOS+2
001464  1  D0 03        		BNE INCRPOS1
001466  1  EE 8C 07     		INC FRPOS+3
001469  1  60           INCRPOS1:	RTS
00146A  1               
00146A  1               
00146A  1  EE 0C 07     INCSECTO:	INC SECTOR
00146D  1  D0 0D        		BNE INCSECT1
00146F  1  EE 0D 07     		INC SECTOR+1
001472  1  D0 08        		BNE INCSECT1
001474  1  EE 0E 07     		INC SECTOR+2
001477  1  D0 03        		BNE INCSECT1
001479  1  EE 0F 07     		INC SECTOR+3
00147C  1  60           INCSECT1:	RTS
00147D  1               ;
00147D  1               ; convert 32 bit number to 10-byte text
00147D  1               ;
00147D  1  A9 00        BIN2DEC:	LDA #0			;clear 5-byte BCD (=10 nibbles)
00147F  1  A2 04        		LDX #4
001481  1  9D 2C 07     BIN2DEC1:	STA BCD,X
001484  1  CA           		DEX
001485  1  10 FA        		BPL BIN2DEC1
001487  1               
001487  1  A2 20        		LDX #32
001489  1  F8           		SED
00148A  1               BIN2DEC2:
00148A  1  0E 28 07     		ASL BIN
00148D  1  2E 29 07     		ROL BIN+1
001490  1  2E 2A 07     		ROL BIN+2
001493  1  2E 2B 07     		ROL BIN+3
001496  1               
001496  1  A0 05        		LDY #5
001498  1               BIN2DEC3:
001498  1  B9 2B 07     		LDA BCD-1,Y
00149B  1  79 2B 07     		ADC BCD-1,Y
00149E  1  99 2B 07     		STA BCD-1,Y
0014A1  1  88           		DEY
0014A2  1  D0 F4        		BNE BIN2DEC3
0014A4  1  CA           		DEX
0014A5  1  D0 E3        		BNE BIN2DEC2
0014A7  1               
0014A7  1  D8           		CLD
0014A8  1  8C 4E 07     		STY NODISPL		;Y = 0
0014AB  1               BIN2DEC4:
0014AB  1  BD 2C 07     		LDA BCD,X
0014AE  1  4A           		LSR
0014AF  1  4A           		LSR
0014B0  1  4A           		LSR
0014B1  1  4A           		LSR
0014B2  1  20 C3 14     		JSR BIN2INC
0014B5  1  BD 2C 07     		LDA BCD,X
0014B8  1  29 0F        		AND #15
0014BA  1  20 C3 14     		JSR BIN2INC
0014BD  1  E8           		INX
0014BE  1  E0 05        		CPX #5
0014C0  1  D0 E9        		BNE BIN2DEC4
0014C2  1  60           		RTS
0014C3  1               
0014C3  1  D0 0D        BIN2INC:	BNE BIN2INC1		; no '0' => print it?
0014C5  1  2C 4E 07     		BIT NODISPL		; print if nodisplay negativ
0014C8  1  30 0B        		BMI BIN2INC2
0014CA  1  C0 09        		CPY #9			; print last digit in any case
0014CC  1  F0 07        		BEQ BIN2INC2
0014CE  1  A9 20        		LDA #32			; else print space
0014D0  1  D0 05        		BNE BIN2INC3
0014D2  1               
0014D2  1  CE 4E 07     BIN2INC1:	DEC NODISPL
0014D5  1  49 30        BIN2INC2:	EOR #'0'
0014D7  1  99 31 07     BIN2INC3:	STA DECIMAL,Y
0014DA  1  C8           		INY
0014DB  1  60           		RTS
0014DC  1               
0014DC  1               
0014DC  1               
0014DC  1  E6 00        INCPTR:		INC FATPTRS
0014DE  1  D0 72        		BNE INCPTR9
0014E0  1  E6 01        		INC FATPTRS+1
0014E2  1  A5 01        		LDA FATPTRS+1
0014E4  1  C9 0B        		CMP #(>BUFFER)+2
0014E6  1  D0 6A        		BNE INCPTR9
0014E8  1               ;
0014E8  1               ; READ NEXT SECTOR
0014E8  1               ;
0014E8  1  EE 95 07     INCSEC:		INC FCURSEC
0014EB  1  AD 95 07     		LDA FCURSEC
0014EE  1  CD 00 07     		CMP SECCLUS
0014F1  1  F0 06        		BEQ INCSEC3	;new cluster necessary!
0014F3  1               
0014F3  1  20 6A 14     		JSR INCSECTO	;just increment sector
0014F6  1  4C 45 15     		JMP INCPTR8	;reset buffer-ptr and read-sector
0014F9  1               
0014F9  1               ;
0014F9  1               ; READ NEXT CLUSTER
0014F9  1               ;
0014F9  1  A9 00        INCSEC3:	LDA #0
0014FB  1  8D 95 07     		STA FCURSEC
0014FE  1               
0014FE  1  AE 91 07     		LDX FCURCLUS
001501  1  AD 92 07     		LDA FCURCLUS+1
001504  1  20 12 19     		JSR GETCLUST
001507  1               
001507  1  C9 FF        		CMP #$FF
001509  1  D0 31        		BNE INCSEC4
00150B  1  E0 FF        		CPX #$FF
00150D  1  D0 2D        		BNE INCSEC4
00150F  1               
00150F  1  A8           		TAY
001510  1  A5 2A        		LDA ICAX1Z	;READ ACCESS
001512  1  29 08        		AND #8
001514  1  F0 36        		BEQ INCPTR10	;YES, do not acquire new cluster
001516  1               
001516  1               ;		LDA ICAX1Z
001516  1               ;		AND #4		;UPDATE?
001516  1               ;		BNE INCPTR10
001516  1               
001516  1  20 63 15     		JSR CHAINCLU	;ONLY VALID
001519  1               
001519  1  AD AD 07     		LDA DIRFILE	;IF
00151C  1  C9 02        		CMP #2		;GET FREE
00151E  1  D0 22        		BNE INCSEC5	;DIR
001520  1               
001520  1  20 8C 18     		JSR CLU2SEC
001523  1               
001523  1  AD 00 07     		LDA SECCLUS
001526  1  8D 95 07     		STA FCURSEC
001529  1               
001529  1  20 F1 19     INCSEC2:	JSR READSEC
00152C  1  20 53 15     		JSR CLEARBUF
00152F  1  20 D7 19     		JSR WRITESEC
001532  1               
001532  1  20 6A 14     		JSR INCSECTO
001535  1               
001535  1  CE 95 07     		DEC FCURSEC
001538  1  D0 EF        		BNE INCSEC2
00153A  1  F0 06        		BEQ INCSEC5
00153C  1               ;
00153C  1  8E 91 07     INCSEC4:	STX FCURCLUS
00153F  1  8D 92 07     		STA FCURCLUS+1
001542  1               
001542  1  20 8C 18     INCSEC5:	JSR CLU2SEC
001545  1               
001545  1               ;		BIT FBURST	;burst active?
001545  1               ;		BPL INCPTR9	;yes ->
001545  1               
001545  1  A9 09        INCPTR8:	LDA #>BUFFER
001547  1  85 01        		STA FATPTRS+1
001549  1               
001549  1  4C F1 19     		JMP READSEC
00154C  1               
00154C  1               INCPTR10:
00154C  1  8E 91 07     		STX FCURCLUS
00154F  1  8C 92 07     		STY FCURCLUS+1
001552  1  60           INCPTR9:	RTS
001553  1               ;
001553  1               ;
001553  1               ;
001553  1  A9 00        CLEARBUF:	LDA #0
001555  1  AA           		TAX
001556  1  9D 00 09     CLEARBU1:	STA BUFFER,X
001559  1  9D 00 0A     		STA BUFFER+$100,X
00155C  1  E8           		INX
00155D  1  D0 F7        		BNE CLEARBU1
00155F  1  EE 3D 07     		INC DDIRTY
001562  1  60           		RTS
001563  1               ;
001563  1               ; GET FREE CLUSTER
001563  1               ; INIT TO $FFFF
001563  1               ; CHAIN WITH CURCLUS
001563  1               ;
001563  1  AE 91 07     CHAINCLU:	LDX FCURCLUS
001566  1  AD 92 07     		LDA FCURCLUS+1
001569  1  20 4F 16     		JSR GETFCLUS
00156C  1               
00156C  1  20 02 19     		JSR GETNEXTC
00156F  1               
00156F  1  8C 3E 07     		STY FDIRTY	;Y IS ODD
001572  1  AD 3C 07     		LDA NEWCLUS+1
001575  1  8D 92 07     		STA FCURCLUS+1
001578  1  91 00        		STA (FATPTRS),Y
00157A  1  88           		DEY
00157B  1  AD 3B 07     		LDA NEWCLUS
00157E  1  8D 91 07     		STA FCURCLUS
001581  1  91 00        		STA (FATPTRS),Y
001583  1  60           		RTS
001584  1               ;
001584  1               ;
001584  1               ;
001584  1  AD 81 07     FSEEK:		LDA FSTRTCL
001587  1  8D 91 07     		STA FCURCLUS
00158A  1  AD 82 07     		LDA FSTRTCL+1
00158D  1  8D 92 07     		STA FCURCLUS+1
001590  1               
001590  1  A2 03        		LDX #3
001592  1  BD 89 07     FSEEK2:		LDA FRPOS,X
001595  1  9D 8D 07     		STA FVAR32,X
001598  1  CA           		DEX
001599  1  10 F7        		BPL FSEEK2
00159B  1               
00159B  1  A9 8D        FSEEK1:		LDA #<FVAR32
00159D  1  85 02        		STA FATPTRD
00159F  1  A9 07        		LDA #>FVAR32
0015A1  1  85 03        		STA FATPTRD+1
0015A3  1  A9 24        		LDA #<BYTCLUS
0015A5  1  85 00        		STA FATPTRS
0015A7  1  A9 07        		LDA #>BYTCLUS
0015A9  1  85 01        		STA FATPTRS+1
0015AB  1               
0015AB  1  20 5F 19     		JSR CMP32	; FATPTRD < FATPTRS?
0015AE  1  90 40        		BCC FSEEKS	; ja
0015B0  1               
0015B0  1  20 4F 19     		JSR SBC32
0015B3  1               
0015B3  1  AD 91 07     		LDA FCURCLUS
0015B6  1  48           		PHA
0015B7  1  AD 92 07     		LDA FCURCLUS+1
0015BA  1  48           		PHA
0015BB  1  20 02 19     		JSR GETNEXTC
0015BE  1               
0015BE  1  C9 FF        		CMP #$FF
0015C0  1  D0 12        		BNE FSEEK3
0015C2  1  E0 FF        		CPX #$FF
0015C4  1  D0 0E        		BNE FSEEK3
0015C6  1               
0015C6  1  68           		PLA
0015C7  1  8D 92 07     		STA FCURCLUS+1
0015CA  1  68           		PLA
0015CB  1  8D 91 07     		STA FCURCLUS
0015CE  1  20 63 15     		JSR CHAINCLU
0015D1  1  4C 9B 15     		JMP FSEEK1
0015D4  1               
0015D4  1  68           FSEEK3:		PLA
0015D5  1  68           		PLA
0015D6  1  4C 9B 15     		JMP FSEEK1
0015D9  1               
0015D9  1  48           DUMPSEC:	pha
0015DA  1  8A           		txa
0015DB  1  48           		pha
0015DC  1  A2 03        		ldx #3
0015DE  1  BD 0C 07     DUMPSEC1:	lda SECTOR,x
0015E1  1  20 89 1A     		jsr PUTHEX
0015E4  1  CA           		dex
0015E5  1  10 F7        		bpl DUMPSEC1
0015E7  1  A9 9B        		lda #EOL
0015E9  1  20 B1 1A     		jsr PRINT
0015EC  1  68           		pla
0015ED  1  AA           		tax
0015EE  1  68           		pla
0015EF  1  60           		rts
0015F0  1               ;
0015F0  1               ; INSIDE CLUSTER
0015F0  1               ; SECTOR+OFFSET
0015F0  1               ;
0015F0  1  A9 00        FSEEKS:		LDA #0
0015F2  1  8D 95 07     		STA FCURSEC
0015F5  1  20 8C 18     		JSR CLU2SEC
0015F8  1               
0015F8  1               ;		jsr DUMPSEC
0015F8  1               
0015F8  1  AD 8E 07     		LDA FVAR32+1
0015FB  1  4A           		LSR
0015FC  1  8D 95 07     		STA FCURSEC
0015FF  1  18           		CLC
001600  1  6D 0D 07     		ADC SECTOR+1
001603  1  8D 0D 07     		STA SECTOR+1
001606  1  90 08        		BCC FSEEKS1
001608  1  EE 0E 07     		INC SECTOR+2
00160B  1  D0 03        		BNE FSEEKS1
00160D  1  EE 0F 07     		INC SECTOR+3
001610  1               
001610  1               ;		jsr DUMPSEC
001610  1               
001610  1               
001610  1  AD 8E 07     FSEEKS1:	LDA FVAR32+1
001613  1  29 01        		AND #1
001615  1  18           		CLC
001616  1  69 09        		ADC #>BUFFER
001618  1  85 01        		STA FATPTRS+1
00161A  1  AD 8D 07     		LDA FVAR32
00161D  1  85 00        		STA FATPTRS
00161F  1               
00161F  1               ;		jsr DUMPSEC
00161F  1               ;		JSR SEC2FSEC
00161F  1               
00161F  1  20 F1 19     		JSR READSEC
001622  1               ;		JSR KBGETC
001622  1  60           		RTS
001623  1               ;
001623  1               SEC2FSEC:
001623  1               ;		LDA #'S'
001623  1               ;		JSR PRINT
001623  1               
001623  1  A2 03        		LDX #3
001625  1  BD 0C 07     SEC2FSE1:	LDA SECTOR,X
001628  1  9D 98 07     		STA FSECTOR,X
00162B  1  CA           		DEX
00162C  1  10 F7        		BPL SEC2FSE1
00162E  1               
00162E  1  A5 00        PTR2FPTR:	LDA FATPTRS
001630  1  8D 96 07     		STA FCURPTR
001633  1  A5 01        		LDA FATPTRS+1
001635  1  8D 97 07     		STA FCURPTR+1
001638  1  60           		RTS
001639  1               ;
001639  1               ;
001639  1               ;
001639  1               FSEC2SEC:
001639  1               ;		LDA #'F'
001639  1               ;		JSR PRINT
001639  1               
001639  1  A2 03        		LDX #3
00163B  1  BD 98 07     FSEC2SE1:	LDA FSECTOR,X
00163E  1  9D 0C 07     		STA SECTOR,X
001641  1  CA           		DEX
001642  1  10 F7        		BPL FSEC2SE1
001644  1               
001644  1  AD 96 07     FPTR2PTR:	LDA FCURPTR
001647  1  85 00        		STA FATPTRS
001649  1  AD 97 07     		LDA FCURPTR+1
00164C  1  85 01        		STA FATPTRS+1
00164E  1  60           		RTS
00164F  1               
00164F  1               ;
00164F  1               ; GET FREE CLUSTER SEARCHING FROM
00164F  1               ;
00164F  1               ; X:CLUST:L
00164F  1               ; A:CLUST:H
00164F  1               ;
00164F  1               ; AND INITIALIZE TO $FFFF
00164F  1               ;
00164F  1               ; FATPTRD	: POINTER TO PAGE OF FAT-BUF
00164F  1               ; Y	: POINTS TO CLUSTER IN PAGE
00164F  1               ; NEWCLUS: HOLDS NEW CLUSTER-NO.
00164F  1               ;
00164F  1  8E 3B 07     GETFCLUS:	STX NEWCLUS
001652  1  8D 3C 07     		STA NEWCLUS+1
001655  1               
001655  1  20 12 19     		JSR GETCLUST
001658  1  88           		DEY
001659  1  84 02        		STY FATPTRD
00165B  1  A5 01        		LDA FATPTRS+1
00165D  1  85 03        		STA FATPTRD+1
00165F  1               
00165F  1  EE 3B 07     GETFCLU3:	INC NEWCLUS
001662  1  D0 03        		BNE GETFCLU4
001664  1  EE 3C 07     		INC NEWCLUS+1
001667  1               
001667  1  E6 02        GETFCLU4:	INC FATPTRD
001669  1  E6 02        		INC FATPTRD
00166B  1  D0 12        		BNE GETFCLU1
00166D  1  E6 03        		INC FATPTRD+1
00166F  1  A5 03        		LDA FATPTRD+1
001671  1  C9 0D        		CMP #(>FATBUF)+2
001673  1  D0 0A        		BNE GETFCLU1
001675  1               
001675  1  20 6A 14     		JSR INCSECTO
001678  1               
001678  1  20 A1 19     		JSR READFAT
00167B  1  A9 0B        		LDA #>FATBUF
00167D  1  85 03        		STA FATPTRD+1
00167F  1  A0 00        GETFCLU1:	LDY #0
001681  1  B1 02        		LDA (FATPTRD),Y
001683  1  C8           		INY
001684  1  11 02        		ORA (FATPTRD),Y
001686  1  D0 D7        		BNE GETFCLU3
001688  1  A9 FF        		LDA #$FF
00168A  1  8D 3E 07     		STA FDIRTY
00168D  1  91 02        		STA (FATPTRD),Y
00168F  1  88           		DEY
001690  1  91 02        		STA (FATPTRD),Y
001692  1               
001692  1               ;		LDA NEWCLUS
001692  1               ;		JSR PUTHEX
001692  1               ;		LDA NEWCLUS+1
001692  1               ;		JSR PUTHEX
001692  1  60           		RTS
001693  1               
001693  1               DIE:	.IF PLATFORM <= 1
001693  1               		SEC
001693  1               		RTS
001693  1               	.ELSE
001693  1  00           		BRK
001694  1               	.ENDIF
001694  1               
001694  1  A9 FF        INITLSEC:	LDA #$FF
001696  1  A2 03        		LDX #3
001698  1  9D 1C 07     INITLSEC1:	STA LASTSEC,X
00169B  1  CA           		DEX
00169C  1  10 FA        		BPL INITLSEC1
00169E  1  60           		RTS
00169F  1               
00169F  1  A9 FF        INITFSEC:	LDA #$FF
0016A1  1  A2 03        		LDX #3
0016A3  1  9D 20 07     INITFSEC1:	STA LASTFAT,X
0016A6  1  CA           		DEX
0016A7  1  10 FA        		BPL INITFSEC1
0016A9  1  60           		RTS
0016AA  1               
0016AA  1               INITFAT:
0016AA  1               ;	.IF PLATFORM=1
0016AA  1               ;		jsr jSDInit
0016AA  1               ;	.ENDIF
0016AA  1  A2 00        		LDX #0
0016AC  1  8A           		TXA
0016AD  1  9D 00 07     VCLEAR:		STA V,X
0016B0  1  9D 00 08     		STA V+256,X
0016B3  1  CA           		DEX
0016B4  1  D0 F7        		BNE VCLEAR
0016B6  1               
0016B6  1  20 94 16     		JSR INITLSEC
0016B9  1  20 9F 16     		JSR INITFSEC
0016BC  1               
0016BC  1  8D 7F 07     		STA FIOCBNR
0016BF  1  8D 00 08     		STA FCB0
0016C2  1  8D 40 08     		STA FCB1
0016C5  1  8D 80 08     		STA FCB2
0016C8  1  8D C0 08     		STA FCB3
0016CB  1               
0016CB  1  A9 00        		LDA #0		;initialise offset
0016CD  1  AA           VSET2:		TAX		;into FCB
0016CE  1  9D 01 08     		STA FCB0+1,X	; 0, 64, 128, 192
0016D1  1  18           		CLC
0016D2  1  69 40        		ADC #64
0016D4  1  D0 F7        		BNE VSET2
0016D6  1               
0016D6  1  A9 00        		LDA #<BUFFER
0016D8  1  8D 3F 07     		STA BUFADRL
0016DB  1  A9 09        		LDA #>BUFFER
0016DD  1  8D 40 07     		STA BUFADRH
0016E0  1               
0016E0  1  A9 0B        		LDA #VALIDNA2-VALIDCHA-2
0016E2  1  8D 69 07     		STA VALIDS
0016E5  1               
0016E5  1               ;		LDA #'/
0016E5  1               ;		STA PATH
0016E5  1               
0016E5  1  20 35 18     		JSR READBOOT
0016E8  1  30 A9        		BMI DIE
0016EA  1  C9 03        		CMP #3
0016EC  1  D0 A5        		BNE DIE
0016EE  1               
0016EE  1  A2 0A        		LDX #10
0016F0  1  BD 0D 09     VCOPY:		LDA BUFFER+13,X
0016F3  1  9D 00 07     		STA V,X
0016F6  1  CA           		DEX
0016F7  1  10 F7        		BPL VCOPY
0016F9  1               
0016F9  1  AD 00 07     		LDA SECCLUS
0016FC  1  0A           		ASL
0016FD  1  8D 25 07     		STA BYTCLUS+1
001700  1               
001700  1  18           		CLC
001701  1  AD 0C 07     		LDA SECTOR
001704  1  6D 01 07     		ADC RESSEC
001707  1  8D 10 07     		STA FATBASE
00170A  1  8D 14 07     		STA DIRBASE
00170D  1  AD 0D 07     		LDA SECTOR+1
001710  1  6D 02 07     		ADC RESSEC+1
001713  1  8D 11 07     		STA FATBASE+1
001716  1  8D 15 07     		STA DIRBASE+1
001719  1  90 0E        		BCC DIRBAS
00171B  1  EE 12 07     		INC FATBASE+2
00171E  1  EE 16 07     		INC DIRBASE+2
001721  1  D0 06        		BNE DIRBAS
001723  1  EE 13 07     		INC FATBASE+3
001726  1  EE 17 07     		INC DIRBASE+3
001729  1               
001729  1  18           DIRBAS:		CLC
00172A  1  AE 03 07     		LDX NUMFATS
00172D  1  AD 14 07     DIRBAS2:	LDA DIRBASE
001730  1  6D 09 07     		ADC SECSFAT
001733  1  8D 14 07     		STA DIRBASE
001736  1  AD 15 07     		LDA DIRBASE+1
001739  1  6D 0A 07     		ADC SECSFAT+1
00173C  1  8D 15 07     		STA DIRBASE+1
00173F  1  90 08        		BCC DIRBAS1
001741  1  EE 16 07     		INC DIRBASE+2
001744  1  D0 03        		BNE DIRBAS1
001746  1  EE 17 07     		INC DIRBASE+3
001749  1  CA           DIRBAS1:	DEX
00174A  1  D0 E1        		BNE DIRBAS2
00174C  1               
00174C  1               ;		LDY #<DIRBASE	;COPY DIRBASE
00174C  1               ;		LDA #>DIRBASE	;TO SECTOR
00174C  1               ;		JSR COPY32
00174C  1               
00174C  1  AD 04 07     		LDA NUMDIR	;#ROOTDIRS
00174F  1  8D 18 07     		STA DATBASE
001752  1  AD 05 07     		LDA NUMDIR+1
001755  1  8D 19 07     		STA DATBASE+1
001758  1               
001758  1  A2 04        		LDX #4
00175A  1  4E 19 07     DATBAS1:	LSR DATBASE+1
00175D  1  6E 18 07     		ROR DATBASE
001760  1  CA           		DEX
001761  1  D0 F7        		BNE DATBAS1
001763  1               
001763  1  18           		CLC
001764  1  AD 18 07     		LDA DATBASE
001767  1  6D 14 07     		ADC DIRBASE
00176A  1  8D 18 07     		STA DATBASE
00176D  1  AD 19 07     		LDA DATBASE+1
001770  1  6D 15 07     		ADC DIRBASE+1
001773  1  8D 19 07     		STA DATBASE+1
001776  1               
001776  1               
001776  1               PRINTINFO:
001776  1               	.IF PLATFORM = 2
001776  1  A9 04        		LDA #4
001778  1  2C 0F D2     		BIT SKSTAT
00177B  1  D0 07        		BNE PRINTINFO4
00177D  1  AD 09 D2     		LDA KBCODE
001780  1  C9 11        		CMP #17
001782  1  F0 01        		BEQ PRINTINFO6
001784  1  60           PRINTINFO4:	RTS
001785  1               	.ENDIF
001785  1               
001785  1  38           PRINTINFO6:	SEC
001786  1  A2 F4        		LDX #<MSG0
001788  1  A9 1A        		LDA #>MSG0
00178A  1  20 D1 1A     		JSR PRINTSTR
00178D  1  AD 00 07     		LDA SECCLUS
001790  1  20 89 1A     		JSR PUTHEX
001793  1               
001793  1  38           		SEC
001794  1  A2 0B        		LDX #<MSG1
001796  1  A9 1B        		LDA #>MSG1
001798  1  20 D1 1A     		JSR PRINTSTR
00179B  1  AD 02 07     		LDA RESSEC+1
00179E  1  20 89 1A     		JSR PUTHEX
0017A1  1  AD 01 07     		LDA RESSEC
0017A4  1  20 89 1A     		JSR PUTHEX
0017A7  1               
0017A7  1  38           		SEC
0017A8  1  A2 22        		LDX #<MSG2
0017AA  1  A9 1B        		LDA #>MSG2
0017AC  1  20 D1 1A     		JSR PRINTSTR
0017AF  1  AD 03 07     		LDA NUMFATS
0017B2  1  20 89 1A     		JSR PUTHEX
0017B5  1               
0017B5  1  38           		SEC
0017B6  1  A2 39        		LDX #<MSG3
0017B8  1  A9 1B        		LDA #>MSG3
0017BA  1  20 D1 1A     		JSR PRINTSTR
0017BD  1  AD 05 07     		LDA NUMDIR+1
0017C0  1  20 89 1A     		JSR PUTHEX
0017C3  1  AD 04 07     		LDA NUMDIR
0017C6  1  20 89 1A     		JSR PUTHEX
0017C9  1               
0017C9  1  38           		SEC
0017CA  1  A2 50        		LDX #<MSG4
0017CC  1  A9 1B        		LDA #>MSG4
0017CE  1  20 D1 1A     		JSR PRINTSTR
0017D1  1  AD 0A 07     		LDA SECSFAT+1
0017D4  1  20 89 1A     		JSR PUTHEX
0017D7  1  AD 09 07     		LDA SECSFAT
0017DA  1  20 89 1A     		JSR PUTHEX
0017DD  1               
0017DD  1  38           		SEC
0017DE  1  A2 67        		LDX #<MSG5
0017E0  1  A9 1B        		LDA #>MSG5
0017E2  1  20 D1 1A     		JSR PRINTSTR
0017E5  1  A2 03        		LDX #3
0017E7  1  BD 0C 07     PRINTINFO7:	LDA SECTOR,X
0017EA  1  20 89 1A     		JSR PUTHEX
0017ED  1  CA           		DEX
0017EE  1  10 F7        		BPL PRINTINFO7
0017F0  1               
0017F0  1  38           		SEC
0017F1  1  A2 7E        		LDX #<MSG6
0017F3  1  A9 1B        		LDA #>MSG6
0017F5  1  20 D1 1A     		JSR PRINTSTR
0017F8  1  A2 03        		LDX #3
0017FA  1  BD 10 07     PRINTINFO1:	LDA FATBASE,X
0017FD  1  20 89 1A     		JSR PUTHEX
001800  1  CA           		DEX
001801  1  10 F7        		BPL PRINTINFO1
001803  1               
001803  1  38           		SEC
001804  1  A2 95        		LDX #<MSG7
001806  1  A9 1B        		LDA #>MSG7
001808  1  20 D1 1A     		JSR PRINTSTR
00180B  1  A2 03        		LDX #3
00180D  1  BD 14 07     PRINTINFO2:	LDA DIRBASE,X
001810  1  20 89 1A     		JSR PUTHEX
001813  1  CA           		DEX
001814  1  10 F7        		BPL PRINTINFO2
001816  1               
001816  1  38           		SEC
001817  1  A2 AC        		LDX #<MSG8
001819  1  A9 1B        		LDA #>MSG8
00181B  1  20 D1 1A     		JSR PRINTSTR
00181E  1  A2 03        		LDX #3
001820  1  BD 18 07     PRINTINFO3:	LDA DATBASE,X
001823  1  20 89 1A     		JSR PUTHEX
001826  1  CA           		DEX
001827  1  10 F7        		BPL PRINTINFO3
001829  1               
001829  1               	.IF PLATFORM = 2
001829  1  A9 04        		LDA #4
00182B  1  2C 0F D2     PRINTINFO5:	BIT SKSTAT
00182E  1  F0 FB        		BEQ PRINTINFO5
001830  1               	.ENDIF
001830  1               
001830  1  20 C9 1A     		JSR NEWLINE
001833  1  18           		CLC
001834  1  60           		RTS
001835  1               ;
001835  1               ;
001835  1               ;
001835  1               READBOOT:
001835  1  A0 0C        		LDY #<SECTOR	;Clear SECTOR via
001837  1  A9 07        		LDA #>SECTOR	;FATPTRD
001839  1  20 79 19     		JSR CLEAR32
00183C  1               
00183C  1  20 F1 19     		JSR READSEC
00183F  1  30 0B        		BMI READB2
001841  1               
001841  1  20 59 18     		JSR CHECKFAT
001844  1  F0 07        		BEQ READB3
001846  1  C9 03        		CMP #3
001848  1  D0 02        		BNE READB2
00184A  1  A9 00        READB1:		LDA #0
00184C  1  60           READB2:		RTS
00184D  1               
00184D  1  A0 C6        READB3:		LDY #<(BUFFER+PART1)
00184F  1  A9 0A        		LDA #>(BUFFER+PART1)
001851  1  20 6B 19     		JSR COPY32
001854  1               
001854  1  20 F1 19     		JSR READSEC
001857  1  30 F3        		BMI READB2
001859  1               ;
001859  1               ; 0:FAT16 MBR
001859  1               ; 1:NO BOOTSEC/MBR
001859  1               ; 2:BOOTSEC, NO FAT16
001859  1               ; 3:BOOTSEC, FAT16
001859  1               ;
001859  1  AD FE 0A     CHECKFAT:	LDA BUFFER+$1FE
00185C  1  C9 55        		CMP #$55
00185E  1  F0 03        		BEQ CHKFAT1
001860  1  A9 01        CHKFAT2:	LDA #1
001862  1  60           		RTS
001863  1  AD FF 0A     CHKFAT1:	LDA BUFFER+$1FF
001866  1  C9 AA        		CMP #$AA
001868  1  D0 F6        		BNE CHKFAT2
00186A  1  AD C2 0A     		LDA BUFFER+$1C2
00186D  1  C9 0E        		CMP #$0E
00186F  1  F0 18        		BEQ CHKFAT3
001871  1  C9 06        		CMP #$06
001873  1  F0 14        		BEQ CHKFAT3
001875  1  AD 36 09     		LDA BUFFER+$36
001878  1  C9 46        		CMP #'F'
00187A  1  D0 0A        		BNE CHKFAT4
00187C  1  AD 37 09     		LDA BUFFER+$37
00187F  1  C9 41        		CMP #'A'
001881  1  D0 03        		BNE CHKFAT4
001883  1  A9 03        		LDA #3
001885  1  60           		RTS
001886  1  A9 02        CHKFAT4:	LDA #2
001888  1  60           		RTS
001889  1  A9 00        CHKFAT3:	LDA #0
00188B  1  60           		RTS
00188C  1               
00188C  1               ;
00188C  1               ;
00188C  1               ;
00188C  1  38           CLU2SEC:	SEC
00188D  1  AD 91 07     		LDA FCURCLUS
001890  1  E9 02        		SBC #2
001892  1  8D 0C 07     		STA SECTOR
001895  1  AD 92 07     		LDA FCURCLUS+1
001898  1  E9 00        		SBC #0
00189A  1  8D 0D 07     		STA SECTOR+1
00189D  1  A9 00        		LDA #0
00189F  1  8D 0E 07     		STA SECTOR+2
0018A2  1  8D 0F 07     		STA SECTOR+3
0018A5  1               
0018A5  1  AD 00 07     		LDA SECCLUS
0018A8  1  4A           CL2SEC2:	LSR
0018A9  1  F0 0C        		BEQ CL2SEC1
0018AB  1  0E 0C 07     		ASL SECTOR
0018AE  1  2E 0D 07     		ROL SECTOR+1
0018B1  1  2E 0E 07     		ROL SECTOR+2
0018B4  1  4C A8 18     		JMP CL2SEC2
0018B7  1               
0018B7  1  18           CL2SEC1:	CLC
0018B8  1  AD 0C 07     		LDA SECTOR
0018BB  1  6D 18 07     		ADC DATBASE
0018BE  1  8D 0C 07     		STA SECTOR
0018C1  1  AD 0D 07     		LDA SECTOR+1
0018C4  1  6D 19 07     		ADC DATBASE+1
0018C7  1  8D 0D 07     		STA SECTOR+1
0018CA  1  AD 0E 07     		LDA SECTOR+2
0018CD  1  AD 0E 07     		LDA SECTOR+2
0018D0  1  6D 1A 07     		ADC DATBASE+2
0018D3  1  8D 0E 07     		STA SECTOR+2
0018D6  1  AD 0F 07     		LDA SECTOR+3
0018D9  1  6D 1B 07     		ADC DATBASE+3
0018DC  1  8D 0F 07     		STA SECTOR+3
0018DF  1               
0018DF  1  18           		CLC
0018E0  1  AD 0C 07     		LDA SECTOR
0018E3  1  6D 95 07     		ADC FCURSEC
0018E6  1  8D 0C 07     		STA SECTOR
0018E9  1  AD 0D 07     		LDA SECTOR+1
0018EC  1  69 00        		ADC #0
0018EE  1  8D 0D 07     		STA SECTOR+1
0018F1  1  AD 0E 07     		LDA SECTOR+2
0018F4  1  69 00        		ADC #0
0018F6  1  8D 0E 07     		STA SECTOR+2
0018F9  1  AD 0F 07     		LDA SECTOR+3
0018FC  1  69 00        		ADC #0
0018FE  1  8D 0F 07     		STA SECTOR+3
001901  1               
001901  1  60           		RTS
001902  1               
001902  1               GETNEXTC:
001902  1  AE 91 07     		LDX FCURCLUS
001905  1  AD 92 07     		LDA FCURCLUS+1
001908  1  20 12 19     		JSR GETCLUST
00190B  1  8E 91 07     		STX FCURCLUS
00190E  1  8D 92 07     		STA FCURCLUS+1
001911  1  60           		RTS
001912  1               ;
001912  1               ; X:CLUST:L
001912  1               ; A:CLUST:H
001912  1               ;
001912  1  18           GETCLUST:	CLC
001913  1  8D 0C 07     		STA SECTOR
001916  1  6D 10 07     		ADC FATBASE
001919  1  8D 0C 07     		STA SECTOR
00191C  1  AD 11 07     		LDA FATBASE+1
00191F  1  69 00        		ADC #0
001921  1  8D 0D 07     		STA SECTOR+1
001924  1  AD 12 07     		LDA FATBASE+2
001927  1  69 00        		ADC #0
001929  1  8D 0E 07     		STA SECTOR+2
00192C  1  AD 13 07     		LDA FATBASE+3
00192F  1  69 00        		ADC #0
001931  1  8D 0F 07     		STA SECTOR+3
001934  1  8A           		TXA
001935  1  48           		PHA
001936  1  20 A1 19     		JSR READFAT
001939  1               
001939  1  A9 00        		LDA #<FATBUF
00193B  1  85 00        		STA FATPTRS
00193D  1  A9 0B        		LDA #>FATBUF
00193F  1  85 01        		STA FATPTRS+1
001941  1               
001941  1  68           		PLA
001942  1  0A           		ASL
001943  1  90 02        		BCC GETCLUS1
001945  1  E6 01        		INC FATPTRS+1
001947  1  A8           GETCLUS1:	TAY
001948  1  B1 00        		LDA (FATPTRS),Y
00194A  1  AA           		TAX
00194B  1  C8           		INY
00194C  1  B1 00        		LDA (FATPTRS),Y
00194E  1  60           		RTS
00194F  1               ;
00194F  1               ;
00194F  1               ;
00194F  1  A0 00        SBC32:		LDY #0
001951  1  A2 03        		LDX #3
001953  1  38           		SEC
001954  1  B1 02        SBC32A:		LDA (FATPTRD),Y
001956  1  F1 00        		SBC (FATPTRS),Y
001958  1  91 02        		STA (FATPTRD),Y
00195A  1  C8           		INY
00195B  1  CA           		DEX
00195C  1  10 F6        		BPL SBC32A
00195E  1  60           		RTS
00195F  1               ;
00195F  1               ; FATPTRD - FATPTRS (compare)
00195F  1               ;
00195F  1  A0 03        CMP32:		LDY #3
001961  1  B1 02        CMP32A:		LDA (FATPTRD),Y
001963  1  D1 00        		CMP (FATPTRS),Y
001965  1  D0 03        		BNE CMP32B
001967  1  88           		DEY
001968  1  10 F7        		BPL CMP32A
00196A  1  60           CMP32B:		RTS
00196B  1               
00196B  1  84 00        COPY32:		STY FATPTRS
00196D  1  85 01        		STA FATPTRS+1
00196F  1  A0 03        COPY32B:	LDY #3
001971  1  B1 00        COPY32A:	LDA (FATPTRS),Y
001973  1  91 02        		STA (FATPTRD),Y
001975  1  88           		DEY
001976  1  10 F9        		BPL COPY32A
001978  1  60           		RTS
001979  1               
001979  1  84 02        CLEAR32:	STY FATPTRD
00197B  1  85 03        		STA FATPTRD+1
00197D  1  A0 03        		LDY #3
00197F  1  A9 00        		LDA #0
001981  1  91 02        CL32A:		STA (FATPTRD),Y
001983  1  88           		DEY
001984  1  10 FB        		BPL CL32A
001986  1  60           		RTS
001987  1               
001987  1  AD 3E 07     WRITEFAT:	LDA FDIRTY
00198A  1  F0 09        		BEQ WRITEFA9
00198C  1               
00198C  1  A2 20        		LDX #<LASTFAT
00198E  1  A9 07        		LDA #>LASTFAT
001990  1  20 60 1A     		JSR SETSEC
001993  1  10 01        		BPL WRITEFA1
001995  1  60           WRITEFA9:	RTS
001996  1               
001996  1  20 55 1A     WRITEFA1:	JSR SETWRITE
001999  1  A9 00        		LDA #0
00199B  1  8D 3E 07     		STA FDIRTY
00199E  1  4C CA 19     		JMP RWFAT
0019A1  1               
0019A1  1  A2 03        READFAT:	LDX #3
0019A3  1  BD 0C 07     READFAT3:	LDA SECTOR,X
0019A6  1  DD 20 07     		CMP LASTFAT,X
0019A9  1  D0 04        		BNE READFAT2
0019AB  1  CA           		DEX
0019AC  1  10 F5        		BPL READFAT3
0019AE  1  60           		RTS
0019AF  1               
0019AF  1  20 87 19     READFAT2:	JSR WRITEFAT
0019B2  1               
0019B2  1  A2 03        		LDX #3
0019B4  1  BD 0C 07     READFAT4:	LDA SECTOR,X
0019B7  1  9D 20 07     		STA LASTFAT,X
0019BA  1  CA           		DEX
0019BB  1  10 F7        		BPL READFAT4
0019BD  1               
0019BD  1  A2 0C        		LDX #<SECTOR
0019BF  1  A9 07        		LDA #>SECTOR
0019C1  1  20 60 1A     		JSR SETSEC
0019C4  1  10 01        		BPL READFAT1
0019C6  1  60           		RTS
0019C7  1               
0019C7  1  20 4A 1A     READFAT1:	JSR SETREAD
0019CA  1  A9 00        RWFAT:		LDA #<FATBUF
0019CC  1  8D 04 03     		STA DBUFLO
0019CF  1  A9 0B        		LDA #>FATBUF
0019D1  1  8D 05 03     		STA DBUFLO+1
0019D4  1  4C 3D 1A     		JMP RWSEC1
0019D7  1               ;
0019D7  1               ;
0019D7  1               ;
0019D7  1  AD 3D 07     WRITESEC:	LDA DDIRTY
0019DA  1  F0 09        		BEQ WRITESE9
0019DC  1               
0019DC  1  A2 1C        		LDX #<LASTSEC
0019DE  1  A9 07        		LDA #>LASTSEC
0019E0  1  20 60 1A     		JSR SETSEC
0019E3  1  10 01        		BPL WRITESE1
0019E5  1  60           WRITESE9:	RTS
0019E6  1               
0019E6  1  20 55 1A     WRITESE1:	JSR SETWRITE
0019E9  1  A9 00        		LDA #0
0019EB  1  8D 3D 07     		STA DDIRTY
0019EE  1  4C 31 1A     		JMP RWSEC
0019F1  1               
0019F1  1  A2 03        READSEC:	LDX #3
0019F3  1  BD 0C 07     READSEC3:	LDA SECTOR,X
0019F6  1  DD 1C 07     		CMP LASTSEC,X
0019F9  1  D0 04        		BNE READSEC2
0019FB  1  CA           		DEX
0019FC  1  10 F5        		BPL READSEC3
0019FE  1  60           		RTS
0019FF  1               
0019FF  1  20 D7 19     READSEC2:	JSR WRITESEC
001A02  1               
001A02  1  A2 03        		LDX #3
001A04  1  BD 0C 07     READSEC4:	LDA SECTOR,X
001A07  1  9D 1C 07     		STA LASTSEC,X
001A0A  1  CA           		DEX
001A0B  1  10 F7        		BPL READSEC4
001A0D  1               
001A0D  1  A2 00        READSECF:	LDX #0
001A0F  1  AD 87 07     		LDA FWBURST		;write Burst active?
001A12  1  8E 87 07     		STX FWBURST
001A15  1  F0 0D        		BEQ READSECF1		;no ->
001A17  1  A5 29        		LDA ICBLHZ		;still $200 to read?
001A19  1  C9 02        		CMP #2
001A1B  1  90 07        		BCC READSECF1		;no ->
001A1D  1  D0 04        		BNE READSECF2		;greater, no read
001A1F  1  A5 28        		LDA ICBLLZ		;we have substracted only $1ff
001A21  1  F0 01        		BEQ READSECF1		;so, if lenght-LO = 0 then end is reached.
001A23  1  60           READSECF2:	RTS
001A24  1               
001A24  1  A2 0C        READSECF1:	LDX #<SECTOR
001A26  1  A9 07        		LDA #>SECTOR
001A28  1  20 60 1A     		JSR SETSEC
001A2B  1  10 01        		BPL READSEC1
001A2D  1  60           		RTS
001A2E  1               
001A2E  1  20 4A 1A     READSEC1:	JSR SETREAD
001A31  1               
001A31  1  AD 3F 07     RWSEC:		LDA BUFADRL
001A34  1  8D 04 03     		STA DBUFLO
001A37  1  AD 40 07     		LDA BUFADRH
001A3A  1  8D 05 03     		STA DBUFLO+1
001A3D  1               
001A3D  1               	.IF PLATFORM <= 1
001A3D  1               RWSEC1:		LDX DBUFLO
001A3D  1               		LDA DBUFLO+1
001A3D  1               		CPY #$80		; $40 = read; $80 = write
001A3D  1               		beq RWSEC2
001A3D  1               		jmp readSector
001A3D  1               RWSEC2:		jmp writeSector
001A3D  1               	.ELSE
001A3D  1  A9 00        RWSEC1:		LDA #0			; 512 bytes
001A3F  1  8D 08 03     		STA DBYTLO
001A42  1  A9 02        		LDA #2
001A44  1  8D 09 03     		STA DBYTLO+1
001A47  1  4C 59 E4     		JMP SIOV
001A4A  1               	.ENDIF
001A4A  1               
001A4A  1               SETREAD:
001A4A  1               	.IF PLATFORM <= 1
001A4A  1               		LDY #$40
001A4A  1               	.ELSE
001A4A  1  A9 40        		LDA #$40
001A4C  1  8D 03 03     		STA DSTATS
001A4F  1  A9 52        		LDA #'R'
001A51  1  8D 02 03     		STA DCOMND
001A54  1               	.ENDIF
001A54  1  60           		RTS
001A55  1               
001A55  1               SETWRITE:
001A55  1               	.IF PLATFORM <= 1
001A55  1               		LDY #$80
001A55  1               	.ELSE
001A55  1  A9 80        		LDA #$80
001A57  1  8D 03 03     		STA DSTATS
001A5A  1  A9 50        		LDA #'P'
001A5C  1  8D 02 03     		STA DCOMND
001A5F  1               	.ENDIF
001A5F  1  60           		RTS
001A60  1               ;
001A60  1               ;
001A60  1               ;
001A60  1               	.IF PLATFORM <= 1
001A60  1               SETSEC:		jmp setSector
001A60  1               	.ELSE
001A60  1  8E 04 03     SETSEC:		STX DBUFLO
001A63  1  8D 05 03     		STA DBUFLO+1
001A66  1  A9 31        		LDA #$31
001A68  1  8D 00 03     		STA DDEVIC
001A6B  1  A9 01        		LDA #1
001A6D  1  8D 01 03     		STA DUNIT
001A70  1               
001A70  1  20 55 1A     		JSR SETWRITE
001A73  1               
001A73  1  A9 04        		LDA #4
001A75  1  8D 08 03     		STA DBYTLO
001A78  1  8D 06 03     		STA DTIMLO
001A7B  1  A9 00        		LDA #0
001A7D  1  8D 09 03     		STA DBYTLO+1
001A80  1  8D 0A 03     		STA DAUX1
001A83  1  8D 0B 03     		STA DAUX2
001A86  1  4C 59 E4     		JMP SIOV
001A89  1               
001A89  1               	.ENDIF
001A89  1               ;
001A89  1  48           PUTHEX:		PHA
001A8A  1  8A           		TXA
001A8B  1  48           		PHA
001A8C  1  98           		TYA
001A8D  1  48           		PHA
001A8E  1               
001A8E  1               	.IF PLATFORM = 2
001A8E  1  BA           		TSX
001A8F  1  BD 03 01     		LDA $103,X
001A92  1               	.ELSE
001A92  1               		LDA 3,s
001A92  1               	.ENDIF
001A92  1  48           		PHA
001A93  1  4A           		LSR
001A94  1  4A           		LSR
001A95  1  4A           		LSR
001A96  1  4A           		LSR
001A97  1  20 A6 1A     		JSR PUTNIB
001A9A  1               
001A9A  1  68           		PLA
001A9B  1  29 0F        		AND #15
001A9D  1  20 A6 1A     		JSR PUTNIB
001AA0  1               
001AA0  1  68           		PLA
001AA1  1  A8           		TAY
001AA2  1  68           		PLA
001AA3  1  AA           		TAX
001AA4  1  68           		PLA
001AA5  1  60           		RTS
001AA6  1               
001AA6  1  C9 0A        PUTNIB:		CMP #10
001AA8  1  90 02        		BCC PUTNIB1
001AAA  1  69 06        		ADC #6
001AAC  1  69 30        PUTNIB1:	ADC #48
001AAE  1  4C C3 1B     		JMP EOUTCH
001AB1  1               
001AB1  1  48           PRINT:		PHA
001AB2  1  8A           		TXA
001AB3  1  48           		PHA
001AB4  1  98           		TYA
001AB5  1  48           		PHA
001AB6  1               	.IF PLATFORM = 2
001AB6  1  BA           		TSX
001AB7  1  BD 03 01     		LDA $103,X
001ABA  1  C9 0A        		CMP #$0A
001ABC  1  D0 02        		BNE PR1
001ABE  1  A9 9B        		LDA #EOL
001AC0  1               	.ELSE
001AC0  1               		lda 3,s
001AC0  1               	.ENDIF
001AC0  1  20 C3 1B     PR1:		JSR EOUTCH
001AC3  1  68           		PLA
001AC4  1  A8           		TAY
001AC5  1  68           		PLA
001AC6  1  AA           		TAX
001AC7  1  68           		PLA
001AC8  1  60           		RTS
001AC9  1               
001AC9  1  48           NEWLINE:	PHA
001ACA  1  A9 9B        		LDA #EOL
001ACC  1  20 B1 1A     		JSR PRINT
001ACF  1  68           		PLA
001AD0  1  60           		RTS
001AD1  1               ;
001AD1  1               ;
001AD1  1               ;
001AD1  1  A8           PRINTSTR:	TAY
001AD2  1  A5 00        		LDA FATPTRS
001AD4  1  48           		PHA
001AD5  1  A5 01        		LDA FATPTRS+1
001AD7  1  48           		PHA
001AD8  1               
001AD8  1  86 00        		STX FATPTRS
001ADA  1  84 01        		STY FATPTRS+1
001ADC  1  A0 00        		LDY #0
001ADE  1  90 03        		BCC PRINTSTR2
001AE0  1               
001AE0  1  20 C9 1A     		JSR NEWLINE
001AE3  1               
001AE3  1  B1 00        PRINTSTR2:	LDA (FATPTRS),Y
001AE5  1  F0 06        		BEQ PRINTSTR1
001AE7  1  20 B1 1A     		JSR PRINT
001AEA  1  C8           		INY
001AEB  1  D0 F6        		BNE PRINTSTR2	;do not print more than 256 chars
001AED  1  68           PRINTSTR1:	PLA
001AEE  1  85 01        		STA FATPTRS+1
001AF0  1  68           		PLA
001AF1  1  85 00        		STA FATPTRS
001AF3  1  60           		RTS
001AF4  1               
001AF4  1               
001AF4  1  53 65 63 74  MSG0:		.byte "Sectors per cluster: $",0
001AF8  1  6F 72 73 20  
001AFC  1  70 65 72 20  
001B0B  1  52 65 73 65  MSG1:		.byte "Reserved sectors   : $",0
001B0F  1  72 76 65 64  
001B13  1  20 73 65 63  
001B22  1  4E 75 6D 62  MSG2:		.byte "Number of FATs     : $",0
001B26  1  65 72 20 6F  
001B2A  1  66 20 46 41  
001B39  1  4E 75 6D 62  MSG3:		.byte "Number of root-entr: $",0
001B3D  1  65 72 20 6F  
001B41  1  66 20 72 6F  
001B50  1  53 65 63 74  MSG4:		.byte "Sectors per FAT    : $",0
001B54  1  6F 72 73 20  
001B58  1  70 65 72 20  
001B67  1  46 41 54 2D  MSG5:		.byte "FAT-16 boot sector : $",0
001B6B  1  31 36 20 62  
001B6F  1  6F 6F 74 20  
001B7E  1  46 41 54 20  MSG6:		.byte "FAT base           : $",0
001B82  1  62 61 73 65  
001B86  1  20 20 20 20  
001B95  1  44 49 52 20  MSG7:		.byte "DIR base           : $",0
001B99  1  62 61 73 65  
001B9D  1  20 20 20 20  
001BAC  1  44 41 54 20  MSG8:		.byte "DAT base           : $",0
001BB0  1  62 61 73 65  
001BB4  1  20 20 20 20  
001BC3  1               
001BC3  1  AA           EOUTCH:		TAX
001BC4  1  A9 F2        		LDA #>(EPB-1)
001BC6  1  48           		PHA
001BC7  1  A9 AF        		LDA #<(EPB-1)
001BC9  1  48           		PHA
001BCA  1  8A           		TXA
001BCB  1  60           		RTS
001BCB  1               
